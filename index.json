{
  "api/ArmoniK.DevelopmentKit.Client.Common.Exceptions.ResultAbortedException.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Common.Exceptions.ResultAbortedException.html",
    "title": "Class ResultAbortedException",
    "summary": "Class ResultAbortedException Namespace ArmoniK.DevelopmentKit.Client.Common.Exceptions Assembly ArmoniK.DevelopmentKit.Client.Common.dll Exception when result is aborted public class ResultAbortedException : Exception, ISerializable Inheritance object Exception ResultAbortedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ResultAbortedException(string) Initializes a new instance of the ResultAbortedException with the specified error message public ResultAbortedException(string message) Parameters message string The error message"
  },
  "api/ArmoniK.DevelopmentKit.Client.Common.Exceptions.ServiceInvocationException.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Common.Exceptions.ServiceInvocationException.html",
    "title": "Class ServiceInvocationException",
    "summary": "Class ServiceInvocationException Namespace ArmoniK.DevelopmentKit.Client.Common.Exceptions Assembly ArmoniK.DevelopmentKit.Client.Common.dll The service invocation exception. This class wil contain all error information of task or result [PublicAPI] public class ServiceInvocationException : Exception, ISerializable Inheritance object Exception ServiceInvocationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ServiceInvocationException(Exception) The default constructor public ServiceInvocationException(Exception e) Parameters e Exception The previous exception ServiceInvocationException(Exception, ArmonikStatusCode) The overriden constructor to accept inner Exception as parameters public ServiceInvocationException(Exception e, ArmonikStatusCode statusCode) Parameters e Exception The previous exception statusCode ArmonikStatusCode The status of the task which is failing ServiceInvocationException(string, ArmonikStatusCode) The default constructor public ServiceInvocationException(string message, ArmonikStatusCode statusCode) Parameters message string The message to set for the exception statusCode ArmonikStatusCode the statusCode in the output ServiceInvocationException(string, ArgumentException, ArmonikStatusCode) The overriden constructor to acceptation inner exception and message as parameters public ServiceInvocationException(string message, ArgumentException e, ArmonikStatusCode statusCode) Parameters message string The message to set in the exception e ArgumentException The previous exception generated by failure statusCode ArmonikStatusCode The status of the task which is failing Properties Message Overriding the Message property public override string Message { get; } Property Value string OutputDetails The error details coming from TaskOutput API public string OutputDetails { get; set; } Property Value string StatusCode The status code when error occurred public ArmonikStatusCode StatusCode { get; } Property Value ArmonikStatusCode"
  },
  "api/ArmoniK.DevelopmentKit.Client.Common.Exceptions.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Common.Exceptions.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Client.Common.Exceptions",
    "summary": "Namespace ArmoniK.DevelopmentKit.Client.Common.Exceptions Classes ResultAbortedException Exception when result is aborted ServiceInvocationException The service invocation exception. This class wil contain all error information of task or result"
  },
  "api/ArmoniK.DevelopmentKit.Client.Common.IServiceInvocationHandler.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Common.IServiceInvocationHandler.html",
    "title": "Interface IServiceInvocationHandler",
    "summary": "Interface IServiceInvocationHandler Namespace ArmoniK.DevelopmentKit.Client.Common Assembly ArmoniK.DevelopmentKit.Client.Common.dll The interface from which the handler must inherit to be considered as a handler of service in the method LocalExecute, Execute or Submit [PublicAPI] public interface IServiceInvocationHandler Methods HandleError(ServiceInvocationException, string) The callBack method which has to be implemented to retrieve error or exception void HandleError(ServiceInvocationException e, string taskId) Parameters e ServiceInvocationException The exception sent to the client from the control plane taskId string The task identifier which has invoke the error callBack HandleResponse(object?, string) The callBack method which has to be implemented to retrieve response from the server void HandleResponse(object? response, string taskId) Parameters response object The object received from the server as the result of the method called by the client taskId string The task identifier triggering the callBack"
  },
  "api/ArmoniK.DevelopmentKit.Client.Common.Properties.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Common.Properties.html",
    "title": "Class Properties",
    "summary": "Class Properties Namespace ArmoniK.DevelopmentKit.Client.Common Assembly ArmoniK.DevelopmentKit.Client.Common.dll The properties class to set all configuration of the service The connection information The Option configuration AppSettings The ssl mTLS certificate if needed to connect to the control plane public class Properties Inheritance object Properties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Properties(TaskOptions, string?, int, string?, string?, string?, string?, string?, bool?) The constructor to instantiate Properties object public Properties(TaskOptions options, string? connectionAddress, int connectionPort = 0, string? protocol = null, string? clientCertPem = null, string? clientKeyPem = null, string? clientP12 = null, string? caCertPem = null, bool? sslValidation = null) Parameters options TaskOptions The taskOptions to set to a session connectionAddress string The control plane address to connect connectionPort int The optional port to connect to the control plane protocol string the protocol https or http clientCertPem string The client certificate fil in a pem format clientKeyPem string The client key file in a pem format clientP12 string The client certificate in a P12/Pkcs12/PFX format caCertPem string The Server certificate file to validate mTLS sslValidation bool? Disable the ssl strong validation of ssl certificate (default : enable => true) Properties(IConfiguration, TaskOptions, string?, int, string?, string?, string?, string?, string?, bool?, TimeSpan, double, TimeSpan, string?, string?, string?, bool?, string?) The constructor to instantiate Properties object public Properties(IConfiguration configuration, TaskOptions options, string? connectionAddress = null, int connectionPort = 0, string? protocol = null, string? clientCertFilePem = null, string? clientKeyFilePem = null, string? clientP12 = null, string? caCertPem = null, bool? sslValidation = null, TimeSpan retryInitialBackoff = default, double retryBackoffMultiplier = 0, TimeSpan retryMaxBackoff = default, string? proxy = null, string? proxyUsername = null, string? proxyPassword = null, bool? reusePorts = null, string? httpMessageHandler = null) Parameters configuration IConfiguration The configuration to read information from AppSettings file options TaskOptions The taskOptions to set to a session connectionAddress string The control plane address to connect connectionPort int The optional port to connect to the control plane protocol string the protocol https or http clientCertFilePem string The client certificate fil in a pem format clientKeyFilePem string The client key file in a pem format clientP12 string The client certificate in a P12/Pkcs12/PFX format caCertPem string The Server certificate file to validate mTLS sslValidation bool? Disable the ssl strong validation of ssl certificate (default : enable => true) retryInitialBackoff TimeSpan Initial retry backoff delay retryBackoffMultiplier double Retry backoff multiplier retryMaxBackoff TimeSpan Max retry backoff proxy string Proxy configuration. If empty, the default proxy configuration is used. If \"none\", proxy is disabled. If \"system\", the system proxy is used Otherwise, it is the URL of the proxy to use proxyUsername string Username used for proxy authentication proxyPassword string Password used for proxy authentication reusePorts bool? Enable the option SO_REUSE_UNICASTPORT upon socket opening to limit port exhaustion httpMessageHandler string Which HttpMessageHandler to use. Valid options: - HttpClientHandler - WinHttpHandler - GrpcWebHandler If the handler is not set, the best one will be used. Exceptions ArgumentException Fields DefaultTaskOptions The default configuration to submit task in a Session public static readonly TaskOptions DefaultTaskOptions Field Value TaskOptions Properties CaCertFilePem The path to the CA Root file name public string CaCertFilePem { get; set; } Property Value string ClientCertFilePem The property to get the path of the certificate file public string ClientCertFilePem { get; } Property Value string ClientKeyFilePem the property to get the path of the key certificate public string ClientKeyFilePem { get; } Property Value string ClientP12File the property to get the path of the certificate in P12/Pkcs12/PFX format public string ClientP12File { get; } Property Value string ConfSSLValidation The SSL validation property to disable SSL strong verification [PublicAPI] [Obsolete(\"Use ConfSslValidation instead\")] public bool ConfSSLValidation { get; } Property Value bool ConfSslValidation The SSL validation property to disable SSL strong verification public bool ConfSslValidation { get; } Property Value bool Configuration The configuration property to give to the ClientService connector public IConfiguration Configuration { get; } Property Value IConfiguration ConnectionAddress The connection address property to connect to the control plane public string ConnectionAddress { get; set; } Property Value string ConnectionPort The option connection port to connect to control plane (Default : 5001) public int ConnectionPort { get; set; } Property Value int ConnectionString The connection string building the value Port Protocol and address public string ConnectionString { get; } Property Value string ControlPlaneUri The control plane url to connect public Uri ControlPlaneUri { get; set; } Property Value Uri HttpMessageHandler Which HttpMessageHandler to use. Valid options: - HttpClientHandler - WinHttpHandler - GrpcWebHandler If the handler is not set, the best one will be used. public string HttpMessageHandler { get; set; } Property Value string MaxConcurrentBuffers Set the number of buffers that can be filled in asynchronous submitAsync public int MaxConcurrentBuffers { get; set; } Property Value int MaxParallelChannels The number of channels used for Buffered Submit (Default 1) public int MaxParallelChannels { get; set; } Property Value int MaxTasksPerBuffer Set the number of task by buffer public int MaxTasksPerBuffer { get; set; } Property Value int Protocol Secure or insecure protocol communication https or http (Default http) public string Protocol { get; set; } Property Value string Proxy Proxy configuration. If empty, the default proxy configuration is used. If \"none\", proxy is disabled. If \"system\", the system proxy is used Otherwise, it is the URL of the proxy to use. public string Proxy { get; set; } Property Value string ProxyPassword Password for the proxy public string ProxyPassword { get; set; } Property Value string ProxyUsername Username for the proxy public string ProxyUsername { get; set; } Property Value string RetryBackoffMultiplier Backoff multiplier for retries public double RetryBackoffMultiplier { get; } Property Value double RetryInitialBackoff Initial backoff from retries public TimeSpan RetryInitialBackoff { get; } Property Value TimeSpan RetryMaxBackoff Max backoff for retries public TimeSpan RetryMaxBackoff { get; } Property Value TimeSpan ReusePorts Enable the option SO_REUSE_UNICASTPORT upon socket opening to limit port exhaustion public bool ReusePorts { get; set; } Property Value bool TargetNameOverride The target name of the endpoint when ssl validation is disabled. Automatic if not set. public string TargetNameOverride { get; set; } Property Value string TaskOptions The TaskOptions to pass to the session or the submission session public TaskOptions TaskOptions { get; set; } Property Value TaskOptions TimeTriggerBuffer TimeSpan to trigger a batch to send the batch of submit public TimeSpan? TimeTriggerBuffer { get; set; } Property Value TimeSpan?"
  },
  "api/ArmoniK.DevelopmentKit.Client.Common.Status.ArmonikStatusCode.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Common.Status.ArmonikStatusCode.html",
    "title": "Enum ArmonikStatusCode",
    "summary": "Enum ArmonikStatusCode Namespace ArmoniK.DevelopmentKit.Client.Common.Status Assembly ArmoniK.DevelopmentKit.Client.Common.dll List of status for task and result in Armonik [PublicAPI] public enum ArmonikStatusCode Extension Methods EnumExt.GetName(Enum) Fields [Obsolete(\"unused\")] ResultError = 7 The result is in error and the task could finished without result ResultNotReady = 6 The result is not yet ready and the task is still in processing ResultReady = 5 The result is ready to be retrieved TaskCancelled = 3 The task has been canceled by operator or user himself [Obsolete(\"unused\")] TaskCompleted = 1 The task is completed but result could not be ready TaskFailed = 2 The task has failed and no result can be expected TaskTimeout = 4 the task has reached the max duration of execution Unknown = 0 Unknown status of task or result"
  },
  "api/ArmoniK.DevelopmentKit.Client.Common.Status.ResultStatusCollection.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Common.Status.ResultStatusCollection.html",
    "title": "Class ResultStatusCollection",
    "summary": "Class ResultStatusCollection Namespace ArmoniK.DevelopmentKit.Client.Common.Status Assembly ArmoniK.DevelopmentKit.Client.Common.dll List of result status that will be collected during the request GetResultStatus [PublicAPI] public sealed record ResultStatusCollection : IEquatable<ResultStatusCollection> Inheritance object ResultStatusCollection Implements IEquatable<ResultStatusCollection> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ResultStatusCollection(IReadOnlyList<ResultStatusData>, IReadOnlyList<ResultStatusData>, IReadOnlyList<string>, IReadOnlyList<ResultStatusData>, IReadOnlyList<ResultStatusData>) List of result status that will be collected during the request GetResultStatus public ResultStatusCollection(IReadOnlyList<ResultStatusData> IdsReady, IReadOnlyList<ResultStatusData> IdsResultError, IReadOnlyList<string> IdsError, IReadOnlyList<ResultStatusData> IdsNotReady, IReadOnlyList<ResultStatusData> Canceled) Parameters IdsReady IReadOnlyList<ResultStatusData> List of completed task where the result is ready to be retrieved IdsResultError IReadOnlyList<ResultStatusData> List of task or task result in error IdsError IReadOnlyList<string> List of Unknown TaskIds. There is a heavy error somewhere else in the execution when this list has element IdsNotReady IReadOnlyList<ResultStatusData> List of result not yet written in database Canceled IReadOnlyList<ResultStatusData> List of canceled task Properties Canceled List of canceled task public IReadOnlyList<ResultStatusData> Canceled { get; init; } Property Value IReadOnlyList<ResultStatusData> IdsError List of Unknown TaskIds. There is a heavy error somewhere else in the execution when this list has element public IReadOnlyList<string> IdsError { get; init; } Property Value IReadOnlyList<string> IdsNotReady List of result not yet written in database public IReadOnlyList<ResultStatusData> IdsNotReady { get; init; } Property Value IReadOnlyList<ResultStatusData> IdsReady List of completed task where the result is ready to be retrieved public IReadOnlyList<ResultStatusData> IdsReady { get; init; } Property Value IReadOnlyList<ResultStatusData> IdsResultError List of task or task result in error public IReadOnlyList<ResultStatusData> IdsResultError { get; init; } Property Value IReadOnlyList<ResultStatusData>"
  },
  "api/ArmoniK.DevelopmentKit.Client.Common.Status.ResultStatusData.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Common.Status.ResultStatusData.html",
    "title": "Class ResultStatusData",
    "summary": "Class ResultStatusData Namespace ArmoniK.DevelopmentKit.Client.Common.Status Assembly ArmoniK.DevelopmentKit.Client.Common.dll Stores the relation between result id, task id and result status [PublicAPI] public sealed record ResultStatusData : IEquatable<ResultStatusData> Inheritance object ResultStatusData Implements IEquatable<ResultStatusData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ResultStatusData(string, string, ResultStatus) Stores the relation between result id, task id and result status public ResultStatusData(string ResultId, string TaskId, ResultStatus Status) Parameters ResultId string The id of the result TaskId string The id of the task producing the result Status ResultStatus The status of the result Properties ResultId The id of the result public string ResultId { get; init; } Property Value string Status The status of the result public ResultStatus Status { get; init; } Property Value ResultStatus TaskId The id of the task producing the result public string TaskId { get; init; } Property Value string"
  },
  "api/ArmoniK.DevelopmentKit.Client.Common.Status.TaskStatusExt.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Common.Status.TaskStatusExt.html",
    "title": "Class TaskStatusExt",
    "summary": "Class TaskStatusExt Namespace ArmoniK.DevelopmentKit.Client.Common.Status Assembly ArmoniK.DevelopmentKit.Client.Common.dll Extends the ArmoniK API TaskStatus type to provide some means for conversion. public static class TaskStatusExt Inheritance object TaskStatusExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToArmonikStatusCode(TaskStatus) Converts the status from native API representation to SDK representation public static ArmonikStatusCode ToArmonikStatusCode(this TaskStatus taskStatus) Parameters taskStatus TaskStatus the native API status to convert Returns ArmonikStatusCode the SDK status"
  },
  "api/ArmoniK.DevelopmentKit.Client.Common.Status.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Common.Status.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Client.Common.Status",
    "summary": "Namespace ArmoniK.DevelopmentKit.Client.Common.Status Classes ResultStatusCollection List of result status that will be collected during the request GetResultStatus ResultStatusData Stores the relation between result id, task id and result status TaskStatusExt Extends the ArmoniK API TaskStatus type to provide some means for conversion. Enums ArmonikStatusCode List of status for task and result in Armonik"
  },
  "api/ArmoniK.DevelopmentKit.Client.Common.Submitter.BaseClientSubmitter-1.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Common.Submitter.BaseClientSubmitter-1.html",
    "title": "Class BaseClientSubmitter<T>",
    "summary": "Class BaseClientSubmitter<T> Namespace ArmoniK.DevelopmentKit.Client.Common.Submitter Assembly ArmoniK.DevelopmentKit.Client.Common.dll Base Object for all Client submitter Need to pass the child object Class Type [PublicAPI] public abstract class BaseClientSubmitter<T> Type Parameters T Inheritance object BaseClientSubmitter<T> Derived SessionService SessionService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseClientSubmitter(Properties, ILoggerFactory, TaskOptions, Session?, int) Base Object for all Client submitter protected BaseClientSubmitter(Properties properties, ILoggerFactory loggerFactory, TaskOptions taskOptions, Session? session, int chunkSubmitSize = 500) Parameters properties Properties Properties used to create grpc clients loggerFactory ILoggerFactory the logger factory to pass for root object taskOptions TaskOptions session Session chunkSubmitSize int The size of chunk to split the list of tasks Properties ChannelPool The channel pool to use for creating clients public ObjectPool<GrpcChannel> ChannelPool { get; } Property Value ObjectPool<GrpcChannel> Logger The logger to call the generate log in Seq protected ILogger<T> Logger { get; } Property Value ILogger<T> SessionId Get SessionId object stored during the call of SubmitTask, SubmitSubTask, SubmitSubTaskWithDependencies or WaitForCompletion, WaitForSubTaskCompletion or GetResults public Session SessionId { get; } Property Value Session TaskOptions Set or Get TaskOptions with inside MaxDuration, Priority, AppName, VersionName and AppNamespace public TaskOptions TaskOptions { get; } Property Value TaskOptions Methods ChunkSubmitTasksWithDependenciesAsync(IEnumerable<(string?, byte[], IList<string>, TaskOptions?)>, int, TaskOptions?, CancellationToken) The method to submit several tasks with dependencies tasks. This task will wait for to start until all dependencies are completed successfully public IAsyncEnumerable<(string taskId, string resultId)> ChunkSubmitTasksWithDependenciesAsync(IEnumerable<(string?, byte[], IList<string>, TaskOptions?)> payloadsWithDependencies, int maxRetries = 5, TaskOptions? taskOptions = null, CancellationToken cancellationToken = default) Parameters payloadsWithDependencies IEnumerable<(string, byte[], IList<string>, TaskOptions)> A list of Tuple(resultId, Payload) in dependence of those created tasks maxRetries int Set the number of retries Default Value 5 taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker cancellationToken CancellationToken Returns IAsyncEnumerable<(string taskId, string resultId)> return the ids of the created tasks CreateResultsMetadata(IEnumerable<string>) Creates the results metadata [PublicAPI] public Dictionary<string, string> CreateResultsMetadata(IEnumerable<string> resultNames) Parameters resultNames IEnumerable<string> Results names Returns Dictionary<string, string> Dictionary where each result name is associated with its result id CreateResultsMetadataAsync(IEnumerable<string>, CancellationToken) Creates the results metadata [PublicAPI] public ValueTask<Dictionary<string, string>> CreateResultsMetadataAsync(IEnumerable<string> resultNames, CancellationToken cancellationToken = default) Parameters resultNames IEnumerable<string> Results names cancellationToken CancellationToken Returns ValueTask<Dictionary<string, string>> Dictionary where each result name is associated with its result id GetResult(string, CancellationToken) Try to find the result of One task. If there no result, the function return byte[0] [PublicAPI] public byte[] GetResult(string taskId, CancellationToken cancellationToken = default) Parameters taskId string The Id of the task cancellationToken CancellationToken The optional cancellationToken Returns byte[] Returns the result or byte[0] if there no result GetResultAsync(string, CancellationToken) Try to find the result of One task. If there no result, the function return byte[0] [PublicAPI] public ValueTask<byte[]> GetResultAsync(string taskId, CancellationToken cancellationToken = default) Parameters taskId string The Id of the task cancellationToken CancellationToken The optional cancellationToken Returns ValueTask<byte[]> Returns the result or byte[0] if there no result GetResultIds(IEnumerable<string>) Gets the result ids for a given list of task ids. [PublicAPI] public ICollection<GetResultIdsResponse.Types.MapTaskResult> GetResultIds(IEnumerable<string> taskIds) Parameters taskIds IEnumerable<string> The list of task ids. Returns ICollection<GetResultIdsResponse.Types.MapTaskResult> A collection of map task results. GetResultIdsAsync(IEnumerable<string>, CancellationToken) Gets the result ids for a given list of task ids. [PublicAPI] public ValueTask<ICollection<GetResultIdsResponse.Types.MapTaskResult>> GetResultIdsAsync(IEnumerable<string> taskIds, CancellationToken cancellationToken = default) Parameters taskIds IEnumerable<string> The list of task ids. cancellationToken CancellationToken Returns ValueTask<ICollection<GetResultIdsResponse.Types.MapTaskResult>> A collection of map task results. GetResultStatus(IEnumerable<string>, CancellationToken) Get the result status of a list of results [PublicAPI] public ResultStatusCollection GetResultStatus(IEnumerable<string> taskIds, CancellationToken cancellationToken = default) Parameters taskIds IEnumerable<string> Collection of task ids from which to retrieve results cancellationToken CancellationToken Returns ResultStatusCollection A ResultCollection sorted by Status Completed, Result in Error or missing GetResultStatusAsync(IEnumerable<string>, CancellationToken) Get the result status of a list of results [PublicAPI] public ValueTask<ResultStatusCollection> GetResultStatusAsync(IEnumerable<string> taskIds, CancellationToken cancellationToken = default) Parameters taskIds IEnumerable<string> Collection of task ids from which to retrieve results cancellationToken CancellationToken Returns ValueTask<ResultStatusCollection> A ResultCollection sorted by Status Completed, Result in Error or missing GetResults(IEnumerable<string>, CancellationToken) Retrieve results from control plane [PublicAPI] public IEnumerable<Tuple<string, byte[]>> GetResults(IEnumerable<string> taskIds, CancellationToken cancellationToken = default) Parameters taskIds IEnumerable<string> Collection of task ids cancellationToken CancellationToken The optional cancellationToken Returns IEnumerable<Tuple<string, byte[]>> return a dictionary with key taskId and payload Exceptions ArgumentNullException ArgumentException GetResultsAsync(IEnumerable<string>, CancellationToken) Retrieve results from control plane [PublicAPI] public IAsyncEnumerable<Tuple<string, byte[]>> GetResultsAsync(IEnumerable<string> taskIds, CancellationToken cancellationToken = default) Parameters taskIds IEnumerable<string> Collection of task ids cancellationToken CancellationToken The optional cancellationToken Returns IAsyncEnumerable<Tuple<string, byte[]>> return a dictionary with key taskId and payload Exceptions ArgumentNullException ArgumentException GetTaskOutputInfo(string) Return the taskOutput when error occurred [PublicAPI] public Output GetTaskOutputInfo(string taskId) Parameters taskId string Returns Output GetTaskOutputInfoAsync(string, CancellationToken) Return the taskOutput when error occurred [PublicAPI] public ValueTask<Output> GetTaskOutputInfoAsync(string taskId, CancellationToken cancellationToken = default) Parameters taskId string cancellationToken CancellationToken Returns ValueTask<Output> GetTaskStatues(params string[]) Returns the list status of the tasks [PublicAPI] public IEnumerable<Tuple<string, TaskStatus>> GetTaskStatues(params string[] taskIds) Parameters taskIds string[] The list of taskIds Returns IEnumerable<Tuple<string, TaskStatus>> GetTaskStatuesAsync(CancellationToken, params string[]) Returns the list status of the tasks [PublicAPI] public IAsyncEnumerable<Tuple<string, TaskStatus>> GetTaskStatuesAsync(CancellationToken cancellationToken = default, params string[] taskIds) Parameters cancellationToken CancellationToken taskIds string[] The list of taskIds Returns IAsyncEnumerable<Tuple<string, TaskStatus>> GetTaskStatus(string) Returns the status of the task [PublicAPI] public TaskStatus GetTaskStatus(string taskId) Parameters taskId string The taskId of the task Returns TaskStatus GetTaskStatusAsync(string, CancellationToken) Returns the status of the task [PublicAPI] public ValueTask<TaskStatus> GetTaskStatusAsync(string taskId, CancellationToken cancellationToken = default) Parameters taskId string The taskId of the task cancellationToken CancellationToken Returns ValueTask<TaskStatus> SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, int, TaskOptions?) The method to submit several tasks with dependencies tasks. This task will wait for to start until all dependencies are completed successfully [PublicAPI] public IEnumerable<string> SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>> payloadsWithDependencies, int maxRetries = 5, TaskOptions? taskOptions = null) Parameters payloadsWithDependencies IEnumerable<Tuple<byte[], IList<string>>> A list of Tuple(Payload, parent dependencies) in dependence of those created tasks maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns IEnumerable<string> return a list of taskIds of the created tasks SubmitTasksWithDependencies(IEnumerable<Tuple<string, byte[], IList<string>>>, int, TaskOptions?) The method to submit several tasks with dependencies tasks. This task will wait for to start until all dependencies are completed successfully [PublicAPI] public IEnumerable<string> SubmitTasksWithDependencies(IEnumerable<Tuple<string, byte[], IList<string>>> payloadsWithDependencies, int maxRetries = 5, TaskOptions? taskOptions = null) Parameters payloadsWithDependencies IEnumerable<Tuple<string, byte[], IList<string>>> A list of Tuple(resultId, payload, parent dependencies) in dependence of those created tasks maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions overrides if non null override default in Session Returns IEnumerable<string> return a list of taskIds of the created tasks Remarks The result ids must first be created using CreateResultsMetadata(IEnumerable<string>) SubmitTasksWithDependenciesAsync(IEnumerable<Tuple<byte[], IList<string>>>, int, TaskOptions?, CancellationToken) The method to submit several tasks with dependencies tasks. This task will wait for to start until all dependencies are completed successfully [PublicAPI] public IAsyncEnumerable<string> SubmitTasksWithDependenciesAsync(IEnumerable<Tuple<byte[], IList<string>>> payloadsWithDependencies, int maxRetries = 5, TaskOptions? taskOptions = null, CancellationToken cancellationToken = default) Parameters payloadsWithDependencies IEnumerable<Tuple<byte[], IList<string>>> A list of Tuple(Payload, parent dependencies) in dependence of those created tasks maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker cancellationToken CancellationToken Returns IAsyncEnumerable<string> return a list of taskIds of the created tasks SubmitTasksWithDependenciesAsync(IEnumerable<Tuple<string, byte[], IList<string>>>, int, TaskOptions?, CancellationToken) The method to submit several tasks with dependencies tasks. This task will wait for to start until all dependencies are completed successfully [PublicAPI] public IAsyncEnumerable<string> SubmitTasksWithDependenciesAsync(IEnumerable<Tuple<string, byte[], IList<string>>> payloadsWithDependencies, int maxRetries = 5, TaskOptions? taskOptions = null, CancellationToken cancellationToken = default) Parameters payloadsWithDependencies IEnumerable<Tuple<string, byte[], IList<string>>> A list of Tuple(resultId, payload, parent dependencies) in dependence of those created tasks maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions overrides if non null override default in Session cancellationToken CancellationToken Returns IAsyncEnumerable<string> return a list of taskIds of the created tasks Remarks The result ids must first be created using CreateResultsMetadata(IEnumerable<string>) TryGetResult(string, bool, CancellationToken) Try to find the result of One task. If there no result, the function return byte[0] [PublicAPI] [Obsolete(\"Use version without the checkOutput parameter.\")] public byte[]? TryGetResult(string taskId, bool checkOutput, CancellationToken cancellationToken = default) Parameters taskId string The Id of the task checkOutput bool cancellationToken CancellationToken The optional cancellationToken Returns byte[] Returns the result or byte[0] if there no result or null if task is not yet ready TryGetResult(string, CancellationToken) Try to find the result of One task. If there no result, the function return byte[0] [PublicAPI] public byte[]? TryGetResult(string taskId, CancellationToken cancellationToken = default) Parameters taskId string The Id of the task cancellationToken CancellationToken The optional cancellationToken Returns byte[] Returns the result or byte[0] if there no result or null if task is not yet ready TryGetResultAsync(ResultRequest, CancellationToken) Try to get the result if it is available [PublicAPI] public ValueTask<byte[]?> TryGetResultAsync(ResultRequest resultRequest, CancellationToken cancellationToken = default) Parameters resultRequest ResultRequest Request specifying the result to fetch cancellationToken CancellationToken The token used to cancel the operation. Returns ValueTask<byte[]> Returns the result if it is ready, null if task is not yet ready Exceptions Exception ArgumentOutOfRangeException TryGetResultAsync(string, bool, CancellationToken) Try to find the result of One task. If there no result, the function return byte[0] [PublicAPI] [Obsolete(\"Use version without the checkOutput parameter.\")] public ValueTask<byte[]?> TryGetResultAsync(string taskId, bool checkOutput, CancellationToken cancellationToken = default) Parameters taskId string The Id of the task checkOutput bool cancellationToken CancellationToken The optional cancellationToken Returns ValueTask<byte[]> Returns the result or byte[0] if there no result or null if task is not yet ready TryGetResultAsync(string, CancellationToken) Try to find the result of One task. If there no result, the function return byte[0] [PublicAPI] public ValueTask<byte[]?> TryGetResultAsync(string taskId, CancellationToken cancellationToken = default) Parameters taskId string The Id of the task cancellationToken CancellationToken The optional cancellationToken Returns ValueTask<byte[]> Returns the result or byte[0] if there no result or null if task is not yet ready TryGetResults(IList<string>) Try to get result of a list of taskIds [PublicAPI] public IList<Tuple<string, byte[]>> TryGetResults(IList<string> resultIds) Parameters resultIds IList<string> A list of result ids Returns IList<Tuple<string, byte[]>> Returns an Enumerable pair of TryGetResultsAsync(IList<string>, CancellationToken) Try to get result of a list of taskIds [PublicAPI] public IAsyncEnumerable<Tuple<string, byte[]>> TryGetResultsAsync(IList<string> resultIds, CancellationToken cancellationToken = default) Parameters resultIds IList<string> A list of result ids cancellationToken CancellationToken Returns IAsyncEnumerable<Tuple<string, byte[]>> Returns an Enumerable pair of WaitForTaskCompletion(string, int, int) User method to wait for only the parent task from the client [PublicAPI] public void WaitForTaskCompletion(string taskId, int maxRetries = 5, int delayMs = 20000) Parameters taskId string The task taskId of the task to wait for maxRetries int Max number of retries for the underlying calls delayMs int Delay between retries WaitForTaskCompletionAsync(string, int, int, CancellationToken) User method to wait for only the parent task from the client [PublicAPI] public ValueTask WaitForTaskCompletionAsync(string taskId, int maxRetries = 5, int delayMs = 20000, CancellationToken cancellationToken = default) Parameters taskId string The task taskId of the task to wait for maxRetries int Max number of retries for the underlying calls delayMs int Delay between retries cancellationToken CancellationToken Returns ValueTask WaitForTasksCompletion(IEnumerable<string>, int, int) User method to wait for only the parent task from the client [PublicAPI] public void WaitForTasksCompletion(IEnumerable<string> taskIds, int maxRetries = 5, int delayMs = 20000) Parameters taskIds IEnumerable<string> List of taskIds maxRetries int Max number of retries delayMs int WaitForTasksCompletionAsync(IEnumerable<string>, int, int, CancellationToken) User method to wait for only the parent task from the client [PublicAPI] public ValueTask WaitForTasksCompletionAsync(IEnumerable<string> taskIds, int maxRetries = 5, int delayMs = 20000, CancellationToken cancellationToken = default) Parameters taskIds IEnumerable<string> List of taskIds maxRetries int Max number of retries delayMs int cancellationToken CancellationToken Returns ValueTask"
  },
  "api/ArmoniK.DevelopmentKit.Client.Common.Submitter.ClientServiceConnector.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Common.Submitter.ClientServiceConnector.html",
    "title": "Class ClientServiceConnector",
    "summary": "Class ClientServiceConnector Namespace ArmoniK.DevelopmentKit.Client.Common.Submitter Assembly ArmoniK.DevelopmentKit.Client.Common.dll ClientServiceConnector is the class to connection to the control plane with different like address,port, insecure connection, TLS, and mTLS public class ClientServiceConnector Inheritance object ClientServiceConnector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ControlPlaneConnectionPool(Properties, ILoggerFactory?) Create a connection pool to the control plane with mTLS authentication public static ObjectPool<GrpcChannel> ControlPlaneConnectionPool(Properties properties, ILoggerFactory? loggerFactory = null) Parameters properties Properties Configuration Properties loggerFactory ILoggerFactory Optional logger factory Returns ObjectPool<GrpcChannel> The connection pool"
  },
  "api/ArmoniK.DevelopmentKit.Client.Common.Submitter.ISubmitterService.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Common.Submitter.ISubmitterService.html",
    "title": "Interface ISubmitterService",
    "summary": "Interface ISubmitterService Namespace ArmoniK.DevelopmentKit.Client.Common.Submitter Assembly ArmoniK.DevelopmentKit.Client.Common.dll Common Interface for Submitter services. [PublicAPI] public interface ISubmitterService : IDisposable Inherited Members IDisposable.Dispose() Extension Methods SubmitterServiceExt.Submit(ISubmitterService, string, byte[], IServiceInvocationHandler, int, TaskOptions?) SubmitterServiceExt.Submit(ISubmitterService, string, object[], IServiceInvocationHandler, int, TaskOptions?) Properties SessionId The Id of the current session string SessionId { get; } Property Value string Methods Submit(string, IEnumerable<byte[]>, IServiceInvocationHandler, int, TaskOptions?) The method submits a list of task with a list of arguments for each task which will be serialized into a byte[] for each call MethodName(byte[] argument) IEnumerable<string> Submit(string methodName, IEnumerable<byte[]> arguments, IServiceInvocationHandler handler, int maxRetries = 5, TaskOptions? taskOptions = null) Parameters methodName string The name of the method inside the service arguments IEnumerable<byte[]> List of serialized arguments that will already serialize for MethodName. handler IServiceInvocationHandler The handler callBack implemented as IServiceInvocationHandler to get response or result or error maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns IEnumerable<string> Return the list of created taskIds Submit(string, IEnumerable<object[]>, IServiceInvocationHandler, int, TaskOptions?) The method submits a list of task with a list of arguments for each task which will be serialized into a byte[] for each call MethodName(byte[] argument) IEnumerable<string> Submit(string methodName, IEnumerable<object[]> arguments, IServiceInvocationHandler handler, int maxRetries = 5, TaskOptions? taskOptions = null) Parameters methodName string The name of the method inside the service arguments IEnumerable<object[]> A list of parameters that can be passed in parameters of the each call of function handler IServiceInvocationHandler The handler callBack implemented as IServiceInvocationHandler to get response or result or error maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns IEnumerable<string> Return the list of created taskIds SubmitAsync(string, byte[], IServiceInvocationHandler, int, TaskOptions?, CancellationToken) The method submit with one serialized argument that will send as byte[] MethodName(byte[] argument). Task<string> SubmitAsync(string methodName, byte[] argument, IServiceInvocationHandler handler, int maxRetries = 5, TaskOptions? taskOptions = null, CancellationToken token = default) Parameters methodName string The name of the method inside the service argument byte[] One serialized argument that will already serialize for MethodName. handler IServiceInvocationHandler The handler callBack implemented as IServiceInvocationHandler to get response or result or error maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker token CancellationToken The cancellation token to set to cancel the async task Returns Task<string> Return the taskId string SubmitAsync(string, object[], IServiceInvocationHandler, int, TaskOptions?, CancellationToken) The method submit with one serialized argument that will send as byte[] MethodName(byte[] argument). Task<string> SubmitAsync(string methodName, object[] argument, IServiceInvocationHandler handler, int maxRetries = 5, TaskOptions? taskOptions = null, CancellationToken token = default) Parameters methodName string The name of the method inside the service argument object[] One serialized argument that will already serialize for MethodName. handler IServiceInvocationHandler The handler callBack implemented as IServiceInvocationHandler to get response or result or error maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker token CancellationToken The cancellation token to set to cancel the async task Returns Task<string> Return the taskId string"
  },
  "api/ArmoniK.DevelopmentKit.Client.Common.Submitter.RequestTaskMap.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Common.Submitter.RequestTaskMap.html",
    "title": "Class RequestTaskMap",
    "summary": "Class RequestTaskMap Namespace ArmoniK.DevelopmentKit.Client.Common.Submitter Assembly ArmoniK.DevelopmentKit.Client.Common.dll The class to map submissionId to taskId when submit is done asynchronously public class RequestTaskMap Inheritance object RequestTaskMap Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BufferFailures(IEnumerable<Guid>, Exception) Notice user that there was at least one error during the submission of buffer public void BufferFailures(IEnumerable<Guid> submissionIds, Exception exception) Parameters submissionIds IEnumerable<Guid> exception Exception exception occurring the submission GetResponseAsync(Guid) Get the correct taskId based on the submissionId public Task<string> GetResponseAsync(Guid submissionId) Parameters submissionId Guid The submit Id push during the submission Returns Task<string> the async taskId PutResponse(Guid, string) Push the submissionId and taskId in the concurrentDictionary public void PutResponse(Guid submitId, string taskId) Parameters submitId Guid The submit Id push during the submission taskId string the taskId was given by the control Plane"
  },
  "api/ArmoniK.DevelopmentKit.Client.Common.Submitter.SubmitterServiceExt.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Common.Submitter.SubmitterServiceExt.html",
    "title": "Class SubmitterServiceExt",
    "summary": "Class SubmitterServiceExt Namespace ArmoniK.DevelopmentKit.Client.Common.Submitter Assembly ArmoniK.DevelopmentKit.Client.Common.dll Provide extension methods for ISubmitterService [PublicAPI] public static class SubmitterServiceExt Inheritance object SubmitterServiceExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Submit(ISubmitterService, string, byte[], IServiceInvocationHandler, int, TaskOptions?) The method submit will execute task asynchronously on the server public static string Submit(this ISubmitterService service, string methodName, byte[] arguments, IServiceInvocationHandler handler, int maxRetries = 5, TaskOptions? taskOptions = null) Parameters service ISubmitterService the ISubmitterService extended methodName string The name of the method inside the service arguments byte[] List of serialized arguments that will already serialize for MethodName. handler IServiceInvocationHandler The handler callBack implemented as IServiceInvocationHandler to get response or result or error maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns string Return the taskId string Submit(ISubmitterService, string, object[], IServiceInvocationHandler, int, TaskOptions?) The method submit will execute task asynchronously on the server public static string Submit(this ISubmitterService service, string methodName, object[] arguments, IServiceInvocationHandler handler, int maxRetries = 5, TaskOptions? taskOptions = null) Parameters service ISubmitterService the ISubmitterService extended methodName string The name of the method inside the service arguments object[] A list of objects that can be passed in parameters of the function handler IServiceInvocationHandler The handler callBack implemented as IServiceInvocationHandler to get response or result or error maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns string Return the taskId string"
  },
  "api/ArmoniK.DevelopmentKit.Client.Common.Submitter.TasksClientExt.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Common.Submitter.TasksClientExt.html",
    "title": "Class TasksClientExt",
    "summary": "Class TasksClientExt Namespace ArmoniK.DevelopmentKit.Client.Common.Submitter Assembly ArmoniK.DevelopmentKit.Client.Common.dll public static class TasksClientExt Inheritance object TasksClientExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ListTasks(TasksClient, Filters, Sort, int) List tasks while handling page size public static IEnumerable<TaskSummary> ListTasks(this Tasks.TasksClient tasksClient, Filters filters, ListTasksRequest.Types.Sort sort, int pageSize = 50) Parameters tasksClient Tasks.TasksClient the tasks client filters Filters filters to apply on the tasks sort ListTasksRequest.Types.Sort sorting order pageSize int page size Returns IEnumerable<TaskSummary> ListTasksAsync(TasksClient, Filters, Sort, int, CancellationToken) List tasks while handling page size public static IAsyncEnumerable<TaskSummary> ListTasksAsync(this Tasks.TasksClient tasksClient, Filters filters, ListTasksRequest.Types.Sort sort, int pageSize = 50, CancellationToken cancellationToken = default) Parameters tasksClient Tasks.TasksClient the tasks client filters Filters filters to apply on the tasks sort ListTasksRequest.Types.Sort sorting order pageSize int page size cancellationToken CancellationToken Returns IAsyncEnumerable<TaskSummary> TaskIdFilter(string) Filter on task id public static FiltersAnd TaskIdFilter(string taskId) Parameters taskId string the task id to filter on Returns FiltersAnd TaskSessionIdFilter(string) Filter tasks on their sessionId public static FiltersAnd TaskSessionIdFilter(string sessionId) Parameters sessionId string the session id to filter on Returns FiltersAnd TaskStatusFilter(TaskStatus, string) Filter on task status ajd session id public static FiltersAnd TaskStatusFilter(TaskStatus status, string sessionId) Parameters status TaskStatus the task status to filter on sessionId string the session id to filter on Returns FiltersAnd"
  },
  "api/ArmoniK.DevelopmentKit.Client.Common.Submitter.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Common.Submitter.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Client.Common.Submitter",
    "summary": "Namespace ArmoniK.DevelopmentKit.Client.Common.Submitter Classes BaseClientSubmitter<T> Base Object for all Client submitter Need to pass the child object Class Type ClientServiceConnector ClientServiceConnector is the class to connection to the control plane with different like address,port, insecure connection, TLS, and mTLS RequestTaskMap The class to map submissionId to taskId when submit is done asynchronously SubmitterServiceExt Provide extension methods for ISubmitterService TasksClientExt Interfaces ISubmitterService Common Interface for Submitter services."
  },
  "api/ArmoniK.DevelopmentKit.Client.Common.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Common.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Client.Common",
    "summary": "Namespace ArmoniK.DevelopmentKit.Client.Common Classes Properties The properties class to set all configuration of the service The connection information The Option configuration AppSettings The ssl mTLS certificate if needed to connect to the control plane Interfaces IServiceInvocationHandler The interface from which the handler must inherit to be considered as a handler of service in the method LocalExecute, Execute or Submit"
  },
  "api/ArmoniK.DevelopmentKit.Client.Symphony.ArmonikSymphonyClient.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Symphony.ArmonikSymphonyClient.html",
    "title": "Class ArmonikSymphonyClient",
    "summary": "Class ArmonikSymphonyClient Namespace ArmoniK.DevelopmentKit.Client.Symphony Assembly ArmoniK.DevelopmentKit.Client.Symphony.dll The main object to communicate with the control Plane from the client side The class will connect to the control plane to createSession, SubmitTask, Wait for result and get the result. See an example in the project ArmoniK.Samples in the sub project https://github.com/aneoconsulting/ArmoniK.Samples/tree/main/Samples/SymphonyLike Samples.ArmoniK.Sample.SymphonyClient public class ArmonikSymphonyClient Inheritance object ArmonikSymphonyClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ArmonikSymphonyClient(IConfiguration, ILoggerFactory) The ctor with IConfiguration and optional TaskOptions public ArmonikSymphonyClient(IConfiguration configuration, ILoggerFactory loggerFactory) Parameters configuration IConfiguration IConfiguration to set Client Data information and Grpc EndPoint loggerFactory ILoggerFactory Factory to create logger in the client service Properties SectionGrpc Returns the section key Grpc from appSettings.json public string SectionGrpc { get; set; } Property Value string Methods CreateSession(TaskOptions?) Create the session to submit task public SessionService CreateSession(TaskOptions? taskOptions = null) Parameters taskOptions TaskOptions Optional parameter to set TaskOptions during the Session creation Returns SessionService Returns the SessionService to submit, wait or get result OpenSession(Session, TaskOptions?) Open the session already created to submit task public SessionService OpenSession(Session sessionId, TaskOptions? taskOptions = null) Parameters sessionId Session The sessionId string which will opened taskOptions TaskOptions the customer taskOptions send to the server by the client Returns SessionService Returns the SessionService to submit, wait or get result"
  },
  "api/ArmoniK.DevelopmentKit.Client.Symphony.SessionService.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Symphony.SessionService.html",
    "title": "Class SessionService",
    "summary": "Class SessionService Namespace ArmoniK.DevelopmentKit.Client.Symphony Assembly ArmoniK.DevelopmentKit.Client.Symphony.dll The class SessionService will be create each time the function CreateSession or OpenSession will be called by client or by the worker. public class SessionService : BaseClientSubmitter<SessionService> Inheritance object BaseClientSubmitter<SessionService> SessionService Inherited Members BaseClientSubmitter<SessionService>.TaskOptions BaseClientSubmitter<SessionService>.SessionId BaseClientSubmitter<SessionService>.ChannelPool BaseClientSubmitter<SessionService>.Logger BaseClientSubmitter<SessionService>.GetTaskStatusAsync(string, CancellationToken) BaseClientSubmitter<SessionService>.GetTaskStatus(string) BaseClientSubmitter<SessionService>.GetTaskStatuesAsync(CancellationToken, params string[]) BaseClientSubmitter<SessionService>.GetTaskStatues(params string[]) BaseClientSubmitter<SessionService>.GetTaskOutputInfoAsync(string, CancellationToken) BaseClientSubmitter<SessionService>.GetTaskOutputInfo(string) BaseClientSubmitter<SessionService>.SubmitTasksWithDependenciesAsync(IEnumerable<Tuple<string, byte[], IList<string>>>, int, TaskOptions, CancellationToken) BaseClientSubmitter<SessionService>.SubmitTasksWithDependencies(IEnumerable<Tuple<string, byte[], IList<string>>>, int, TaskOptions) BaseClientSubmitter<SessionService>.SubmitTasksWithDependenciesAsync(IEnumerable<Tuple<byte[], IList<string>>>, int, TaskOptions, CancellationToken) BaseClientSubmitter<SessionService>.SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, int, TaskOptions) BaseClientSubmitter<SessionService>.ChunkSubmitTasksWithDependenciesAsync(IEnumerable<(string, byte[], IList<string>, TaskOptions)>, int, TaskOptions, CancellationToken) BaseClientSubmitter<SessionService>.WaitForTaskCompletionAsync(string, int, int, CancellationToken) BaseClientSubmitter<SessionService>.WaitForTaskCompletion(string, int, int) BaseClientSubmitter<SessionService>.WaitForTasksCompletionAsync(IEnumerable<string>, int, int, CancellationToken) BaseClientSubmitter<SessionService>.WaitForTasksCompletion(IEnumerable<string>, int, int) BaseClientSubmitter<SessionService>.GetResultStatusAsync(IEnumerable<string>, CancellationToken) BaseClientSubmitter<SessionService>.GetResultStatus(IEnumerable<string>, CancellationToken) BaseClientSubmitter<SessionService>.GetResultIdsAsync(IEnumerable<string>, CancellationToken) BaseClientSubmitter<SessionService>.GetResultIds(IEnumerable<string>) BaseClientSubmitter<SessionService>.GetResultAsync(string, CancellationToken) BaseClientSubmitter<SessionService>.GetResult(string, CancellationToken) BaseClientSubmitter<SessionService>.GetResultsAsync(IEnumerable<string>, CancellationToken) BaseClientSubmitter<SessionService>.GetResults(IEnumerable<string>, CancellationToken) BaseClientSubmitter<SessionService>.TryGetResultAsync(ResultRequest, CancellationToken) BaseClientSubmitter<SessionService>.TryGetResultAsync(string, bool, CancellationToken) BaseClientSubmitter<SessionService>.TryGetResult(string, bool, CancellationToken) BaseClientSubmitter<SessionService>.TryGetResultAsync(string, CancellationToken) BaseClientSubmitter<SessionService>.TryGetResult(string, CancellationToken) BaseClientSubmitter<SessionService>.TryGetResultsAsync(IList<string>, CancellationToken) BaseClientSubmitter<SessionService>.TryGetResults(IList<string>) BaseClientSubmitter<SessionService>.CreateResultsMetadataAsync(IEnumerable<string>, CancellationToken) BaseClientSubmitter<SessionService>.CreateResultsMetadata(IEnumerable<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SessionService(Properties, ILoggerFactory, TaskOptions?, Session?) Ctor to instantiate a new SessionService This is an object to send task or get Results from a session public SessionService(Properties properties, ILoggerFactory loggerFactory, TaskOptions? taskOptions = null, Session? session = null) Parameters properties Properties loggerFactory ILoggerFactory taskOptions TaskOptions session Session Methods InitializeDefaultTaskOptions() Default task options [PublicAPI] public static TaskOptions InitializeDefaultTaskOptions() Returns TaskOptions SubmitTask(byte[], int, TaskOptions?) User method to submit task from the client [PublicAPI] public string SubmitTask(byte[] payload, int maxRetries = 5, TaskOptions? taskOptions = null) Parameters payload byte[] The user payload to execute. maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns string SubmitTaskAsync(byte[], int, TaskOptions?, CancellationToken) User method to submit task from the client [PublicAPI] public ValueTask<string> SubmitTaskAsync(byte[] payload, int maxRetries = 5, TaskOptions? taskOptions = null, CancellationToken cancellationToken = default) Parameters payload byte[] The user payload to execute. maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker cancellationToken CancellationToken Returns ValueTask<string> SubmitTaskWithDependencies(byte[], IList<string>, int, TaskOptions?) The method to submit One task with dependencies tasks. This task will wait for to start until all dependencies are completed successfully [PublicAPI] public string SubmitTaskWithDependencies(byte[] payload, IList<string> dependencies, int maxRetries = 5, TaskOptions? taskOptions = null) Parameters payload byte[] The payload to submit dependencies IList<string> A list of task Id in dependence of this created task maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns string return the taskId of the created task SubmitTaskWithDependenciesAsync(byte[], IList<string>, int, TaskOptions?, CancellationToken) The method to submit One task with dependencies tasks. This task will wait for to start until all dependencies are completed successfully [PublicAPI] public ValueTask<string> SubmitTaskWithDependenciesAsync(byte[] payload, IList<string> dependencies, int maxRetries = 5, TaskOptions? taskOptions = null, CancellationToken cancellationToken = default) Parameters payload byte[] The payload to submit dependencies IList<string> A list of task Id in dependence of this created task maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker cancellationToken CancellationToken Returns ValueTask<string> return the taskId of the created task SubmitTasks(IEnumerable<byte[]>, int, TaskOptions?) User method to submit task from the client Need a client Service. In case of ServiceContainer channel can be null until the OpenSession is called [PublicAPI] public IEnumerable<string> SubmitTasks(IEnumerable<byte[]> payloads, int maxRetries = 5, TaskOptions? taskOptions = null) Parameters payloads IEnumerable<byte[]> The user payload list to execute. General used for subTasking. maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns IEnumerable<string> SubmitTasksAsync(IEnumerable<byte[]>, int, TaskOptions?, CancellationToken) User method to submit task from the client Need a client Service. In case of ServiceContainer channel can be null until the OpenSession is called [PublicAPI] public IAsyncEnumerable<string> SubmitTasksAsync(IEnumerable<byte[]> payloads, int maxRetries = 5, TaskOptions? taskOptions = null, CancellationToken cancellationToken = default) Parameters payloads IEnumerable<byte[]> The user payload list to execute. General used for subTasking. maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker cancellationToken CancellationToken Returns IAsyncEnumerable<string> ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/ArmoniK.DevelopmentKit.Client.Symphony.SessionStorage.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Symphony.SessionStorage.html",
    "title": "Class SessionStorage",
    "summary": "Class SessionStorage Namespace ArmoniK.DevelopmentKit.Client.Symphony Assembly ArmoniK.DevelopmentKit.Client.Symphony.dll public class SessionStorage Inheritance object SessionStorage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AttachTaskToSession(string, string) public void AttachTaskToSession(string session, string taskId) Parameters session string taskId string GetInstance() public SessionStorage GetInstance() Returns SessionStorage GetSessionFromTaskId(string) public string GetSessionFromTaskId(string taskId) Parameters taskId string Returns string Exceptions WorkerApiException GetTaskIdsFromSession(string) public IEnumerable<string> GetTaskIdsFromSession(string session) Parameters session string Returns IEnumerable<string> Exceptions WorkerApiException"
  },
  "api/ArmoniK.DevelopmentKit.Client.Symphony.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Symphony.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Client.Symphony",
    "summary": "Namespace ArmoniK.DevelopmentKit.Client.Symphony Classes ArmonikSymphonyClient The main object to communicate with the control Plane from the client side The class will connect to the control plane to createSession, SubmitTask, Wait for result and get the result. See an example in the project ArmoniK.Samples in the sub project https://github.com/aneoconsulting/ArmoniK.Samples/tree/main/Samples/SymphonyLike Samples.ArmoniK.Sample.SymphonyClient SessionService The class SessionService will be create each time the function CreateSession or OpenSession will be called by client or by the worker. SessionStorage"
  },
  "api/ArmoniK.DevelopmentKit.Client.Unified.Exceptions.GridClientException.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Unified.Exceptions.GridClientException.html",
    "title": "Class GridClientException",
    "summary": "Class GridClientException Namespace ArmoniK.DevelopmentKit.Client.Unified.Exceptions Assembly ArmoniK.DevelopmentKit.Client.Unified.dll The exception class for Client side reporting Grid Error public class GridClientException : Exception, ISerializable Inheritance object Exception GridClientException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors GridClientException(string) The constructor in string message in parameters public GridClientException(string message) Parameters message string the message to include in the exception GridClientException(string, Exception) The constructor with Message and Exception public GridClientException(string message, Exception e) Parameters message string The string message in the new exception e Exception the inner exception"
  },
  "api/ArmoniK.DevelopmentKit.Client.Unified.Exceptions.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Unified.Exceptions.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Client.Unified.Exceptions",
    "summary": "Namespace ArmoniK.DevelopmentKit.Client.Unified.Exceptions Classes GridClientException The exception class for Client side reporting Grid Error"
  },
  "api/ArmoniK.DevelopmentKit.Client.Unified.Factory.ServiceFactory.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Unified.Factory.ServiceFactory.html",
    "title": "Class ServiceFactory",
    "summary": "Class ServiceFactory Namespace ArmoniK.DevelopmentKit.Client.Unified.Factory Assembly ArmoniK.DevelopmentKit.Client.Unified.dll The service Factory to load service previously registered public class ServiceFactory Inheritance object ServiceFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateService(Properties, ILoggerFactory?) The method to create new Service public static ISubmitterService CreateService(Properties props, ILoggerFactory? loggerFactory = null) Parameters props Properties Properties for the service containing IConfiguration and TaskOptions loggerFactory ILoggerFactory Logger factory to create loggers for service Returns ISubmitterService returns the new instantiated service GetServiceAdmin(Properties, ILoggerFactory?) Method to get the ServiceAdmin public static ServiceAdmin GetServiceAdmin(Properties props, ILoggerFactory? loggerFactory = null) Parameters props Properties loggerFactory ILoggerFactory Logger factory to create loggers for service Returns ServiceAdmin"
  },
  "api/ArmoniK.DevelopmentKit.Client.Unified.Factory.SessionServiceFactory.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Unified.Factory.SessionServiceFactory.html",
    "title": "Class SessionServiceFactory",
    "summary": "Class SessionServiceFactory Namespace ArmoniK.DevelopmentKit.Client.Unified.Factory Assembly ArmoniK.DevelopmentKit.Client.Unified.dll The main object to communicate with the control Plane from the client side The class will connect to the control plane to createSession, SubmitTask, Wait for result and get the result. See an example in the project ArmoniK.Samples in the sub project https://github.com/aneoconsulting/ArmoniK.Samples/tree/main/Samples/UnifiedAPI Samples.ArmoniK.Sample.UnifiedAPI.Client public class SessionServiceFactory Inheritance object SessionServiceFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SessionServiceFactory(ILoggerFactory?) The ctor with IConfiguration and optional TaskOptions public SessionServiceFactory(ILoggerFactory? loggerFactory = null) Parameters loggerFactory ILoggerFactory The factory to create the logger for clientService Methods CreateSession(Properties) Create the session to submit task public SessionService CreateSession(Properties properties) Parameters properties Properties All settings to create the session Returns SessionService GetAdminMonitoringService(Properties) Return a connection interface with the control plane to manage and monitor the Armonik grid public AdminMonitoringService GetAdminMonitoringService(Properties properties) Parameters properties Properties The properties containing all information for connection Returns AdminMonitoringService returns the services of Administration and Monitoring InitDefaultSessionOptions() This method is creating a default taskOptions initialization where MaxDuration is 40 seconds, MaxRetries = 2 The app name is ArmoniK.DevelopmentKit.Unified The version is 1.0.0 the namespace ArmoniK.DevelopmentKit.Unified and simple service FallBackServerAdder public static TaskOptions InitDefaultSessionOptions() Returns TaskOptions Return the default taskOptions OpenSession(Properties, string, TaskOptions?) Set connection to an already opened Session public SessionService OpenSession(Properties properties, string sessionId, TaskOptions? clientOptions = null) Parameters properties Properties The properties setting for the session sessionId string SessionId previously opened clientOptions TaskOptions Returns SessionService"
  },
  "api/ArmoniK.DevelopmentKit.Client.Unified.Factory.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Unified.Factory.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Client.Unified.Factory",
    "summary": "Namespace ArmoniK.DevelopmentKit.Client.Unified.Factory Classes ServiceFactory The service Factory to load service previously registered SessionServiceFactory The main object to communicate with the control Plane from the client side The class will connect to the control plane to createSession, SubmitTask, Wait for result and get the result. See an example in the project ArmoniK.Samples in the sub project https://github.com/aneoconsulting/ArmoniK.Samples/tree/main/Samples/UnifiedAPI Samples.ArmoniK.Sample.UnifiedAPI.Client"
  },
  "api/ArmoniK.DevelopmentKit.Client.Unified.Services.Admin.AdminMonitoringService.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Unified.Services.Admin.AdminMonitoringService.html",
    "title": "Class AdminMonitoringService",
    "summary": "Class AdminMonitoringService Namespace ArmoniK.DevelopmentKit.Client.Unified.Services.Admin Assembly ArmoniK.DevelopmentKit.Client.Unified.dll The Administration and monitoring class to get or manage information on grid server public class AdminMonitoringService Inheritance object AdminMonitoringService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AdminMonitoringService(ObjectPool<GrpcChannel>, ILoggerFactory?) The constructor to instantiate this service public AdminMonitoringService(ObjectPool<GrpcChannel> channelPool, ILoggerFactory? loggerFactory = null) Parameters channelPool ObjectPool<GrpcChannel> loggerFactory ILoggerFactory The factory logger to create logger Methods CancelSession(string) This method can mark the session in status Cancelled and mark all tasks in cancel status [PublicAPI] public void CancelSession(string sessionId) Parameters sessionId string the sessionId of the session to cancel CancelSessionAsync(string, CancellationToken) This method can mark the session in status Cancelled and mark all tasks in cancel status [PublicAPI] public ValueTask CancelSessionAsync(string sessionId, CancellationToken cancellationToken = default) Parameters sessionId string the sessionId of the session to cancel cancellationToken CancellationToken Returns ValueTask CancelTasksBySession(IEnumerable<string>) Cancel a list of task in a session [PublicAPI] public void CancelTasksBySession(IEnumerable<string> taskIds) Parameters taskIds IEnumerable<string> the taskIds list to cancel CancelTasksBySessionAsync(IEnumerable<string>, CancellationToken) Cancel a list of task in a session [PublicAPI] public ValueTask CancelTasksBySessionAsync(IEnumerable<string> taskIds, CancellationToken cancellationToken = default) Parameters taskIds IEnumerable<string> the taskIds list to cancel cancellationToken CancellationToken Returns ValueTask CountAllTasksBySession(string) The method is to get the number of all task in a session public int CountAllTasksBySession(string sessionId) Parameters sessionId string Returns int return the number of task CountCancelTasksBySession(string) The method is to get the number of error tasks in the session [Obsolete] public int CountCancelTasksBySession(string sessionId) Parameters sessionId string Returns int return the number of task CountCompletedTasksBySession(string) The method is to get the number of error tasks in the session [Obsolete] public int CountCompletedTasksBySession(string sessionId) Parameters sessionId string Returns int return the number of task CountErrorTasksBySession(string) The method is to get the number of error tasks in the session public int CountErrorTasksBySession(string sessionId) Parameters sessionId string Returns int return the number of task CountRunningTasksBySession(string) The method is to get the number of running tasks in the session public int CountRunningTasksBySession(string sessionId) Parameters sessionId string Returns int return the number of task CountTaskBySession(string, params TaskStatus[]) Count task in a session and select by status [PublicAPI] public int CountTaskBySession(string sessionId, params TaskStatus[] taskStatus) Parameters sessionId string the id of the session taskStatus TaskStatus[] a variadic list of taskStatus Returns int return the number of task GetServiceConfiguration() Returns the service configuration public void GetServiceConfiguration() GetTaskStatus(IEnumerable<string>) The method to get status of a list of tasks [PublicAPI] public IEnumerable<Tuple<string, TaskStatus>> GetTaskStatus(IEnumerable<string> taskIds) Parameters taskIds IEnumerable<string> The list of task Returns IEnumerable<Tuple<string, TaskStatus>> returns a list of pair TaskId/TaskStatus GetTaskStatusAsync(IEnumerable<string>, CancellationToken) The method to get status of a list of tasks [PublicAPI] public IAsyncEnumerable<Tuple<string, TaskStatus>> GetTaskStatusAsync(IEnumerable<string> taskIds, CancellationToken cancellationToken = default) Parameters taskIds IEnumerable<string> The list of task cancellationToken CancellationToken Returns IAsyncEnumerable<Tuple<string, TaskStatus>> returns a list of pair TaskId/TaskStatus ListAllSessions() Return the list of all sessions [PublicAPI] public IEnumerable<string> ListAllSessions() Returns IEnumerable<string> The list of filtered session ListAllSessionsAsync(CancellationToken) Return the list of all sessions [PublicAPI] public IAsyncEnumerable<string> ListAllSessionsAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns IAsyncEnumerable<string> The list of filtered session ListAllTasksBySession(string) Return the whole list of task of a session public IEnumerable<string> ListAllTasksBySession(string sessionId) Parameters sessionId string Returns IEnumerable<string> The list of filtered task ListCancelledSessions() The method is to get a filtered list of running session [PublicAPI] public IEnumerable<string> ListCancelledSessions() Returns IEnumerable<string> returns a list of session filtered ListCancelledSessionsAsync(CancellationToken) The method is to get a filtered list of running session [PublicAPI] public IAsyncEnumerable<string> ListCancelledSessionsAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns IAsyncEnumerable<string> returns a list of session filtered ListCancelledTasks(string) Return the list of canceled tasks of a session [Obsolete] public IEnumerable<string> ListCancelledTasks(string sessionId) Parameters sessionId string Returns IEnumerable<string> The list of filtered task ListErrorTasks(string) Return the list of error tasks of a session [Obsolete] public IEnumerable<string> ListErrorTasks(string sessionId) Parameters sessionId string Returns IEnumerable<string> The list of filtered task ListRunningSessions() The method is to get a filtered list of running session [PublicAPI] public IEnumerable<string> ListRunningSessions() Returns IEnumerable<string> returns a list of session filtered ListRunningSessionsAsync(CancellationToken) The method is to get a filtered list of running session [PublicAPI] public IAsyncEnumerable<string> ListRunningSessionsAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns IAsyncEnumerable<string> returns a list of session filtered ListRunningTasks(string) Return the list of running tasks of a session [Obsolete] public IEnumerable<string> ListRunningTasks(string sessionId) Parameters sessionId string Returns IEnumerable<string> The list of filtered task ListTasksBySession(string, params TaskStatus[]) Return the list of task of a session filtered by status [PublicAPI] public IEnumerable<string> ListTasksBySession(string sessionId, params TaskStatus[] taskStatus) Parameters sessionId string taskStatus TaskStatus[] Returns IEnumerable<string> The list of filtered task ListTasksBySessionAsync(string, CancellationToken, params TaskStatus[]) Return the list of task of a session filtered by status [PublicAPI] public IAsyncEnumerable<string> ListTasksBySessionAsync(string sessionId, CancellationToken cancellationToken = default, params TaskStatus[] taskStatus) Parameters sessionId string cancellationToken CancellationToken taskStatus TaskStatus[] Returns IAsyncEnumerable<string> The list of filtered task"
  },
  "api/ArmoniK.DevelopmentKit.Client.Unified.Services.Admin.ServiceAdmin.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Unified.Services.Admin.ServiceAdmin.html",
    "title": "Class ServiceAdmin",
    "summary": "Class ServiceAdmin Namespace ArmoniK.DevelopmentKit.Client.Unified.Services.Admin Assembly ArmoniK.DevelopmentKit.Client.Unified.dll The class to access to all Admin and monitoring API public class ServiceAdmin : AbstractClientService, IDisposable Inheritance object AbstractClientService ServiceAdmin Implements IDisposable Inherited Members AbstractClientService.CurrentlyHandledTaskIds AbstractClientService.ResultHandlerDictionary AbstractClientService.LoggerFactory object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ServiceAdmin(Properties, ILoggerFactory) The constructor of the service Admin class public ServiceAdmin(Properties properties, ILoggerFactory loggerFactory) Parameters properties Properties the properties setting to connection to the control plane loggerFactory ILoggerFactory Properties AdminMonitoringService the Properties that access to the control plane public AdminMonitoringService AdminMonitoringService { get; set; } Property Value AdminMonitoringService Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose()"
  },
  "api/ArmoniK.DevelopmentKit.Client.Unified.Services.Admin.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Unified.Services.Admin.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Client.Unified.Services.Admin",
    "summary": "Namespace ArmoniK.DevelopmentKit.Client.Unified.Services.Admin Classes AdminMonitoringService The Administration and monitoring class to get or manage information on grid server ServiceAdmin The class to access to all Admin and monitoring API"
  },
  "api/ArmoniK.DevelopmentKit.Client.Unified.Services.Common.AbstractClientService.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Unified.Services.Common.AbstractClientService.html",
    "title": "Class AbstractClientService",
    "summary": "Class AbstractClientService Namespace ArmoniK.DevelopmentKit.Client.Unified.Services.Common Assembly ArmoniK.DevelopmentKit.Client.Unified.dll The abstract for client service creation public abstract class AbstractClientService : IDisposable Inheritance object AbstractClientService Implements IDisposable Derived ServiceAdmin Service Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AbstractClientService(ILoggerFactory?) The default constructor with properties information protected AbstractClientService(ILoggerFactory? loggerFactory = null) Parameters loggerFactory ILoggerFactory Properties CurrentlyHandledTaskIds Instant view of currently handled task ids. The list is only valid at the time of access. The actual list may differ due to background processes. public IReadOnlyCollection<string> CurrentlyHandledTaskIds { get; } Property Value IReadOnlyCollection<string> LoggerFactory The properties to get LoggerFactory or to override it protected ILoggerFactory LoggerFactory { get; } Property Value ILoggerFactory ResultHandlerDictionary The result dictionary to return result protected ConcurrentDictionary<string, IServiceInvocationHandler> ResultHandlerDictionary { get; } Property Value ConcurrentDictionary<string, IServiceInvocationHandler> Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public abstract void Dispose()"
  },
  "api/ArmoniK.DevelopmentKit.Client.Unified.Services.Common.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Unified.Services.Common.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Client.Unified.Services.Common",
    "summary": "Namespace ArmoniK.DevelopmentKit.Client.Unified.Services.Common Classes AbstractClientService The abstract for client service creation"
  },
  "api/ArmoniK.DevelopmentKit.Client.Unified.Services.SessionService.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Unified.Services.SessionService.html",
    "title": "Class SessionService",
    "summary": "Class SessionService Namespace ArmoniK.DevelopmentKit.Client.Unified.Services Assembly ArmoniK.DevelopmentKit.Client.Unified.dll The class SessionService will be create each time the function CreateSession or OpenSession will be called by client or by the worker. public class SessionService : BaseClientSubmitter<SessionService> Inheritance object BaseClientSubmitter<SessionService> SessionService Inherited Members BaseClientSubmitter<SessionService>.TaskOptions BaseClientSubmitter<SessionService>.SessionId BaseClientSubmitter<SessionService>.ChannelPool BaseClientSubmitter<SessionService>.Logger BaseClientSubmitter<SessionService>.GetTaskStatusAsync(string, CancellationToken) BaseClientSubmitter<SessionService>.GetTaskStatus(string) BaseClientSubmitter<SessionService>.GetTaskStatuesAsync(CancellationToken, params string[]) BaseClientSubmitter<SessionService>.GetTaskStatues(params string[]) BaseClientSubmitter<SessionService>.GetTaskOutputInfoAsync(string, CancellationToken) BaseClientSubmitter<SessionService>.GetTaskOutputInfo(string) BaseClientSubmitter<SessionService>.SubmitTasksWithDependenciesAsync(IEnumerable<Tuple<string, byte[], IList<string>>>, int, TaskOptions, CancellationToken) BaseClientSubmitter<SessionService>.SubmitTasksWithDependencies(IEnumerable<Tuple<string, byte[], IList<string>>>, int, TaskOptions) BaseClientSubmitter<SessionService>.SubmitTasksWithDependenciesAsync(IEnumerable<Tuple<byte[], IList<string>>>, int, TaskOptions, CancellationToken) BaseClientSubmitter<SessionService>.SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, int, TaskOptions) BaseClientSubmitter<SessionService>.ChunkSubmitTasksWithDependenciesAsync(IEnumerable<(string, byte[], IList<string>, TaskOptions)>, int, TaskOptions, CancellationToken) BaseClientSubmitter<SessionService>.WaitForTaskCompletionAsync(string, int, int, CancellationToken) BaseClientSubmitter<SessionService>.WaitForTaskCompletion(string, int, int) BaseClientSubmitter<SessionService>.WaitForTasksCompletionAsync(IEnumerable<string>, int, int, CancellationToken) BaseClientSubmitter<SessionService>.WaitForTasksCompletion(IEnumerable<string>, int, int) BaseClientSubmitter<SessionService>.GetResultStatusAsync(IEnumerable<string>, CancellationToken) BaseClientSubmitter<SessionService>.GetResultStatus(IEnumerable<string>, CancellationToken) BaseClientSubmitter<SessionService>.GetResultIdsAsync(IEnumerable<string>, CancellationToken) BaseClientSubmitter<SessionService>.GetResultIds(IEnumerable<string>) BaseClientSubmitter<SessionService>.GetResultAsync(string, CancellationToken) BaseClientSubmitter<SessionService>.GetResult(string, CancellationToken) BaseClientSubmitter<SessionService>.GetResultsAsync(IEnumerable<string>, CancellationToken) BaseClientSubmitter<SessionService>.GetResults(IEnumerable<string>, CancellationToken) BaseClientSubmitter<SessionService>.TryGetResultAsync(ResultRequest, CancellationToken) BaseClientSubmitter<SessionService>.TryGetResultAsync(string, bool, CancellationToken) BaseClientSubmitter<SessionService>.TryGetResult(string, bool, CancellationToken) BaseClientSubmitter<SessionService>.TryGetResultAsync(string, CancellationToken) BaseClientSubmitter<SessionService>.TryGetResult(string, CancellationToken) BaseClientSubmitter<SessionService>.TryGetResultsAsync(IList<string>, CancellationToken) BaseClientSubmitter<SessionService>.TryGetResults(IList<string>) BaseClientSubmitter<SessionService>.CreateResultsMetadataAsync(IEnumerable<string>, CancellationToken) BaseClientSubmitter<SessionService>.CreateResultsMetadata(IEnumerable<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SessionService(Properties, ILoggerFactory, TaskOptions?, Session?) Ctor to instantiate a new SessionService This is an object to send task or get Results from a session public SessionService(Properties properties, ILoggerFactory loggerFactory, TaskOptions? taskOptions = null, Session? session = null) Parameters properties Properties loggerFactory ILoggerFactory taskOptions TaskOptions session Session Methods InitializeDefaultTaskOptions() Supply a default TaskOptions public static TaskOptions InitializeDefaultTaskOptions() Returns TaskOptions A default TaskOptions object SubmitTask(byte[], int, int, TaskOptions?) User method to submit task from the client [PublicAPI] public string SubmitTask(byte[] payload, int waitTimeBeforeNextSubmit = 2, int maxRetries = 5, TaskOptions? taskOptions = null) Parameters payload byte[] The user payload to execute. waitTimeBeforeNextSubmit int The time to wait before 2 single submitTask maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns string SubmitTaskAsync(byte[], int, int, TaskOptions?, CancellationToken) User method to submit task from the client [PublicAPI] public ValueTask<string> SubmitTaskAsync(byte[] payload, int waitTimeBeforeNextSubmit = 2, int maxRetries = 5, TaskOptions? taskOptions = null, CancellationToken cancellationToken = default) Parameters payload byte[] The user payload to execute. waitTimeBeforeNextSubmit int The time to wait before 2 single submitTask maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker cancellationToken CancellationToken Returns ValueTask<string> SubmitTaskWithDependencies(byte[], IList<string>, int, TaskOptions?) The method to submit One task with dependencies tasks. This task will wait for to start until all dependencies are completed successfully [PublicAPI] public string SubmitTaskWithDependencies(byte[] payload, IList<string> dependencies, int maxRetries = 5, TaskOptions? taskOptions = null) Parameters payload byte[] The payload to submit dependencies IList<string> A list of task Id in dependence of this created task maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns string return the taskId of the created task SubmitTaskWithDependenciesAsync(byte[], IList<string>, int, TaskOptions?, CancellationToken) The method to submit One task with dependencies tasks. This task will wait for to start until all dependencies are completed successfully [PublicAPI] public ValueTask<string> SubmitTaskWithDependenciesAsync(byte[] payload, IList<string> dependencies, int maxRetries = 5, TaskOptions? taskOptions = null, CancellationToken cancellationToken = default) Parameters payload byte[] The payload to submit dependencies IList<string> A list of task Id in dependence of this created task maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker cancellationToken CancellationToken Returns ValueTask<string> return the taskId of the created task SubmitTasks(IEnumerable<byte[]>, int, TaskOptions?) User method to submit task from the client Need a client Service. In case of ServiceContainer submitterService can be null until the OpenSession is called [PublicAPI] public IEnumerable<string> SubmitTasks(IEnumerable<byte[]> payloads, int maxRetries = 5, TaskOptions? taskOptions = null) Parameters payloads IEnumerable<byte[]> The user payload list to execute. General used for subTasking. maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns IEnumerable<string> SubmitTasksAsync(IEnumerable<byte[]>, int, TaskOptions?, CancellationToken) User method to submit task from the client Need a client Service. In case of ServiceContainer submitterService can be null until the OpenSession is called [PublicAPI] public IAsyncEnumerable<string> SubmitTasksAsync(IEnumerable<byte[]> payloads, int maxRetries = 5, TaskOptions? taskOptions = null, CancellationToken cancellationToken = default) Parameters payloads IEnumerable<byte[]> The user payload list to execute. General used for subTasking. maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker cancellationToken CancellationToken Returns IAsyncEnumerable<string> ToString() public override string ToString() Returns string"
  },
  "api/ArmoniK.DevelopmentKit.Client.Unified.Services.Submitter.Service.ServiceResult.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Unified.Services.Submitter.Service.ServiceResult.html",
    "title": "Class Service.ServiceResult",
    "summary": "Class Service.ServiceResult Namespace ArmoniK.DevelopmentKit.Client.Unified.Services.Submitter Assembly ArmoniK.DevelopmentKit.Client.Unified.dll Class to return TaskId and the result public class Service.ServiceResult Inheritance object Service.ServiceResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ServiceResult(string, object?) Constructor public ServiceResult(string taskId, object? result) Parameters taskId string result object Properties Result The getter to return the result in object type format public object? Result { get; } Property Value object TaskId The getter to return the taskId public string TaskId { get; } Property Value string"
  },
  "api/ArmoniK.DevelopmentKit.Client.Unified.Services.Submitter.Service.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Unified.Services.Submitter.Service.html",
    "title": "Class Service",
    "summary": "Class Service Namespace ArmoniK.DevelopmentKit.Client.Unified.Services.Submitter Assembly ArmoniK.DevelopmentKit.Client.Unified.dll This class is instantiated by ServiceFactory and allows to execute task on ArmoniK Grid. public class Service : AbstractClientService, ISubmitterService, IDisposable Inheritance object AbstractClientService Service Implements ISubmitterService IDisposable Inherited Members AbstractClientService.CurrentlyHandledTaskIds AbstractClientService.ResultHandlerDictionary AbstractClientService.LoggerFactory object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods SubmitterServiceExt.Submit(ISubmitterService, string, byte[], IServiceInvocationHandler, int, TaskOptions?) SubmitterServiceExt.Submit(ISubmitterService, string, object[], IServiceInvocationHandler, int, TaskOptions?) Constructors Service(Properties, ILoggerFactory?) The default constructor to open connection with the control plane and create the session to ArmoniK public Service(Properties properties, ILoggerFactory? loggerFactory = null) Parameters properties Properties The properties containing TaskOptions and information to communicate with Control plane and loggerFactory ILoggerFactory Properties SessionId The sessionId public string SessionId { get; } Property Value string SessionService Property Get the SessionId [PublicAPI] public SessionService SessionService { get; } Property Value SessionService Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() Execute(string, byte[], int, TaskOptions?) This method is used to execute task and waiting after the result. the method will return the result of the execution until the grid returns the task result public Service.ServiceResult Execute(string methodName, byte[] dataArg, int maxRetries = 5, TaskOptions? taskOptions = null) Parameters methodName string The string name of the method dataArg byte[] the array of byte to pass as argument for the methodName(byte[] dataArg) maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns Service.ServiceResult Returns a tuple with the taskId string and an object as result of the method call Execute(string, object[], int, TaskOptions?) This method is used to execute task and waiting after the result. the method will return the result of the execution until the grid returns the task result public Service.ServiceResult Execute(string methodName, object[] arguments, int maxRetries = 5, TaskOptions? taskOptions = null) Parameters methodName string The string name of the method arguments object[] the array of object to pass as arguments for the method maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns Service.ServiceResult Returns a tuple with the taskId string and an object as result of the method call GetChannelPool() Get a new channel to communicate with the control plane public ObjectPool<GrpcChannel> GetChannelPool() Returns ObjectPool<GrpcChannel> gRPC channel LocalExecute(object, string, object[]) This function execute code locally with the same configuration as Armonik Grid execution The method needs the Service to execute, the method name to call and arguments of method to pass public Service.ServiceResult LocalExecute(object service, string methodName, object[] arguments) Parameters service object The instance of object containing the method to call methodName string The string name of the method arguments object[] the array of object to pass as arguments for the method Returns Service.ServiceResult Returns an object as result of the method call Exceptions WorkerApiException Submit(string, IEnumerable<byte[]>, IServiceInvocationHandler, int, TaskOptions?) The method submits a list of task with a list of arguments for each task which will be serialized into a byte[] for each call MethodName(byte[] argument) public IEnumerable<string> Submit(string methodName, IEnumerable<byte[]> arguments, IServiceInvocationHandler handler, int maxRetries = 5, TaskOptions? taskOptions = null) Parameters methodName string The name of the method inside the service arguments IEnumerable<byte[]> List of serialized arguments that will already serialize for MethodName. handler IServiceInvocationHandler The handler callBack implemented as IServiceInvocationHandler to get response or result or error maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns IEnumerable<string> Return the list of created taskIds Submit(string, IEnumerable<object[]>, IServiceInvocationHandler, int, TaskOptions?) The method submits a list of task with a list of arguments for each task which will be serialized into a byte[] for each call MethodName(byte[] argument) public IEnumerable<string> Submit(string methodName, IEnumerable<object[]> arguments, IServiceInvocationHandler handler, int maxRetries = 5, TaskOptions? taskOptions = null) Parameters methodName string The name of the method inside the service arguments IEnumerable<object[]> A list of parameters that can be passed in parameters of the each call of function handler IServiceInvocationHandler The handler callBack implemented as IServiceInvocationHandler to get response or result or error maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns IEnumerable<string> Return the list of created taskIds SubmitAsync(string, byte[], IServiceInvocationHandler, int, TaskOptions?, CancellationToken) The method submit with one serialized argument that will send as byte[] MethodName(byte[] argument). public Task<string> SubmitAsync(string methodName, byte[] argument, IServiceInvocationHandler handler, int maxRetries = 5, TaskOptions? taskOptions = null, CancellationToken token = default) Parameters methodName string The name of the method inside the service argument byte[] One serialized argument that will already serialize for MethodName. handler IServiceInvocationHandler The handler callBack implemented as IServiceInvocationHandler to get response or result or error maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker token CancellationToken The cancellation token to set to cancel the async task Returns Task<string> Return the taskId string SubmitAsync(string, object[], IServiceInvocationHandler, int, TaskOptions?, CancellationToken) The method submit with one serialized argument that will send as byte[] MethodName(byte[] argument). public Task<string> SubmitAsync(string methodName, object[] argument, IServiceInvocationHandler handler, int maxRetries = 5, TaskOptions? taskOptions = null, CancellationToken token = default) Parameters methodName string The name of the method inside the service argument object[] One serialized argument that will already serialize for MethodName. handler IServiceInvocationHandler The handler callBack implemented as IServiceInvocationHandler to get response or result or error maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker token CancellationToken The cancellation token to set to cancel the async task Returns Task<string> Return the taskId string"
  },
  "api/ArmoniK.DevelopmentKit.Client.Unified.Services.Submitter.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Unified.Services.Submitter.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Client.Unified.Services.Submitter",
    "summary": "Namespace ArmoniK.DevelopmentKit.Client.Unified.Services.Submitter Classes Service This class is instantiated by ServiceFactory and allows to execute task on ArmoniK Grid. Service.ServiceResult Class to return TaskId and the result"
  },
  "api/ArmoniK.DevelopmentKit.Client.Unified.Services.html": {
    "href": "api/ArmoniK.DevelopmentKit.Client.Unified.Services.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Client.Unified.Services",
    "summary": "Namespace ArmoniK.DevelopmentKit.Client.Unified.Services Classes SessionService The class SessionService will be create each time the function CreateSession or OpenSession will be called by client or by the worker."
  },
  "api/ArmoniK.DevelopmentKit.Common.AppsOptions.html": {
    "href": "api/ArmoniK.DevelopmentKit.Common.AppsOptions.html",
    "title": "Class AppsOptions",
    "summary": "Class AppsOptions Namespace ArmoniK.DevelopmentKit.Common Assembly ArmoniK.DevelopmentKit.Common.dll public static class AppsOptions Inheritance object AppsOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields GridAppVolumesKey public const string GridAppVolumesKey = \"target_app_path\" Field Value string GridAssemblyPathKey public const string GridAssemblyPathKey = \"ServiceAssemblyPath\" Field Value string GridDataVolumesKey public const string GridDataVolumesKey = \"target_data_path\" Field Value string GridVolumesKey public const string GridVolumesKey = \"gridVolumes\" Field Value string GridZipVolumePath public const string GridZipVolumePath = \"target_zip_path\" Field Value string"
  },
  "api/ArmoniK.DevelopmentKit.Common.ArmonikPayload.html": {
    "href": "api/ArmoniK.DevelopmentKit.Common.ArmonikPayload.html",
    "title": "Class ArmonikPayload",
    "summary": "Class ArmonikPayload Namespace ArmoniK.DevelopmentKit.Common Assembly ArmoniK.DevelopmentKit.Common.dll A class used to define the computation required from the worker [ProtoContract(SkipConstructor = true)] public record ArmonikPayload : IEquatable<ArmonikPayload> Inheritance object ArmonikPayload Implements IEquatable<ArmonikPayload> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ArmonikPayload(string, byte[], bool) A class used to define the computation required from the worker public ArmonikPayload(string MethodName, byte[] ClientPayload, bool SerializedArguments) Parameters MethodName string The name of the method to execute ClientPayload byte[] The arguments for the method SerializedArguments bool Defines whether the payload should be transmitted as is to the worker method. Properties ClientPayload The arguments for the method [ProtoMember(2)] public byte[] ClientPayload { get; init; } Property Value byte[] MethodName The name of the method to execute [ProtoMember(1)] public string MethodName { get; init; } Property Value string SerializedArguments Defines whether the payload should be transmitted as is to the worker method. [ProtoMember(3)] public bool SerializedArguments { get; init; } Property Value bool Methods Deserialize(byte[]) public static ArmonikPayload Deserialize(byte[] payload) Parameters payload byte[] Returns ArmonikPayload Serialize() public byte[] Serialize() Returns byte[]"
  },
  "api/ArmoniK.DevelopmentKit.Common.EngineType.html": {
    "href": "api/ArmoniK.DevelopmentKit.Common.EngineType.html",
    "title": "Enum EngineType",
    "summary": "Enum EngineType Namespace ArmoniK.DevelopmentKit.Common Assembly ArmoniK.DevelopmentKit.Common.dll Engine type to set in TaskOption to select API to use during the execution on worker public enum EngineType Extension Methods EnumExt.GetName(Enum) Fields Symphony = 0 Unified = 1"
  },
  "api/ArmoniK.DevelopmentKit.Common.EngineTypeHelper.html": {
    "href": "api/ArmoniK.DevelopmentKit.Common.EngineTypeHelper.html",
    "title": "Class EngineTypeHelper",
    "summary": "Class EngineTypeHelper Namespace ArmoniK.DevelopmentKit.Common Assembly ArmoniK.DevelopmentKit.Common.dll Convert helper from Enum to class and reverse public static class EngineTypeHelper Inheritance object EngineTypeHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToEnum(string) The method to convert string enum name to obejct enum public static EngineType ToEnum(string enumName) Parameters enumName string Returns EngineType Exceptions KeyNotFoundException"
  },
  "api/ArmoniK.DevelopmentKit.Common.EngineTypes.html": {
    "href": "api/ArmoniK.DevelopmentKit.Common.EngineTypes.html",
    "title": "Class EngineTypes",
    "summary": "Class EngineTypes Namespace ArmoniK.DevelopmentKit.Common Assembly ArmoniK.DevelopmentKit.Common.dll Map table to target API public class EngineTypes Inheritance object EngineTypes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties this[EngineType] Get the EngineType Assembly name for AppLoader public string this[EngineType key] { get; } Parameters key EngineType The Engine type Property Value string Exceptions KeyNotFoundException Exception the key doesn't exist"
  },
  "api/ArmoniK.DevelopmentKit.Common.Exceptions.ClientApiException.html": {
    "href": "api/ArmoniK.DevelopmentKit.Common.Exceptions.ClientApiException.html",
    "title": "Class ClientApiException",
    "summary": "Class ClientApiException Namespace ArmoniK.DevelopmentKit.Common.Exceptions Assembly ArmoniK.DevelopmentKit.Common.dll General Worker API Exception public class ClientApiException : Exception, ISerializable Inheritance object Exception ClientApiException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ClientApiException() The ctor of ClientApiException public ClientApiException() ClientApiException(Exception) The ctor to instantiate new thrown Exception with previous exception public ClientApiException(Exception e) Parameters e Exception The previous exception ClientApiException(string) Th ctor to instantiate new thrown Exception with message public ClientApiException(string message) Parameters message string The message that will be print in the exception ClientApiException(string, ArgumentException) The ctor with new message and the previous thrown exception public ClientApiException(string message, ArgumentException e) Parameters message string The new message that will override the one from the previous exception e ArgumentException The previous exception ClientApiException(string, Exception) The ctor with new message and the previous thrown exception public ClientApiException(string message, Exception e) Parameters message string The new message that will override the one from the previous exception e Exception The previous exception Properties Message Overriding the Message property public override string Message { get; } Property Value string"
  },
  "api/ArmoniK.DevelopmentKit.Common.Exceptions.ClientResultsException.html": {
    "href": "api/ArmoniK.DevelopmentKit.Common.Exceptions.ClientResultsException.html",
    "title": "Class ClientResultsException",
    "summary": "Class ClientResultsException Namespace ArmoniK.DevelopmentKit.Common.Exceptions Assembly ArmoniK.DevelopmentKit.Common.dll Bundle an exception with list of task in Error public class ClientResultsException : Exception, ISerializable Inheritance object Exception ClientResultsException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ClientResultsException(string, Exception, params string[]) The default constructor to refer the list of task in error public ClientResultsException(string message, Exception innerException, params string[] taskIds) Parameters message string the message in exception innerException Exception Exception that caused this one to be raised taskIds string[] The list of taskId ClientResultsException(string, params string[]) The default constructor to refer the list of task in error public ClientResultsException(string message, params string[] taskIds) Parameters message string the message in exception taskIds string[] The list of taskId ClientResultsException(params string[]) The default constructor to refer the list of task in error public ClientResultsException(params string[] taskIds) Parameters taskIds string[] The list of taskId Properties TaskIds The list of taskId in error public string[] TaskIds { get; } Property Value string[]"
  },
  "api/ArmoniK.DevelopmentKit.Common.Exceptions.WorkerApiException.html": {
    "href": "api/ArmoniK.DevelopmentKit.Common.Exceptions.WorkerApiException.html",
    "title": "Class WorkerApiException",
    "summary": "Class WorkerApiException Namespace ArmoniK.DevelopmentKit.Common.Exceptions Assembly ArmoniK.DevelopmentKit.Common.dll General Worker API Exception public class WorkerApiException : Exception, ISerializable Inheritance object Exception WorkerApiException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WorkerApiException() The ctor of WorkerApiException public WorkerApiException() WorkerApiException(Exception) The ctor to instantiate new thrown Exception with previous exception public WorkerApiException(Exception e) Parameters e Exception The previous exception WorkerApiException(string) Th ctor to instantiate new thrown Exception with message public WorkerApiException(string message) Parameters message string The message that will be print in the exception WorkerApiException(string, ArgumentException) The ctor with new message and the previous thrown exception public WorkerApiException(string message, ArgumentException e) Parameters message string The new message that will override the one from the previous exception e ArgumentException The previous exception WorkerApiException(string, Exception) The ctor with new message and the previous thrown exception public WorkerApiException(string message, Exception e) Parameters message string The new message that will override the one from the previous exception e Exception The previous exception Properties Message Overriding the Message property public override string Message { get; } Property Value string"
  },
  "api/ArmoniK.DevelopmentKit.Common.Exceptions.html": {
    "href": "api/ArmoniK.DevelopmentKit.Common.Exceptions.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Common.Exceptions",
    "summary": "Namespace ArmoniK.DevelopmentKit.Common.Exceptions Classes ClientApiException General Worker API Exception ClientResultsException Bundle an exception with list of task in Error WorkerApiException General Worker API Exception"
  },
  "api/ArmoniK.DevelopmentKit.Common.Extensions.EnumExt.html": {
    "href": "api/ArmoniK.DevelopmentKit.Common.Extensions.EnumExt.html",
    "title": "Class EnumExt",
    "summary": "Class EnumExt Namespace ArmoniK.DevelopmentKit.Common.Extensions Assembly ArmoniK.DevelopmentKit.Common.dll public static class EnumExt Inheritance object EnumExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetName(Enum) Returns name of type in a string format Method is here to align .NetStandard 2.0 and .Net Core 6.0 public static string GetName(this Enum value) Parameters value Enum the enum object instance to convert in string Returns string the type in a string format"
  },
  "api/ArmoniK.DevelopmentKit.Common.Extensions.IEnumerableExt.html": {
    "href": "api/ArmoniK.DevelopmentKit.Common.Extensions.IEnumerableExt.html",
    "title": "Class IEnumerableExt",
    "summary": "Class IEnumerableExt Namespace ArmoniK.DevelopmentKit.Common.Extensions Assembly ArmoniK.DevelopmentKit.Common.dll Convert IEnumerable byte to IEnumerable double public static class IEnumerableExt Inheritance object IEnumerableExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConvertToArray(IEnumerable<byte>) Convert IEnumerable byte to IEnumerable double public static IEnumerable<double> ConvertToArray(this IEnumerable<byte> arr) Parameters arr IEnumerable<byte> Returns IEnumerable<double>"
  },
  "api/ArmoniK.DevelopmentKit.Common.Extensions.html": {
    "href": "api/ArmoniK.DevelopmentKit.Common.Extensions.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Common.Extensions",
    "summary": "Namespace ArmoniK.DevelopmentKit.Common.Extensions Classes EnumExt IEnumerableExt Convert IEnumerable byte to IEnumerable double"
  },
  "api/ArmoniK.DevelopmentKit.Common.IFileAdapter.html": {
    "href": "api/ArmoniK.DevelopmentKit.Common.IFileAdapter.html",
    "title": "Interface IFileAdapter",
    "summary": "Interface IFileAdapter Namespace ArmoniK.DevelopmentKit.Common Assembly ArmoniK.DevelopmentKit.Common.dll The interface to download file public interface IFileAdapter Properties DestinationDirPath Get The directory where the file will be downloaded string DestinationDirPath { get; set; } Property Value string Methods DownloadFile(string) The method to download file from form remote server string DownloadFile(string fileName) Parameters fileName string The filename with extension and without directory path Returns string Returns the path where the file has been downloaded"
  },
  "api/ArmoniK.DevelopmentKit.Common.MarkDownDocAttribute.html": {
    "href": "api/ArmoniK.DevelopmentKit.Common.MarkDownDocAttribute.html",
    "title": "Class MarkDownDocAttribute",
    "summary": "Class MarkDownDocAttribute Namespace ArmoniK.DevelopmentKit.Common Assembly ArmoniK.DevelopmentKit.Common.dll The attribute to create the Markdown documentation on the class public class MarkDownDocAttribute : Attribute Inheritance object Attribute MarkDownDocAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ArmoniK.DevelopmentKit.Common.ProtoSerializer.Nullable.html": {
    "href": "api/ArmoniK.DevelopmentKit.Common.ProtoSerializer.Nullable.html",
    "title": "Class ProtoSerializer.Nullable",
    "summary": "Class ProtoSerializer.Nullable Namespace ArmoniK.DevelopmentKit.Common Assembly ArmoniK.DevelopmentKit.Common.dll [ProtoContract] public class ProtoSerializer.Nullable Inheritance object ProtoSerializer.Nullable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ArmoniK.DevelopmentKit.Common.ProtoSerializer.html": {
    "href": "api/ArmoniK.DevelopmentKit.Common.ProtoSerializer.html",
    "title": "Class ProtoSerializer",
    "summary": "Class ProtoSerializer Namespace ArmoniK.DevelopmentKit.Common Assembly ArmoniK.DevelopmentKit.Common.dll public static class ProtoSerializer Inheritance object ProtoSerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize<T>(byte[]) public static T? Deserialize<T>(byte[] dataPayloadInBytes) Parameters dataPayloadInBytes byte[] Returns T Type Parameters T RegisterClass(Type) public static void RegisterClass(Type type) Parameters type Type Serialize(object?) public static byte[] Serialize(object? value) Parameters value object Returns byte[]"
  },
  "api/ArmoniK.DevelopmentKit.Common.Retry.html": {
    "href": "api/ArmoniK.DevelopmentKit.Common.Retry.html",
    "title": "Class Retry",
    "summary": "Class Retry Namespace ArmoniK.DevelopmentKit.Common Assembly ArmoniK.DevelopmentKit.Common.dll A generic class to implement retry function public static class Retry Inheritance object Retry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UntilTrue(int, int, Func<bool>) Retry the specified action at most retries times until it returns true. public static bool UntilTrue(int retries, int delayMs, Func<bool> operation) Parameters retries int The number of times to retry the operation delayMs int The number of milliseconds to sleep after a failed invocation of the operation operation Func<bool> The operation to perform. Should return true Returns bool true if the action returned true on one of the retries, false if the number of retries was exhausted WhileException(int, int, Action<int>, bool, ILogger?, params Type[]) Retry the specified operation the specified number of times, until there are no more retries or it succeeded without an exception. public static void WhileException(int retries, int delayMs, Action<int> operation, bool allowDerivedExceptions = false, ILogger? logger = null, params Type[] exceptionType) Parameters retries int The number of times to retry the operation delayMs int The number of milliseconds to sleep after a failed invocation of the operation operation Action<int> the operation to perform allowDerivedExceptions bool If true, exceptions deriving from the specified exception type are ignored as well. Defaults to False logger ILogger Logger to log retried exception exceptionType Type[] if not null, ignore any exceptions of this type and subtypes WhileException(int, int, Action<int>, bool, params Type[]) Retry the specified operation the specified number of times, until there are no more retries or it succeeded without an exception. public static void WhileException(int retries, int delayMs, Action<int> operation, bool allowDerivedExceptions = false, params Type[] exceptionType) Parameters retries int The number of times to retry the operation delayMs int The number of milliseconds to sleep after a failed invocation of the operation operation Action<int> the operation to perform allowDerivedExceptions bool If true, exceptions deriving from the specified exception type are ignored as well. Defaults to False exceptionType Type[] if not null, ignore any exceptions of this type and subtypes WhileException(int, int, Func<int, ValueTask>, bool, ILogger?, CancellationToken, params Type[]) Retry the specified operation the specified number of times, until there are no more retries or it succeeded without an exception. public static ValueTask WhileException(int retries, int delayMs, Func<int, ValueTask> operation, bool allowDerivedExceptions = false, ILogger? logger = null, CancellationToken cancellationToken = default, params Type[] exceptionType) Parameters retries int The number of times to retry the operation delayMs int The number of milliseconds to sleep after a failed invocation of the operation operation Func<int, ValueTask> the operation to perform allowDerivedExceptions bool If true, exceptions deriving from the specified exception type are ignored as well. Defaults to False logger ILogger Logger to log retried exception cancellationToken CancellationToken exceptionType Type[] if not null, ignore any exceptions of this type and subtypes Returns ValueTask When one of the retries succeeds, return the value the operation returned. If not, an exception is thrown. WhileException(int, int, Func<int, ValueTask>, bool, CancellationToken, params Type[]) Retry the specified operation the specified number of times, until there are no more retries or it succeeded without an exception. public static ValueTask WhileException(int retries, int delayMs, Func<int, ValueTask> operation, bool allowDerivedExceptions = false, CancellationToken cancellationToken = default, params Type[] exceptionType) Parameters retries int The number of times to retry the operation delayMs int The number of milliseconds to sleep after a failed invocation of the operation operation Func<int, ValueTask> the operation to perform allowDerivedExceptions bool If true, exceptions deriving from the specified exception type are ignored as well. Defaults to False cancellationToken CancellationToken exceptionType Type[] if not null, ignore any exceptions of this type and subtypes Returns ValueTask When one of the retries succeeds, return the value the operation returned. If not, an exception is thrown. WhileException<T>(int, int, Func<int, ValueTask<T>>, bool, ILogger?, CancellationToken, params Type[]) Retry the specified operation the specified number of times, until there are no more retries or it succeeded without an exception. public static ValueTask<T> WhileException<T>(int retries, int delayMs, Func<int, ValueTask<T>> operation, bool allowDerivedExceptions = false, ILogger? logger = null, CancellationToken cancellationToken = default, params Type[] exceptionType) Parameters retries int The number of times to retry the operation delayMs int The number of milliseconds to sleep after a failed invocation of the operation operation Func<int, ValueTask<T>> the operation to perform allowDerivedExceptions bool If true, exceptions deriving from the specified exception type are ignored as well. Defaults to False logger ILogger Logger to log retried exception cancellationToken CancellationToken exceptionType Type[] if not null, ignore any exceptions of this type and subtypes Returns ValueTask<T> When one of the retries succeeds, return the value the operation returned. If not, an exception is thrown. Type Parameters T The return type of the exception WhileException<T>(int, int, Func<int, ValueTask<T>>, bool, CancellationToken, params Type[]) Retry the specified operation the specified number of times, until there are no more retries or it succeeded without an exception. public static ValueTask<T> WhileException<T>(int retries, int delayMs, Func<int, ValueTask<T>> operation, bool allowDerivedExceptions = false, CancellationToken cancellationToken = default, params Type[] exceptionType) Parameters retries int The number of times to retry the operation delayMs int The number of milliseconds to sleep after a failed invocation of the operation operation Func<int, ValueTask<T>> the operation to perform allowDerivedExceptions bool If true, exceptions deriving from the specified exception type are ignored as well. Defaults to False cancellationToken CancellationToken exceptionType Type[] if not null, ignore any exceptions of this type and subtypes Returns ValueTask<T> When one of the retries succeeds, return the value the operation returned. If not, an exception is thrown. Type Parameters T The return type of the exception WhileException<T>(int, int, Func<int, T>, bool, ILogger?, params Type[]) Retry the specified operation the specified number of times, until there are no more retries or it succeeded without an exception. public static T WhileException<T>(int retries, int delayMs, Func<int, T> operation, bool allowDerivedExceptions = false, ILogger? logger = null, params Type[] exceptionType) Parameters retries int The number of times to retry the operation delayMs int The number of milliseconds to sleep after a failed invocation of the operation operation Func<int, T> the operation to perform allowDerivedExceptions bool If true, exceptions deriving from the specified exception type are ignored as well. Defaults to False logger ILogger Logger to log retried exception exceptionType Type[] if not null, ignore any exceptions of this type and subtypes Returns T When one of the retries succeeds, return the value the operation returned. If not, an exception is thrown. Type Parameters T The return type of the exception WhileException<T>(int, int, Func<int, T>, bool, params Type[]) Retry the specified operation the specified number of times, until there are no more retries or it succeeded without an exception. public static T WhileException<T>(int retries, int delayMs, Func<int, T> operation, bool allowDerivedExceptions = false, params Type[] exceptionType) Parameters retries int The number of times to retry the operation delayMs int The number of milliseconds to sleep after a failed invocation of the operation operation Func<int, T> the operation to perform allowDerivedExceptions bool If true, exceptions deriving from the specified exception type are ignored as well. Defaults to False exceptionType Type[] if not null, ignore any exceptions of this type and subtypes Returns T When one of the retries succeeds, return the value the operation returned. If not, an exception is thrown. Type Parameters T The return type of the exception"
  },
  "api/ArmoniK.DevelopmentKit.Common.Tests.ProtoSerializerTest.html": {
    "href": "api/ArmoniK.DevelopmentKit.Common.Tests.ProtoSerializerTest.html",
    "title": "Class ProtoSerializerTest",
    "summary": "Class ProtoSerializerTest Namespace ArmoniK.DevelopmentKit.Common.Tests Assembly ArmoniK.DevelopmentKit.Common.Tests.dll public class ProtoSerializerTest Inheritance object ProtoSerializerTest Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods SerializeAndDeserializeArmonikPayload() [Test] public void SerializeAndDeserializeArmonikPayload() SerializeAndDeserializeArray() [Test] public void SerializeAndDeserializeArray() SerializeAndDeserializeArrayTypes<T>(T?) [Test] [TestCase(1)] [TestCase(1)] [TestCase(1)] [TestCase(1)] [TestCase(1)] [TestCase(1)] [TestCase(1)] [TestCase(1)] [TestCase(\"test\")] public void SerializeAndDeserializeArrayTypes<T>(T? message) Parameters message T Type Parameters T SerializeAndDeserializeArrayofArray() [Test] public void SerializeAndDeserializeArrayofArray() SerializeAndDeserializeMixedArray() [Test] public void SerializeAndDeserializeMixedArray() SerializeAndDeserialize<T>(T?) [Test] [TestCase(1)] [TestCase(1)] [TestCase(1)] [TestCase(1)] [TestCase(1)] [TestCase(1)] [TestCase(1)] [TestCase(1)] [TestCase(\"test\")] public void SerializeAndDeserialize<T>(T? message) Parameters message T Type Parameters T"
  },
  "api/ArmoniK.DevelopmentKit.Common.Tests.html": {
    "href": "api/ArmoniK.DevelopmentKit.Common.Tests.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Common.Tests",
    "summary": "Namespace ArmoniK.DevelopmentKit.Common.Tests Classes ProtoSerializerTest"
  },
  "api/ArmoniK.DevelopmentKit.Common.Utils.Either-2.html": {
    "href": "api/ArmoniK.DevelopmentKit.Common.Utils.Either-2.html",
    "title": "Class Either<L, R>",
    "summary": "Class Either<L, R> Namespace ArmoniK.DevelopmentKit.Common.Utils Assembly ArmoniK.DevelopmentKit.Common.dll Represents a simple Either type to manage an object of type L or an exception of type R. public class Either<L, R> Type Parameters L The object in the Either. R The exception in the Either. Inheritance object Either<L, R> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Either() Constructs an Either with no object or exception. public Either() Either(L) Constructs an Either with an object. public Either(L obj) Parameters obj L The object to be stored in the Either. Either(R) Constructs an Either with an exception. public Either(R exception) Parameters exception R The exception to be stored in the Either. Methods IfRight(Action<R>) Executes an action on the exception if the Either contains an exception. public L IfRight(Action<R> action) Parameters action Action<R> The action to be executed. Returns L The object stored in the Either. Operators explicit operator L(Either<L, R>) Implicitly converts the Either to an object. public static explicit operator L(Either<L, R> ma) Parameters ma Either<L, R> The Either to be converted. Returns L The object stored in the Either. explicit operator R(Either<L, R>) Implicitly converts the Either to an exception. public static explicit operator R(Either<L, R> ma) Parameters ma Either<L, R> The Either to be converted. Returns R The exception stored in the Either. implicit operator Either<L, R>(L) Implicitly converts an object to an Either. public static implicit operator Either<L, R>(L ma) Parameters ma L The object to be converted. Returns Either<L, R> An Either containing the object. implicit operator Either<L, R>(R) Implicitly converts an exception to an Either. public static implicit operator Either<L, R>(R ma) Parameters ma R The exception to be converted. Returns Either<L, R> An Either containing the exception."
  },
  "api/ArmoniK.DevelopmentKit.Common.Utils.html": {
    "href": "api/ArmoniK.DevelopmentKit.Common.Utils.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Common.Utils",
    "summary": "Namespace ArmoniK.DevelopmentKit.Common.Utils Classes Either<L, R> Represents a simple Either type to manage an object of type L or an exception of type R."
  },
  "api/ArmoniK.DevelopmentKit.Common.html": {
    "href": "api/ArmoniK.DevelopmentKit.Common.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Common",
    "summary": "Namespace ArmoniK.DevelopmentKit.Common Classes AppsOptions ArmonikPayload A class used to define the computation required from the worker EngineTypeHelper Convert helper from Enum to class and reverse EngineTypes Map table to target API MarkDownDocAttribute The attribute to create the Markdown documentation on the class ProtoSerializer ProtoSerializer.Nullable Retry A generic class to implement retry function Interfaces IFileAdapter The interface to download file Enums EngineType Engine type to set in TaskOption to select API to use during the execution on worker"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Common.Adapter.FsAdapter.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Common.Adapter.FsAdapter.html",
    "title": "Class FsAdapter",
    "summary": "Class FsAdapter Namespace ArmoniK.DevelopmentKit.Worker.Common.Adapter Assembly ArmoniK.DevelopmentKit.Worker.Common.dll public class FsAdapter : IFileAdapter Inheritance object FsAdapter Implements IFileAdapter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FsAdapter(string, string) public FsAdapter(string sourceDirPath, string localZipDir = \"/tmp/packages/zip\") Parameters sourceDirPath string localZipDir string Properties DestinationDirPath Get The directory where the file will be downloaded public string DestinationDirPath { get; set; } Property Value string DestinationFullPath The getter to retrieve the last downloaded file public string DestinationFullPath { get; set; } Property Value string Methods DownloadFile(string) The method to download file from form remote server public string DownloadFile(string fileName) Parameters fileName string The filename with extension and without directory path Returns string Returns the path where the file has been downloaded"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Common.Adapter.S3Adapter.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Common.Adapter.S3Adapter.html",
    "title": "Class S3Adapter",
    "summary": "Class S3Adapter Namespace ArmoniK.DevelopmentKit.Worker.Common.Adapter Assembly ArmoniK.DevelopmentKit.Worker.Common.dll public class S3Adapter : IFileAdapter Inheritance object S3Adapter Implements IFileAdapter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors S3Adapter(string, string, string, string, string, bool, string) public S3Adapter(string endPointRegion, string bucketName, string awsAccessKeyId, string awsSecretAccessKey, string remoteS3Path, bool mustForcePathStyle = false, string localZipDir = \"/tmp/packages/zip\") Parameters endPointRegion string bucketName string awsAccessKeyId string awsSecretAccessKey string remoteS3Path string mustForcePathStyle bool localZipDir string Properties DestinationDirPath Get the directory where the file will be downloaded public string DestinationDirPath { get; set; } Property Value string Methods DownloadFile(string) The method to download file from form remote server public string DownloadFile(string fileName) Parameters fileName string The filename with extension and without directory path Returns string Returns the path where the file has been downloaded DownloadFileAsync(string, CancellationToken) The method to download file from form remote server public Task<string> DownloadFileAsync(string fileName, CancellationToken cancellationToken = default) Parameters fileName string The filename with extension and without directory path cancellationToken CancellationToken Abort download of the file Returns Task<string> Returns the path where the file has been downloaded"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Common.Adapter.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Common.Adapter.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Worker.Common.Adapter",
    "summary": "Namespace ArmoniK.DevelopmentKit.Worker.Common.Adapter Classes FsAdapter S3Adapter"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Common.Archive.IArchiver.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Common.Archive.IArchiver.html",
    "title": "Interface IArchiver",
    "summary": "Interface IArchiver Namespace ArmoniK.DevelopmentKit.Worker.Common.Archive Assembly ArmoniK.DevelopmentKit.Worker.Common.dll Interface for archive extraction public interface IArchiver Methods ArchiveAlreadyExtracted(PackageId) Checks if the archive has already been extracted. If the file is being extracted by another process, waits for its completion to return an answer bool ArchiveAlreadyExtracted(PackageId packageId) Parameters packageId PackageId Package Id Returns bool True if the archive has already been extracted, false otherwise ExtractArchive(string, PackageId) Extracts an archive file string ExtractArchive(string filename, PackageId packageId) Parameters filename string File name packageId PackageId Package Id Returns string Path to extracted package folder"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Common.Archive.ZipArchiver.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Common.Archive.ZipArchiver.html",
    "title": "Class ZipArchiver",
    "summary": "Class ZipArchiver Namespace ArmoniK.DevelopmentKit.Worker.Common.Archive Assembly ArmoniK.DevelopmentKit.Worker.Common.dll Class used do handle zip archives public class ZipArchiver : IArchiver Inheritance object ZipArchiver Implements IArchiver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ZipArchiver(string) Creates a zip archive handler public ZipArchiver(string assembliesBasePath) Parameters assembliesBasePath string Base path to extract zip files Methods ArchiveAlreadyExtracted(PackageId) Checks if the archive has already been extracted. If the file is being extracted by another process, waits for its completion to return an answer public bool ArchiveAlreadyExtracted(PackageId packageId) Parameters packageId PackageId Package Id Returns bool True if the archive has already been extracted, false otherwise ExtractArchive(string, PackageId) Interface for archive extraction public string ExtractArchive(string filename, PackageId packageId) Parameters filename string packageId PackageId Returns string Exceptions WorkerApiException Thrown if the file isn't a zip archive or if the lock file isn't lockable when the archive is being extracted by another process IsZipFile(string) public static bool IsZipFile(string assemblyNameFilePath) Parameters assemblyNameFilePath string Returns bool"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Common.Archive.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Common.Archive.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Worker.Common.Archive",
    "summary": "Namespace ArmoniK.DevelopmentKit.Worker.Common.Archive Classes ZipArchiver Class used do handle zip archives Interfaces IArchiver Interface for archive extraction"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Common.IAppsLoader.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Common.IAppsLoader.html",
    "title": "Interface IAppsLoader",
    "summary": "Interface IAppsLoader Namespace ArmoniK.DevelopmentKit.Worker.Common Assembly ArmoniK.DevelopmentKit.Worker.Common.dll public interface IAppsLoader : IDisposable Inherited Members IDisposable.Dispose() Methods GetServiceContainerInstance<T>(string, string) T GetServiceContainerInstance<T>(string gridAppNamespace, string gridServiceName) Parameters gridAppNamespace string gridServiceName string Returns T Type Parameters T"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Common.IGridWorker.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Common.IGridWorker.html",
    "title": "Interface IGridWorker",
    "summary": "Interface IGridWorker Namespace ArmoniK.DevelopmentKit.Worker.Common Assembly ArmoniK.DevelopmentKit.Worker.Common.dll public interface IGridWorker : IDisposable Inherited Members IDisposable.Dispose() Methods Configure(IConfiguration, TaskOptions, IAppsLoader) void Configure(IConfiguration configuration, TaskOptions clientOptions, IAppsLoader appsLoader) Parameters configuration IConfiguration clientOptions TaskOptions appsLoader IAppsLoader DestroyService() void DestroyService() Execute(ITaskHandler) byte[] Execute(ITaskHandler taskHandler) Parameters taskHandler ITaskHandler Returns byte[] InitializeSessionWorker(Session, TaskOptions) void InitializeSessionWorker(Session sessionId, TaskOptions requestTaskOptions) Parameters sessionId Session requestTaskOptions TaskOptions SessionFinalize() void SessionFinalize()"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Common.PackageId.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Common.PackageId.html",
    "title": "Struct PackageId",
    "summary": "Struct PackageId Namespace ArmoniK.DevelopmentKit.Worker.Common Assembly ArmoniK.DevelopmentKit.Worker.Common.dll Identifier for a Package public readonly struct PackageId : IEquatable<PackageId> Implements IEquatable<PackageId> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors PackageId(string, string) Creates a PackageId public PackageId(string applicationName, string applicationVersion) Parameters applicationName string Application name applicationVersion string Application version Properties ApplicationName Application name public string ApplicationName { get; } Property Value string ApplicationVersion Application version public string ApplicationVersion { get; } Property Value string MainAssemblyFileName Name of this package's main assembly file public string MainAssemblyFileName { get; } Property Value string PackageSubpath Subpath of this package public string PackageSubpath { get; } Property Value string ZipFileName Name of the zip file for that package public string ZipFileName { get; } Property Value string Methods Equals(PackageId) Indicates whether the current object is equal to another object of the same type. public bool Equals(PackageId other) Parameters other PackageId An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator ==(PackageId, PackageId) Indicates whether the objects are equal. public static bool operator ==(PackageId a, PackageId b) Parameters a PackageId Object a b PackageId Object b Returns bool true if the objects are equal, false otherwise operator !=(PackageId, PackageId) Indicates whether the objects are not equal. public static bool operator !=(PackageId a, PackageId b) Parameters a PackageId Object a b PackageId Object b Returns bool false if the objects are equal, true otherwise"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Common.ResultIdEnumerable.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Common.ResultIdEnumerable.html",
    "title": "Class ResultIdEnumerable",
    "summary": "Class ResultIdEnumerable Namespace ArmoniK.DevelopmentKit.Worker.Common Assembly ArmoniK.DevelopmentKit.Worker.Common.dll Enumerable to create result Ids [PublicAPI] public class ResultIdEnumerable : IEnumerable<string>, IEnumerable, IEnumerator<string>, IEnumerator, IDisposable Inheritance object ResultIdEnumerable Implements IEnumerable<string> IEnumerable IEnumerator<string> IEnumerator IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ResultIdEnumerable(ITaskHandler, int, bool) Creates a enumerable of result ids public ResultIdEnumerable(ITaskHandler taskHandler, int count = 0, bool limit = false) Parameters taskHandler ITaskHandler TaskHandler to create the results count int Initial number of results to generate limit bool Set to true to limit the number of result ids generated to the initial count, otherwise generates a new result id for each call beyond the initial count Properties Current Supports a simple iteration over a generic collection. [CanBeNull] public string Current { get; } Property Value string Methods Dispose() Supports a simple iteration over a generic collection. public void Dispose() GetEnumerator() Supports a simple iteration over a generic collection. public IEnumerator<string> GetEnumerator() Returns IEnumerator<string> MoveNext() Supports a simple iteration over a generic collection. public bool MoveNext() Returns bool Reset() Supports a simple iteration over a generic collection. public void Reset()"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Common.ServiceId.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Common.ServiceId.html",
    "title": "Struct ServiceId",
    "summary": "Struct ServiceId Namespace ArmoniK.DevelopmentKit.Worker.Common Assembly ArmoniK.DevelopmentKit.Worker.Common.dll Identifier for a Service public readonly struct ServiceId : IEquatable<ServiceId> Implements IEquatable<ServiceId> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ServiceId(PackageId, string, EngineType) Creates a ServiceId public ServiceId(PackageId packageId, string applicationNamespace, EngineType engineType) Parameters packageId PackageId PackageId applicationNamespace string Namespace engineType EngineType Engine type Properties ApplicationNamespace Namespace of the service public string ApplicationNamespace { get; } Property Value string EngineType Type of engine of the service public EngineType EngineType { get; } Property Value EngineType PackageId PackageId of the service public PackageId PackageId { get; } Property Value PackageId Methods Equals(ServiceId) Indicates whether the current object is equal to another object of the same type. public bool Equals(ServiceId other) Parameters other ServiceId An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator ==(ServiceId, ServiceId) Indicates whether the objects are equal. public static bool operator ==(ServiceId a, ServiceId b) Parameters a ServiceId Object a b ServiceId Object b Returns bool true if the objects are equal, false otherwise operator !=(ServiceId, ServiceId) Indicates whether the objects are not equal. public static bool operator !=(ServiceId a, ServiceId b) Parameters a ServiceId Object a b ServiceId Object b Returns bool false if the objects are equal, true otherwise"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Common.WorkerHelpers.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Common.WorkerHelpers.html",
    "title": "Class WorkerHelpers",
    "summary": "Class WorkerHelpers Namespace ArmoniK.DevelopmentKit.Worker.Common Assembly ArmoniK.DevelopmentKit.Worker.Common.dll public class WorkerHelpers Inheritance object WorkerHelpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetDefaultConfiguration() public static IConfiguration GetDefaultConfiguration() Returns IConfiguration GetDefaultLoggerFactory(IConfiguration) public static ILoggerFactory GetDefaultLoggerFactory(IConfiguration configuration = null) Parameters configuration IConfiguration Returns ILoggerFactory"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Common.XmlDocIgnoreAttribute.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Common.XmlDocIgnoreAttribute.html",
    "title": "Class XmlDocIgnoreAttribute",
    "summary": "Class XmlDocIgnoreAttribute Namespace ArmoniK.DevelopmentKit.Worker.Common Assembly ArmoniK.DevelopmentKit.Worker.Common.dll public class XmlDocIgnoreAttribute : Attribute Inheritance object Attribute XmlDocIgnoreAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Common.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Common.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Worker.Common",
    "summary": "Namespace ArmoniK.DevelopmentKit.Worker.Common Classes ResultIdEnumerable Enumerable to create result Ids WorkerHelpers XmlDocIgnoreAttribute Structs PackageId Identifier for a Package ServiceId Identifier for a Service Interfaces IAppsLoader IGridWorker"
  },
  "api/ArmoniK.DevelopmentKit.Worker.DLLWorker.ApplicationPackageManager.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.DLLWorker.ApplicationPackageManager.html",
    "title": "Class ApplicationPackageManager",
    "summary": "Class ApplicationPackageManager Namespace ArmoniK.DevelopmentKit.Worker.DLLWorker Assembly ArmoniK.DevelopmentKit.Worker.DLLWorker.dll Manages application packages public class ApplicationPackageManager Inheritance object ApplicationPackageManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApplicationPackageManager(IConfiguration, ILoggerFactory) Creates an application package manager public ApplicationPackageManager(IConfiguration configuration, ILoggerFactory loggerFactory) Parameters configuration IConfiguration DLLWorker configuration loggerFactory ILoggerFactory Logger factory Exceptions WorkerApiException Thrown when the FileStorageType is unspecified in the configuration Methods GetApplicationAssemblyFile(PackageId, string, string[]) Get the path to the given assembly of the package [CanBeNull] public string GetApplicationAssemblyFile(PackageId packageId, string assemblyName, string[] searchPaths = null) Parameters packageId PackageId PackageId assemblyName string Name of the assembly searchPaths string[] List of search paths for the assembly, defaults to the usual package location if not specified Returns string Path to the assembly in the package, null if it cannot be found LoadApplicationPackage(PackageId) Loads the application package. If the package is already loaded just returns its base path. [CanBeNull] public string LoadApplicationPackage(PackageId packageId) Parameters packageId PackageId Package Id Returns string Path to the application package"
  },
  "api/ArmoniK.DevelopmentKit.Worker.DLLWorker.AppsLoader.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.DLLWorker.AppsLoader.html",
    "title": "Class AppsLoader",
    "summary": "Class AppsLoader Namespace ArmoniK.DevelopmentKit.Worker.DLLWorker Assembly ArmoniK.DevelopmentKit.Worker.DLLWorker.dll public class AppsLoader : IAppsLoader, IDisposable Inheritance object AppsLoader Implements IAppsLoader IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppsLoader(ApplicationPackageManager, ILoggerFactory, string, PackageId) public AppsLoader(ApplicationPackageManager packageManager, ILoggerFactory loggerFactory, string engineTypeAssemblyName, PackageId packageId) Parameters packageManager ApplicationPackageManager loggerFactory ILoggerFactory engineTypeAssemblyName string packageId PackageId Properties Configuration public IConfiguration Configuration { get; } Property Value IConfiguration PathToAssembly public string PathToAssembly { get; set; } Property Value string PathToAssemblyGridWorker public string PathToAssemblyGridWorker { get; set; } Property Value string UserAssemblyLoadContext public AssemblyLoadContext UserAssemblyLoadContext { get; } Property Value AssemblyLoadContext Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() ~AppsLoader() protected ~AppsLoader() GetGridWorkerInstance(IConfiguration, ILoggerFactory) public IGridWorker GetGridWorkerInstance(IConfiguration configuration, ILoggerFactory loggerFactory) Parameters configuration IConfiguration loggerFactory ILoggerFactory Returns IGridWorker GetServiceContainerInstance<T>(string, string) public T GetServiceContainerInstance<T>(string appNamespace, string serviceContainerClassName) Parameters appNamespace string serviceContainerClassName string Returns T Type Parameters T GetServiceContainerInstance<T>(string, string, params object[]) public T GetServiceContainerInstance<T>(string appNamespace, string serviceContainerClassName, params object[] args) Parameters appNamespace string serviceContainerClassName string args object[] Returns T Type Parameters T"
  },
  "api/ArmoniK.DevelopmentKit.Worker.DLLWorker.ArmonikServiceWorker.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.DLLWorker.ArmonikServiceWorker.html",
    "title": "Class ArmonikServiceWorker",
    "summary": "Class ArmonikServiceWorker Namespace ArmoniK.DevelopmentKit.Worker.DLLWorker Assembly ArmoniK.DevelopmentKit.Worker.DLLWorker.dll public class ArmonikServiceWorker : IDisposable Inheritance object ArmonikServiceWorker Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ArmonikServiceWorker() public ArmonikServiceWorker() Properties AppsLoader public AppsLoader AppsLoader { get; set; } Property Value AppsLoader GridWorker public IGridWorker GridWorker { get; set; } Property Value IGridWorker Initialized public bool Initialized { get; set; } Property Value bool ServiceId public ServiceId ServiceId { get; set; } Property Value ServiceId Methods CloseSession() public void CloseSession() Configure(IConfiguration, TaskOptions) public void Configure(IConfiguration configuration, TaskOptions requestTaskOptions) Parameters configuration IConfiguration requestTaskOptions TaskOptions DestroyService() Call the GridWorker callback to let the user know when the service will be unloaded public void DestroyService() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Execute(ITaskHandler) public byte[] Execute(ITaskHandler taskHandler) Parameters taskHandler ITaskHandler Returns byte[] InitializeSessionWorker(Session, TaskOptions) public void InitializeSessionWorker(Session sessionId, TaskOptions taskHandlerTaskOptions) Parameters sessionId Session taskHandlerTaskOptions TaskOptions"
  },
  "api/ArmoniK.DevelopmentKit.Worker.DLLWorker.ServiceRequestContext.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.DLLWorker.ServiceRequestContext.html",
    "title": "Class ServiceRequestContext",
    "summary": "Class ServiceRequestContext Namespace ArmoniK.DevelopmentKit.Worker.DLLWorker Assembly ArmoniK.DevelopmentKit.Worker.DLLWorker.dll public class ServiceRequestContext Inheritance object ServiceRequestContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ServiceRequestContext(ILoggerFactory) public ServiceRequestContext(ILoggerFactory loggerFactory) Parameters loggerFactory ILoggerFactory Properties LoggerFactory public ILoggerFactory LoggerFactory { get; set; } Property Value ILoggerFactory SessionId public Session SessionId { get; set; } Property Value Session Methods CreateOrGetArmonikService(IConfiguration, ApplicationPackageManager, string, PackageId, TaskOptions) public ArmonikServiceWorker CreateOrGetArmonikService(IConfiguration configuration, ApplicationPackageManager appPackageManager, string engineTypeName, PackageId packageId, TaskOptions requestTaskOptions) Parameters configuration IConfiguration appPackageManager ApplicationPackageManager engineTypeName string packageId PackageId requestTaskOptions TaskOptions Returns ArmonikServiceWorker IsNewSessionId(Session) public bool IsNewSessionId(Session sessionId) Parameters sessionId Session Returns bool IsNewSessionId(string) public bool IsNewSessionId(string sessionId) Parameters sessionId string Returns bool"
  },
  "api/ArmoniK.DevelopmentKit.Worker.DLLWorker.Services.ComputerService.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.DLLWorker.Services.ComputerService.html",
    "title": "Class ComputerService",
    "summary": "Class ComputerService Namespace ArmoniK.DevelopmentKit.Worker.DLLWorker.Services Assembly ArmoniK.DevelopmentKit.Worker.DLLWorker.dll public class ComputerService : WorkerStreamWrapper, IAsyncDisposable Inheritance object Worker.WorkerBase WorkerStreamWrapper ComputerService Implements IAsyncDisposable Inherited Members WorkerStreamWrapper.logger_ WorkerStreamWrapper.DisposeAsync() WorkerStreamWrapper.Process(ProcessRequest, ServerCallContext) WorkerStreamWrapper.ProcessAsync(ITaskHandler, CancellationToken) WorkerStreamWrapper.HealthCheck(Empty, ServerCallContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ComputerService(IConfiguration, GrpcChannelProvider, ServiceRequestContext) public ComputerService(IConfiguration configuration, GrpcChannelProvider provider, ServiceRequestContext serviceRequestContext) Parameters configuration IConfiguration provider GrpcChannelProvider serviceRequestContext ServiceRequestContext Properties Configuration public IConfiguration Configuration { get; } Property Value IConfiguration ServiceRequestContext public ServiceRequestContext ServiceRequestContext { get; } Property Value ServiceRequestContext Methods Process(ITaskHandler) User defined computations public override Task<Output> Process(ITaskHandler taskHandler) Parameters taskHandler ITaskHandler Handler to access input data and task capabilities Returns Task<Output> The output of the computational task Exceptions RpcException when method is not overwritten"
  },
  "api/ArmoniK.DevelopmentKit.Worker.DLLWorker.Services.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.DLLWorker.Services.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Worker.DLLWorker.Services",
    "summary": "Namespace ArmoniK.DevelopmentKit.Worker.DLLWorker.Services Classes ComputerService"
  },
  "api/ArmoniK.DevelopmentKit.Worker.DLLWorker.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.DLLWorker.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Worker.DLLWorker",
    "summary": "Namespace ArmoniK.DevelopmentKit.Worker.DLLWorker Classes ApplicationPackageManager Manages application packages AppsLoader ArmonikServiceWorker ServiceRequestContext"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Symphony.GridWorker.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Symphony.GridWorker.html",
    "title": "Class GridWorker",
    "summary": "Class GridWorker Namespace ArmoniK.DevelopmentKit.Worker.Symphony Assembly ArmoniK.DevelopmentKit.Worker.Symphony.dll public class GridWorker : IGridWorker, IDisposable Inheritance object GridWorker Implements IGridWorker IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GridWorker() public GridWorker() GridWorker(IConfiguration, ILoggerFactory) public GridWorker(IConfiguration configuration, ILoggerFactory factory) Parameters configuration IConfiguration factory ILoggerFactory Properties Configuration public IConfiguration Configuration { get; set; } Property Value IConfiguration GridAppName public string GridAppName { get; set; } Property Value string GridAppNamespace public string GridAppNamespace { get; set; } Property Value string GridAppVersion public string GridAppVersion { get; set; } Property Value string SessionId public Session SessionId { get; set; } Property Value Session TaskId public TaskId TaskId { get; set; } Property Value TaskId TaskOptions public TaskOptions TaskOptions { get; set; } Property Value TaskOptions Methods Configure(IConfiguration, TaskOptions, IAppsLoader) public void Configure(IConfiguration configuration, TaskOptions clientOptions, IAppsLoader appsLoader) Parameters configuration IConfiguration clientOptions TaskOptions appsLoader IAppsLoader DestroyService() public void DestroyService() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Execute(ITaskHandler) public byte[] Execute(ITaskHandler taskHandler) Parameters taskHandler ITaskHandler Returns byte[] InitializeSessionWorker(Session, TaskOptions) public void InitializeSessionWorker(Session sessionId, TaskOptions requestTaskOptions) Parameters sessionId Session requestTaskOptions TaskOptions OnCreateService() public void OnCreateService() OnDestroyService() public void OnDestroyService() OnSessionEnter(Session) The internal function onSessionEnter to openSession for clientService under GridWorker public void OnSessionEnter(Session session) Parameters session Session OnSessionLeave() public void OnSessionLeave() SessionFinalize() public void SessionFinalize()"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Symphony.ServiceContainerBase.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Symphony.ServiceContainerBase.html",
    "title": "Class ServiceContainerBase",
    "summary": "Class ServiceContainerBase Namespace ArmoniK.DevelopmentKit.Worker.Symphony Assembly ArmoniK.DevelopmentKit.Worker.Symphony.dll The Class ServiceContainerBase (Old name was IServiceContainer) is an abstract class that have to be implemented by each class wanted to be loaded as new Application See an example in the project ArmoniK.Samples in the sub project https://github.com/aneoconsulting/ArmoniK.Samples/tree/main/Samples/SymphonyLike Samples.ArmoniK.Sample.SymphonyPackages [PublicAPI] public abstract class ServiceContainerBase Inheritance object ServiceContainerBase Derived ServiceContainer ServiceContainer ServiceContainer ServiceContainer ServiceContainer ServiceContainer ServiceContainer ServiceContainer ServiceContainer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ServiceContainerBaseExt.SubmitTask(ServiceContainerBase, byte[], int, TaskOptions) ServiceContainerBaseExt.SubmitTaskWithDependencies(ServiceContainerBase, byte[], IList<string>, bool, int, TaskOptions) Properties Configuration Get or Set Configuration public IConfiguration Configuration { get; set; } Property Value IConfiguration Logger ginScope Get access to Logger with Logger.Lo. public ILogger<ServiceContainerBase> Logger { get; set; } Property Value ILogger<ServiceContainerBase> LoggerFactory The logger factory to create new Logger in sub class caller public ILoggerFactory LoggerFactory { get; set; } Property Value ILoggerFactory SessionId Get or Set SubSessionId object stored during the call of SubmitTask, SubmitSubTask, SubmitSubTaskWithDependencies or WaitForCompletion, WaitForSubTaskCompletion or GetResults public Session SessionId { get; set; } Property Value Session TaskId Get or set the taskId (ONLY INTERNAL USED) public TaskId TaskId { get; set; } Property Value TaskId TaskId2OutputId Map between ids of task and their results id after task submission public Dictionary<string, string> TaskId2OutputId { get; } Property Value Dictionary<string, string> TaskOptions Return TaskOption coming from Client side public TaskOptions TaskOptions { get; set; } Property Value TaskOptions Methods Configure(IConfiguration, TaskOptions) The configure method is an internal call to prepare the ServiceContainer. Its holds several configuration coming from the Client call public void Configure(IConfiguration configuration, TaskOptions clientOptions) Parameters configuration IConfiguration The appSettings.json configuration prepared during the deployment clientOptions TaskOptions All data coming from Client within TaskOptions ConfigureSession(Session, TaskOptions) Prepare Session and create SessionService with the specific session public void ConfigureSession(Session sessionId, TaskOptions requestTaskOptions) Parameters sessionId Session requestTaskOptions TaskOptions ConfigureSessionService(ITaskHandler) Configure Service for actual session. Connect the worker to the current pollingAgent public void ConfigureSessionService(ITaskHandler taskHandler) Parameters taskHandler ITaskHandler GetDependenciesResult(string) Get Result from compute reply public byte[] GetDependenciesResult(string taskId) Parameters taskId string The task Id to get the result Returns byte[] return the customer payload OnCreateService(ServiceContext) The middleware triggers the invocation of this handler just after a Service Instance is started. The application developer must put any service initialization into this handler. Default implementation does nothing. public abstract void OnCreateService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnDestroyService(ServiceContext) The middleware triggers the invocation of this handler just before a Service Instance is destroyed. This handler should do any cleanup for any resources that were used in the onCreateService() method. public abstract void OnDestroyService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnInvoke(SessionContext, TaskContext) The middleware triggers the invocation of this handler every time a task input is sent to the service to be processed. The actual service logic should be implemented in this method. This is the only method that is mandatory for the application developer to implement. public abstract byte[] OnInvoke(SessionContext sessionContext, TaskContext taskContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID. taskContext TaskContext Holds all information on the state of the task such as the task ID and the payload. Returns byte[] OnSessionEnter(SessionContext) This handler is executed once after the callback OnCreateService and before the OnInvoke public abstract void OnSessionEnter(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution. OnSessionLeave(SessionContext) The middleware triggers the invocation of this handler to unbind the Service Instance from its owning Session. This handler should do any cleanup for any resources that were used in the onSessionEnter() method. public abstract void OnSessionLeave(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID. SubmitSubtaskWithDependencies(byte[], IList<string>, int, TaskOptions) The method to submit one subtask with dependencies tasks. This task will wait for to start until all dependencies are completed successfully [Obsolete] public string SubmitSubtaskWithDependencies(byte[] payload, IList<string> dependencies, int maxRetries = 5, TaskOptions taskOptions = null) Parameters payload byte[] The payload to submit dependencies IList<string> A list of task Id in dependence of this created SubTask maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns string return the taskId of the created SubTask SubmitSubtasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, int, TaskOptions) The method to submit several tasks with dependencies tasks. This task will wait for to start until all dependencies are completed successfully [Obsolete] public IEnumerable<string> SubmitSubtasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>> payloadWithDependencies, int maxRetries = 5, TaskOptions taskOptions = null) Parameters payloadWithDependencies IEnumerable<Tuple<byte[], IList<string>>> A list of Tuple(taskId, Payload) in dependence of those created Subtasks maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns IEnumerable<string> return a list of taskIds of the created subtasks SubmitTasks(IEnumerable<byte[]>, int, TaskOptions) User method to submit task from the service public IEnumerable<string> SubmitTasks(IEnumerable<byte[]> payloads, int maxRetries = 5, TaskOptions taskOptions = null) Parameters payloads IEnumerable<byte[]> The user payload list to execute. Generally used for subTasking. maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns IEnumerable<string> SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, bool, int, TaskOptions) The method to submit several tasks with dependencies tasks. This task will wait for to start until all dependencies are completed successfully public IEnumerable<string> SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>> payloadWithDependencies, bool resultForParent = false, int maxRetries = 5, TaskOptions taskOptions = null) Parameters payloadWithDependencies IEnumerable<Tuple<byte[], IList<string>>> A list of Tuple(taskId, Payload) in dependence of those created tasks resultForParent bool Up result to parent task maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns IEnumerable<string> return a list of taskIds of the created tasks WaitForSubTasksCompletion(string) User method to wait for SubTasks from the client [Obsolete] public void WaitForSubTasksCompletion(string taskId) Parameters taskId string The task id of the Subtask WaitForTaskCompletion(string) User method to wait for only the parent task from the client [Obsolete] public void WaitForTaskCompletion(string taskId) Parameters taskId string The task id of the task to wait for WaitForTasksCompletion(IEnumerable<string>) [Obsolete] public void WaitForTasksCompletion(IEnumerable<string> taskIds) Parameters taskIds IEnumerable<string> List of tasks to wait for"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Symphony.ServiceContainerBaseExt.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Symphony.ServiceContainerBaseExt.html",
    "title": "Class ServiceContainerBaseExt",
    "summary": "Class ServiceContainerBaseExt Namespace ArmoniK.DevelopmentKit.Worker.Symphony Assembly ArmoniK.DevelopmentKit.Worker.Symphony.dll This is the ServiceContainerBase extensions used to extend SubmitSubTasks public static class ServiceContainerBaseExt Inheritance object ServiceContainerBaseExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SubmitTask(ServiceContainerBase, byte[], int, TaskOptions) User method to submit task from the service public static string SubmitTask(this ServiceContainerBase serviceContainerBase, byte[] payload, int maxRetries = 5, TaskOptions taskOptions = null) Parameters serviceContainerBase ServiceContainerBase payload byte[] The user payload to execute. Generally used for subtasking. maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns string SubmitTaskWithDependencies(ServiceContainerBase, byte[], IList<string>, bool, int, TaskOptions) The method to submit One task with dependencies tasks. This task will wait for to start until all dependencies are completed successfully public static string SubmitTaskWithDependencies(this ServiceContainerBase serviceContainerBase, byte[] payload, IList<string> dependencies, bool resultForParent = false, int maxRetries = 5, TaskOptions taskOptions = null) Parameters serviceContainerBase ServiceContainerBase payload byte[] The payload to submit dependencies IList<string> A list of task Id in dependence of this created task resultForParent bool maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns string return the taskId of the created task"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Symphony.ServiceContext.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Symphony.ServiceContext.html",
    "title": "Class ServiceContext",
    "summary": "Class ServiceContext Namespace ArmoniK.DevelopmentKit.Worker.Symphony Assembly ArmoniK.DevelopmentKit.Worker.Symphony.dll public class ServiceContext Inheritance object ServiceContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AppNamespace public string AppNamespace { get; set; } Property Value string ApplicationName public string ApplicationName { get; set; } Property Value string ClientLibVersion public string ClientLibVersion { get; set; } Property Value string ServiceName public string ServiceName { get; set; } Property Value string"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Symphony.SessionContext.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Symphony.SessionContext.html",
    "title": "Class SessionContext",
    "summary": "Class SessionContext Namespace ArmoniK.DevelopmentKit.Worker.Symphony Assembly ArmoniK.DevelopmentKit.Worker.Symphony.dll Container for the information associated with a particular Session. Such information may be required during the servicing of a task from a Session. public class SessionContext Inheritance object SessionContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields TimeRemoteDebug public int TimeRemoteDebug Field Value int Properties ClientLibVersion public string ClientLibVersion { get; set; } Property Value string IsDebugMode public bool IsDebugMode { get; } Property Value bool SessionId public string SessionId { get; set; } Property Value string"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Symphony.SessionPollingService.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Symphony.SessionPollingService.html",
    "title": "Class SessionPollingService",
    "summary": "Class SessionPollingService Namespace ArmoniK.DevelopmentKit.Worker.Symphony Assembly ArmoniK.DevelopmentKit.Worker.Symphony.dll The class SessionService will be create each time the function CreateSession or OpenSession will be called by client or by the worker. public class SessionPollingService Inheritance object SessionPollingService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods SessionServiceExt.SubmitTask(SessionPollingService, byte[], int, TaskOptions) SessionServiceExt.SubmitTaskWithDependencies(SessionPollingService, byte[], IList<string>, int, TaskOptions) Constructors SessionPollingService(ILoggerFactory, ITaskHandler) Ctor to instantiate a new SessionService This is an object to send task or get Results from a session public SessionPollingService(ILoggerFactory loggerFactory, ITaskHandler taskHandler) Parameters loggerFactory ILoggerFactory taskHandler ITaskHandler Fields TaskId2OutputId Map between ids of task and their results id after task submission public readonly Dictionary<string, string> TaskId2OutputId Field Value Dictionary<string, string> Properties SessionId Only used for internal DO NOT USED IT Get or Set SessionId object stored during the call of SubmitTask, SubmitSubTask, SubmitSubTaskWithDependencies or WaitForCompletion, WaitForSubTaskCompletion or GetResults public Session SessionId { get; } Property Value Session TaskHandler The task handler to communicate with the polling agent public ITaskHandler TaskHandler { get; set; } Property Value ITaskHandler TaskOptions Set or Get TaskOptions with inside MaxDuration, Priority, AppName, VersionName and AppNamespace public TaskOptions TaskOptions { get; set; } Property Value TaskOptions Methods GetDependenciesResult(string) Get the dependencies data from previous executed and completed tasks public byte[] GetDependenciesResult(string id) Parameters id string Returns byte[] returns a specific data from the taskId GetDependenciesResults() public IDictionary<string, byte[]> GetDependenciesResults() Returns IDictionary<string, byte[]> SubmitTasks(IEnumerable<byte[]>, int, TaskOptions) User method to submit task from the client Need a client Service. In case of ServiceContainer pollingAgentService can be null until the OpenSession is called public IEnumerable<string> SubmitTasks(IEnumerable<byte[]> payloads, int maxRetries = 5, TaskOptions taskOptions = null) Parameters payloads IEnumerable<byte[]> The user payload list to execute. General used for subTasking. maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns IEnumerable<string> SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, bool, int, TaskOptions) The method to submit several tasks with dependencies tasks. This task will wait for to start until all dependencies are completed successfully public IEnumerable<string> SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>> payloadsWithDependencies, bool resultForParent = false, int maxRetries = 5, TaskOptions taskOptions = null) Parameters payloadsWithDependencies IEnumerable<Tuple<byte[], IList<string>>> A list of Tuple(taskId, Payload) in dependence of those created tasks resultForParent bool maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns IEnumerable<string> return a list of taskIds of the created tasks ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/ArmoniK.DevelopmentKit.Worker.Symphony.SessionServiceExt.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Symphony.SessionServiceExt.html",
    "title": "Class SessionServiceExt",
    "summary": "Class SessionServiceExt Namespace ArmoniK.DevelopmentKit.Worker.Symphony Assembly ArmoniK.DevelopmentKit.Worker.Symphony.dll The SessionService Extension to single task creation public static class SessionServiceExt Inheritance object SessionServiceExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SubmitTask(SessionPollingService, byte[], int, TaskOptions) User method to submit task from the client public static string SubmitTask(this SessionPollingService client, byte[] payload, int maxRetries = 5, TaskOptions taskOptions = null) Parameters client SessionPollingService The client instance for extension payload byte[] The user payload to execute. maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns string SubmitTaskWithDependencies(SessionPollingService, byte[], IList<string>, int, TaskOptions) The method to submit One task with dependencies tasks. This task will wait for to start until all dependencies are completed successfully public static string SubmitTaskWithDependencies(this SessionPollingService client, byte[] payload, IList<string> dependencies, int maxRetries = 5, TaskOptions taskOptions = null) Parameters client SessionPollingService The client instance for extension payload byte[] The payload to submit dependencies IList<string> A list of task Id in dependence of this created task maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns string return the taskId of the created task"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Symphony.TaskContext.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Symphony.TaskContext.html",
    "title": "Class TaskContext",
    "summary": "Class TaskContext Namespace ArmoniK.DevelopmentKit.Worker.Symphony Assembly ArmoniK.DevelopmentKit.Worker.Symphony.dll Provides the context for the task that is bound to the given service invocation public class TaskContext Inheritance object TaskContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Payload public byte[] Payload Field Value byte[] Properties DataDependencies public IReadOnlyDictionary<string, byte[]> DataDependencies { get; set; } Property Value IReadOnlyDictionary<string, byte[]> DependenciesTaskIds public IEnumerable<string> DependenciesTaskIds { get; set; } Property Value IEnumerable<string> SessionId public string SessionId { get; set; } Property Value string TaskId public string TaskId { get; set; } Property Value string TaskInput The customer payload to deserialize by the customer public byte[] TaskInput { get; set; } Property Value byte[] TaskOptions public TaskOptions TaskOptions { get; set; } Property Value TaskOptions"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Symphony.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Symphony.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Worker.Symphony",
    "summary": "Namespace ArmoniK.DevelopmentKit.Worker.Symphony Classes GridWorker ServiceContainerBase The Class ServiceContainerBase (Old name was IServiceContainer) is an abstract class that have to be implemented by each class wanted to be loaded as new Application See an example in the project ArmoniK.Samples in the sub project https://github.com/aneoconsulting/ArmoniK.Samples/tree/main/Samples/SymphonyLike Samples.ArmoniK.Sample.SymphonyPackages ServiceContainerBaseExt This is the ServiceContainerBase extensions used to extend SubmitSubTasks ServiceContext SessionContext Container for the information associated with a particular Session. Such information may be required during the servicing of a task from a Session. SessionPollingService The class SessionService will be create each time the function CreateSession or OpenSession will be called by client or by the worker. SessionServiceExt The SessionService Extension to single task creation TaskContext Provides the context for the task that is bound to the given service invocation"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Unified.BaseService-1.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Unified.BaseService-1.html",
    "title": "Class BaseService<T>",
    "summary": "Class BaseService<T> Namespace ArmoniK.DevelopmentKit.Worker.Unified Assembly ArmoniK.DevelopmentKit.Worker.Unified.dll The Class ServiceContainerBase (Old name was IServiceContainer) is an abstract class that have to be implemented by each class wanted to be loaded as new Application See an example in the project ArmoniK.Samples in the sub project https://github.com/aneoconsulting/ArmoniK.Samples/tree/main/Samples/SymphonyLike Samples.ArmoniK.Sample.SymphonyPackages [PublicAPI] public abstract class BaseService<T> Type Parameters T Inheritance object BaseService<T> Derived LargePayloadSubmitWorker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseServiceExt.SubmitTaskWithDependencies<T>(BaseService<T>, byte[], IList<string>, bool, int, TaskOptions) BaseServiceExt.SubmitTask<T>(BaseService<T>, byte[], int, TaskOptions) Constructors BaseService() public BaseService() BaseService(ILoggerFactory) public BaseService(ILoggerFactory loggerFactory) Parameters loggerFactory ILoggerFactory Properties Configuration Get or Set Configuration public IConfiguration Configuration { get; set; } Property Value IConfiguration Logger ginScope Get access to Logger with Logger.Lo. public ILogger<T> Logger { get; set; } Property Value ILogger<T> LoggerFactory The logger factory to create new Logger in sub class caller public ILoggerFactory LoggerFactory { get; set; } Property Value ILoggerFactory SessionId Get or Set SubSessionId object stored during the call of SubmitTask, SubmitSubTask, SubmitSubTaskWithDependencies or WaitForCompletion, WaitForSubTaskCompletion or GetResults public Session SessionId { get; set; } Property Value Session TaskId Get or set the taskId (ONLY INTERNAL USED) public TaskId TaskId { get; set; } Property Value TaskId TaskId2OutputId Map between ids of task and their results id after task submission public Dictionary<string, string> TaskId2OutputId { get; } Property Value Dictionary<string, string> TaskOptions Return TaskOption coming from Client side public TaskOptions TaskOptions { get; set; } Property Value TaskOptions Methods Configure(IConfiguration, TaskOptions) The configure method is an internal call to prepare the ServiceContainer. Its holds several configuration coming from the Client call public void Configure(IConfiguration configuration, TaskOptions clientOptions) Parameters configuration IConfiguration The appSettings.json configuration prepared during the deployment clientOptions TaskOptions All data coming from Client within TaskOptions ConfigureSession(Session, TaskOptions) Prepare Session and create SessionService with the specific session public void ConfigureSession(Session sessionId, TaskOptions requestTaskOptions) Parameters sessionId Session requestTaskOptions TaskOptions ConfigureSessionService(ITaskHandler) Configure Service for actual session. Connect the worker to the current pollingAgent public void ConfigureSessionService(ITaskHandler taskHandler) Parameters taskHandler ITaskHandler GetDependenciesResult(string) Get Result from compute reply public byte[] GetDependenciesResult(string taskId) Parameters taskId string The task Id to get the result Returns byte[] return the customer payload OnCreateService(ServiceContext) The middleware triggers the invocation of this handler just after a Service Instance is started. The application developer must put any service initialization into this handler. Default implementation does nothing. public void OnCreateService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnDestroyService(ServiceContext) The middleware triggers the invocation of this handler just before a Service Instance is destroyed. This handler should do any cleanup for any resources that were used in the onCreateService() method. public void OnDestroyService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnInvoke(SessionContext, TaskContext) The middleware triggers the invocation of this handler every time a task input is sent to the service to be processed. The actual service logic should be implemented in this method. This is the only method that is mandatory for the application developer to implement. public byte[] OnInvoke(SessionContext sessionContext, TaskContext taskContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID. taskContext TaskContext Holds all information on the state of the task such as the task ID and the payload. Returns byte[] OnSessionEnter(SessionContext) This handler is executed once after the callback OnCreateService and before the OnInvoke public void OnSessionEnter(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution. OnSessionLeave(SessionContext) The middleware triggers the invocation of this handler to unbind the Service Instance from its owning Session. This handler should do any cleanup for any resources that were used in the onSessionEnter() method. public void OnSessionLeave(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID. SubmitTasks(IEnumerable<byte[]>, int, TaskOptions?) User method to submit task from the service public IEnumerable<string> SubmitTasks(IEnumerable<byte[]> payloads, int maxRetries = 5, TaskOptions? taskOptions = null) Parameters payloads IEnumerable<byte[]> The user payload list to execute. Generally used for subTasking. maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns IEnumerable<string> SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, bool, int, TaskOptions) The method to submit several tasks with dependencies tasks. This task will wait for to start until all dependencies are completed successfully public IEnumerable<string> SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>> payloadWithDependencies, bool resultForParent = false, int maxRetries = 5, TaskOptions taskOptions = null) Parameters payloadWithDependencies IEnumerable<Tuple<byte[], IList<string>>> A list of Tuple(taskId, Payload) in dependence of those created tasks resultForParent bool Up result to parent task maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns IEnumerable<string> return a list of taskIds of the created tasks WaitForSubTasksCompletion(string) User method to wait for SubTasks from the client [Obsolete] public void WaitForSubTasksCompletion(string taskId) Parameters taskId string The task id of the Subtask WaitForTaskCompletion(string) User method to wait for only the parent task from the client [Obsolete] public void WaitForTaskCompletion(string taskId) Parameters taskId string The task id of the task to wait for WaitForTasksCompletion(IEnumerable<string>) [Obsolete] public void WaitForTasksCompletion(IEnumerable<string> taskIds) Parameters taskIds IEnumerable<string> List of tasks to wait for"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Unified.BaseServiceExt.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Unified.BaseServiceExt.html",
    "title": "Class BaseServiceExt",
    "summary": "Class BaseServiceExt Namespace ArmoniK.DevelopmentKit.Worker.Unified Assembly ArmoniK.DevelopmentKit.Worker.Unified.dll This is the ServiceContainerBase extensions used to extend SubmitSubTasks public static class BaseServiceExt Inheritance object BaseServiceExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SubmitTaskWithDependencies<T>(BaseService<T>, byte[], IList<string>, bool, int, TaskOptions) The method to submit One task with dependencies tasks. This task will wait for to start until all dependencies are completed successfully public static string SubmitTaskWithDependencies<T>(this BaseService<T> serviceContainerBase, byte[] payload, IList<string> dependencies, bool resultForParent = false, int maxRetries = 5, TaskOptions taskOptions = null) Parameters serviceContainerBase BaseService<T> payload byte[] The payload to submit dependencies IList<string> A list of task Id in dependence of this created task resultForParent bool maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns string return the taskId of the created task Type Parameters T SubmitTask<T>(BaseService<T>, byte[], int, TaskOptions) User method to submit task from the service public static string SubmitTask<T>(this BaseService<T> serviceContainerBase, byte[] payload, int maxRetries = 5, TaskOptions taskOptions = null) Parameters serviceContainerBase BaseService<T> payload byte[] The user payload to execute. Generally used for subtasking. maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns string Type Parameters T"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Unified.Exceptions.UnifiedException.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Unified.Exceptions.UnifiedException.html",
    "title": "Class UnifiedException",
    "summary": "Class UnifiedException Namespace ArmoniK.DevelopmentKit.Worker.Unified.Exceptions Assembly ArmoniK.DevelopmentKit.Worker.Unified.dll The exception class for Server side reporting Grid Error public class UnifiedException : Exception, ISerializable Inheritance object Exception UnifiedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors UnifiedException(string) The constructor in string message in parameters public UnifiedException(string message) Parameters message string the message to include in the exception UnifiedException(string, Exception) The constructor with Message and Exception public UnifiedException(string message, Exception e) Parameters message string The string message in the new exception e Exception the inner exception"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Unified.Exceptions.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Unified.Exceptions.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Worker.Unified.Exceptions",
    "summary": "Namespace ArmoniK.DevelopmentKit.Worker.Unified.Exceptions Classes UnifiedException The exception class for Server side reporting Grid Error"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Unified.GridWorker.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Unified.GridWorker.html",
    "title": "Class GridWorker",
    "summary": "Class GridWorker Namespace ArmoniK.DevelopmentKit.Worker.Unified Assembly ArmoniK.DevelopmentKit.Worker.Unified.dll public class GridWorker : IGridWorker, IDisposable Inheritance object GridWorker Implements IGridWorker IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GridWorker(IConfiguration, ILoggerFactory) public GridWorker(IConfiguration configuration, ILoggerFactory factory) Parameters configuration IConfiguration factory ILoggerFactory Properties Configuration public IConfiguration Configuration { get; set; } Property Value IConfiguration Configurations public IConfiguration Configurations { get; set; } Property Value IConfiguration GridAppName public string GridAppName { get; set; } Property Value string GridAppNamespace public string GridAppNamespace { get; set; } Property Value string GridAppVersion public string GridAppVersion { get; set; } Property Value string GridServiceName public string GridServiceName { get; set; } Property Value string LoggerFactory public ILoggerFactory LoggerFactory { get; set; } Property Value ILoggerFactory ServiceClass public object ServiceClass { get; set; } Property Value object SessionId public Session SessionId { get; set; } Property Value Session TaskOptions public TaskOptions TaskOptions { get; set; } Property Value TaskOptions Methods Configure(IConfiguration, TaskOptions, IAppsLoader) public void Configure(IConfiguration configuration, TaskOptions clientOptions, IAppsLoader appsLoader) Parameters configuration IConfiguration clientOptions TaskOptions appsLoader IAppsLoader DestroyService() public void DestroyService() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources public void Dispose() Execute(ITaskHandler) public byte[] Execute(ITaskHandler taskHandler) Parameters taskHandler ITaskHandler Returns byte[] InitializeSessionWorker(Session, TaskOptions) public void InitializeSessionWorker(Session session, TaskOptions requestTaskOptions) Parameters session Session requestTaskOptions TaskOptions OnCreateService() public void OnCreateService() OnDestroyService() public void OnDestroyService() OnSessionEnter(Session) The internal function onSessionEnter to openSession for clientService under GridWorker public void OnSessionEnter(Session session) Parameters session Session OnSessionLeave() public void OnSessionLeave() SessionFinalize() public void SessionFinalize()"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Unified.ILoggerConfiguration.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Unified.ILoggerConfiguration.html",
    "title": "Interface ILoggerConfiguration",
    "summary": "Interface ILoggerConfiguration Namespace ArmoniK.DevelopmentKit.Worker.Unified Assembly ArmoniK.DevelopmentKit.Worker.Unified.dll implementation of this interface in TaskWorkerService or your own implementation allows to have a logger configured automatically by the GridWorker public interface ILoggerConfiguration Methods ConfigureLogger(IConfiguration) The configure method is an internal call to prepare the ServiceContainer. Its holds several configuration coming from the Client call void ConfigureLogger(IConfiguration configuration) Parameters configuration IConfiguration The appSettings.json configuration prepared during the deployment"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Unified.ISessionConfiguration.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Unified.ISessionConfiguration.html",
    "title": "Interface ISessionConfiguration",
    "summary": "Interface ISessionConfiguration Namespace ArmoniK.DevelopmentKit.Worker.Unified Assembly ArmoniK.DevelopmentKit.Worker.Unified.dll implementation of this interface in TaskWorkerService or your own implementation allows to have the ArmoniK.Api.gRPC.V1.TaskOptions configured automatically by the GridWorker public interface ISessionConfiguration Properties SessionId Get or Set SubSessionId object stored during the call of SubmitTask, SubmitSubTask, SubmitSubTaskWithDependencies or WaitForCompletion, WaitForSubTaskCompletion or GetResults Session SessionId { get; set; } Property Value Session Methods ConfigureSession(Session, TaskOptions) Prepare Session and create SessionService with the specific session void ConfigureSession(Session sessionId, TaskOptions requestTaskOptions) Parameters sessionId Session The ID of the current session requestTaskOptions TaskOptions The TaskOptions of the current session OnCreateService(ServiceContext) The middleware triggers the invocation of this handler just after a Service Instance is started. The application developer must put any service initialization into this handler. Default implementation does nothing. void OnCreateService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnDestroyService(ServiceContext) The middleware triggers the invocation of this handler just before a Service Instance is destroyed. This handler should do any cleanup for any resources that were used in the onCreateService() method. void OnDestroyService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnSessionEnter(SessionContext) The internal function onSessionEnter to openSession for clientService under GridWorker void OnSessionEnter(SessionContext sessionContext) Parameters sessionContext SessionContext OnSessionLeave(SessionContext) The middleware triggers the invocation of this handler to unbind the Service Instance from its owning Session. This handler should do any cleanup for any resources that were used in the onSessionEnter() method. void OnSessionLeave(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID."
  },
  "api/ArmoniK.DevelopmentKit.Worker.Unified.ISessionServiceConfiguration.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Unified.ISessionServiceConfiguration.html",
    "title": "Interface ISessionServiceConfiguration",
    "summary": "Interface ISessionServiceConfiguration Namespace ArmoniK.DevelopmentKit.Worker.Unified Assembly ArmoniK.DevelopmentKit.Worker.Unified.dll implementation of this interface in TaskWorkerService or your own implementation allows to have the SessionPollingService configured automatically by the GridWorker public interface ISessionServiceConfiguration Methods ConfigureSessionService(ITaskHandler) Allow the initialization of SessionPollingService void ConfigureSessionService(ITaskHandler taskHandler) Parameters taskHandler ITaskHandler"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Unified.ITaskContextConfiguration.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Unified.ITaskContextConfiguration.html",
    "title": "Interface ITaskContextConfiguration",
    "summary": "Interface ITaskContextConfiguration Namespace ArmoniK.DevelopmentKit.Worker.Unified Assembly ArmoniK.DevelopmentKit.Worker.Unified.dll implementation of this interface in TaskWorkerService or your own implementation allows to have the TaskContext configured automatically by the GridWorker public interface ITaskContextConfiguration Properties TaskContext Allow the initialization of TaskContext TaskContext TaskContext { get; set; } Property Value TaskContext"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Unified.ITaskOptionsConfiguration.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Unified.ITaskOptionsConfiguration.html",
    "title": "Interface ITaskOptionsConfiguration",
    "summary": "Interface ITaskOptionsConfiguration Namespace ArmoniK.DevelopmentKit.Worker.Unified Assembly ArmoniK.DevelopmentKit.Worker.Unified.dll implementation of this interface in TaskWorkerService or your own implementation allows to have the ArmoniK.Api.gRPC.V1.TaskOptions configured automatically by the GridWorker public interface ITaskOptionsConfiguration Methods ConfigureTaskOptions(TaskOptions) The configure method is an internal call to prepare the ServiceContainer. Its holds TaskOptions coming from the Client call void ConfigureTaskOptions(TaskOptions clientOptions) Parameters clientOptions TaskOptions All data coming from Client within TaskOptions"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Unified.ServiceContext.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Unified.ServiceContext.html",
    "title": "Class ServiceContext",
    "summary": "Class ServiceContext Namespace ArmoniK.DevelopmentKit.Worker.Unified Assembly ArmoniK.DevelopmentKit.Worker.Unified.dll public class ServiceContext Inheritance object ServiceContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AppNamespace public string AppNamespace { get; set; } Property Value string ApplicationName public string ApplicationName { get; set; } Property Value string ClientLibVersion public string ClientLibVersion { get; set; } Property Value string ServiceName public string ServiceName { get; set; } Property Value string"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Unified.SessionContext.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Unified.SessionContext.html",
    "title": "Class SessionContext",
    "summary": "Class SessionContext Namespace ArmoniK.DevelopmentKit.Worker.Unified Assembly ArmoniK.DevelopmentKit.Worker.Unified.dll Container for the information associated with a particular Session. Such information may be required during the servicing of a task from a Session. public class SessionContext Inheritance object SessionContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields TimeRemoteDebug public int TimeRemoteDebug Field Value int Properties ClientLibVersion public string ClientLibVersion { get; set; } Property Value string IsDebugMode public bool IsDebugMode { get; } Property Value bool SessionId public string SessionId { get; set; } Property Value string"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Unified.SessionPollingService.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Unified.SessionPollingService.html",
    "title": "Class SessionPollingService",
    "summary": "Class SessionPollingService Namespace ArmoniK.DevelopmentKit.Worker.Unified Assembly ArmoniK.DevelopmentKit.Worker.Unified.dll The class SessionService will be create each time the function CreateSession or OpenSession will be called by client or by the worker. public class SessionPollingService Inheritance object SessionPollingService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods SessionServiceExt.SubmitTask(SessionPollingService, byte[], int, TaskOptions) SessionServiceExt.SubmitTaskWithDependencies(SessionPollingService, byte[], IList<string>, int, TaskOptions) Constructors SessionPollingService(ILoggerFactory, ITaskHandler) Ctor to instantiate a new SessionService This is an object to send task or get Results from a session public SessionPollingService(ILoggerFactory loggerFactory, ITaskHandler taskHandler) Parameters loggerFactory ILoggerFactory taskHandler ITaskHandler Fields TaskId2OutputId Map between ids of task and their results id after task submission public readonly Dictionary<string, string> TaskId2OutputId Field Value Dictionary<string, string> Properties SessionId Only used for internal DO NOT USED IT Get or Set SessionId object stored during the call of SubmitTask, SubmitSubTask, SubmitSubTaskWithDependencies or WaitForCompletion, WaitForSubTaskCompletion or GetResults public Session SessionId { get; } Property Value Session TaskHandler The taskHandler to communicate with polling agent public ITaskHandler TaskHandler { get; set; } Property Value ITaskHandler TaskOptions Set or Get TaskOptions with inside MaxDuration, Priority, AppName, VersionName and AppNamespace public TaskOptions TaskOptions { get; set; } Property Value TaskOptions Methods GetDependenciesResult(string) Get the dependencies data from previous executed and completed tasks public byte[] GetDependenciesResult(string id) Parameters id string Returns byte[] returns a specific data from the taskId GetDependenciesResults() public IDictionary<string, byte[]> GetDependenciesResults() Returns IDictionary<string, byte[]> SubmitTasks(IEnumerable<byte[]>, int, TaskOptions) User method to submit task from the client Need a client Service. In case of ServiceContainer pollingAgentService can be null until the OpenSession is called public IEnumerable<string> SubmitTasks(IEnumerable<byte[]> payloads, int maxRetries = 5, TaskOptions taskOptions = null) Parameters payloads IEnumerable<byte[]> The user payload list to execute. General used for subTasking. maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns IEnumerable<string> SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, bool, int, TaskOptions) The method to submit several tasks with dependencies tasks. This task will wait for to start until all dependencies are completed successfully public IEnumerable<string> SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>> payloadsWithDependencies, bool resultForParent = false, int maxRetries = 5, TaskOptions taskOptions = null) Parameters payloadsWithDependencies IEnumerable<Tuple<byte[], IList<string>>> A list of Tuple(taskId, Payload) in dependence of those created tasks resultForParent bool maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns IEnumerable<string> return a list of taskIds of the created tasks ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/ArmoniK.DevelopmentKit.Worker.Unified.SessionServiceExt.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Unified.SessionServiceExt.html",
    "title": "Class SessionServiceExt",
    "summary": "Class SessionServiceExt Namespace ArmoniK.DevelopmentKit.Worker.Unified Assembly ArmoniK.DevelopmentKit.Worker.Unified.dll The SessionService Extension to single task creation public static class SessionServiceExt Inheritance object SessionServiceExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SubmitTask(SessionPollingService, byte[], int, TaskOptions) User method to submit task from the client public static string SubmitTask(this SessionPollingService client, byte[] payload, int maxRetries = 5, TaskOptions taskOptions = null) Parameters client SessionPollingService The client instance for extension payload byte[] The user payload to execute. maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns string SubmitTaskWithDependencies(SessionPollingService, byte[], IList<string>, int, TaskOptions) The method to submit One task with dependencies tasks. This task will wait for to start until all dependencies are completed successfully public static string SubmitTaskWithDependencies(this SessionPollingService client, byte[] payload, IList<string> dependencies, int maxRetries = 5, TaskOptions taskOptions = null) Parameters client SessionPollingService The client instance for extension payload byte[] The payload to submit dependencies IList<string> A list of task Id in dependence of this created task maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns string return the taskId of the created task"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Unified.TaskContext.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Unified.TaskContext.html",
    "title": "Class TaskContext",
    "summary": "Class TaskContext Namespace ArmoniK.DevelopmentKit.Worker.Unified Assembly ArmoniK.DevelopmentKit.Worker.Unified.dll Provides the context for the task that is bound to the given service invocation public class TaskContext Inheritance object TaskContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Payload public byte[] Payload Field Value byte[] Properties ClientOptions public IDictionary<string, string> ClientOptions { get; set; } Property Value IDictionary<string, string> DataDependencies public IReadOnlyDictionary<string, byte[]> DataDependencies { get; set; } Property Value IReadOnlyDictionary<string, byte[]> DependenciesTaskIds public IEnumerable<string> DependenciesTaskIds { get; set; } Property Value IEnumerable<string> SessionId public string SessionId { get; set; } Property Value string TaskId public string TaskId { get; set; } Property Value string TaskInput The customer payload to deserialize by the customer public byte[] TaskInput { get; set; } Property Value byte[]"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Unified.TaskSubmitterWorkerService.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Unified.TaskSubmitterWorkerService.html",
    "title": "Class TaskSubmitterWorkerService",
    "summary": "Class TaskSubmitterWorkerService Namespace ArmoniK.DevelopmentKit.Worker.Unified Assembly ArmoniK.DevelopmentKit.Worker.Unified.dll This is an abstract class that have to be implemented by each class who needs context or tasks submission on worker side See an example in the project ArmoniK.Samples in the sub project https://github.com/aneoconsulting/ArmoniK.Samples/tree/main/Samples/UnifiedAPI ArmoniK.Samples.Worker/Services/ServiceApps.cs [PublicAPI] [Obsolete(\"TaskSubmitterWorkerService has been replaced by TaskWorkerService\")] public abstract class TaskSubmitterWorkerService : TaskWorkerService, ITaskContextConfiguration, ISessionServiceConfiguration, ITaskOptionsConfiguration, ISessionConfiguration, ILoggerConfiguration Inheritance object TaskWorkerService TaskSubmitterWorkerService Implements ITaskContextConfiguration ISessionServiceConfiguration ITaskOptionsConfiguration ISessionConfiguration ILoggerConfiguration Inherited Members TaskWorkerService.Logger TaskWorkerService.TaskId2OutputId TaskWorkerService.TaskOptions TaskWorkerService.Configuration TaskWorkerService.LoggerFactory TaskWorkerService.ConfigureLogger(IConfiguration) TaskWorkerService.SessionId TaskWorkerService.OnCreateService(ServiceContext) TaskWorkerService.OnDestroyService(ServiceContext) TaskWorkerService.OnSessionEnter(SessionContext) TaskWorkerService.OnSessionLeave(SessionContext) TaskWorkerService.ConfigureSession(Session, TaskOptions) TaskWorkerService.ConfigureSessionService(ITaskHandler) TaskWorkerService.TaskContext TaskWorkerService.ConfigureTaskOptions(TaskOptions) TaskWorkerService.SubmitTasks(IEnumerable<byte[]>, int, TaskOptions) TaskWorkerService.SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, bool, int, TaskOptions) TaskWorkerService.SubmitTask(byte[], int, TaskOptions) TaskWorkerService.SubmitTask(string, object[], int, TaskOptions) TaskWorkerService.SubmitTaskWithDependencie(byte[], IList<string>, bool, int, TaskOptions) TaskWorkerService.SubmitTaskWithDependencies(string, object[], IList<string>, bool, int, TaskOptions) TaskWorkerService.GetDependenciesResult(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks WARNING : TaskSubmitterWorkerService has been replaced by TaskWorkerService. This class will stay in 2.12 for compatibility reasons This class will be removed in armonik 2.13"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Unified.TaskWorkerService.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Unified.TaskWorkerService.html",
    "title": "Class TaskWorkerService",
    "summary": "Class TaskWorkerService Namespace ArmoniK.DevelopmentKit.Worker.Unified Assembly ArmoniK.DevelopmentKit.Worker.Unified.dll This is an abstract class that have to be implemented by each class who needs context or tasks submission on worker side See an example in the project ArmoniK.Samples in the sub project https://github.com/aneoconsulting/ArmoniK.Samples/tree/main/Samples/UnifiedAPI ArmoniK.Samples.Worker/Services/ServiceApps.cs [PublicAPI] public abstract class TaskWorkerService : ITaskContextConfiguration, ISessionServiceConfiguration, ITaskOptionsConfiguration, ISessionConfiguration, ILoggerConfiguration Inheritance object TaskWorkerService Implements ITaskContextConfiguration ISessionServiceConfiguration ITaskOptionsConfiguration ISessionConfiguration ILoggerConfiguration Derived TaskSubmitterWorkerService AggregationPriority SubtaskingTreeUnifiedApiWorker CheckUnifiedApiWorker ServiceApps Priority Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TaskWorkerService() public TaskWorkerService() TaskWorkerService(ILoggerFactory) public TaskWorkerService(ILoggerFactory loggerFactory) Parameters loggerFactory ILoggerFactory The factory logger to create logger Properties Configuration Get or Set Configuration public IConfiguration Configuration { get; set; } Property Value IConfiguration Logger Get access to Logger with Logger.LoggingScope. public ILogger Logger { get; set; } Property Value ILogger LoggerFactory The logger factory to create new Logger in sub class caller public ILoggerFactory LoggerFactory { get; set; } Property Value ILoggerFactory SessionId Get or Set SubSessionId object stored during the call of SubmitTask, SubmitSubTask, SubmitSubTaskWithDependencies or WaitForCompletion, WaitForSubTaskCompletion or GetResults public Session SessionId { get; set; } Property Value Session TaskContext Allow the initialization of TaskContext public TaskContext TaskContext { get; set; } Property Value TaskContext TaskId2OutputId Map between ids of task and their results id after task submission public Dictionary<string, string> TaskId2OutputId { get; } Property Value Dictionary<string, string> TaskOptions Return TaskOption coming from Client side public TaskOptions TaskOptions { get; set; } Property Value TaskOptions Methods ConfigureLogger(IConfiguration) The configure method is an internal call to prepare the ServiceContainer. Its holds several configuration coming from the Client call public void ConfigureLogger(IConfiguration configuration) Parameters configuration IConfiguration The appSettings.json configuration prepared during the deployment ConfigureSession(Session, TaskOptions) Prepare Session and create SessionService with the specific session public void ConfigureSession(Session sessionId, TaskOptions requestTaskOptions) Parameters sessionId Session The ID of the current session requestTaskOptions TaskOptions Default TaskOption for the current session ConfigureSessionService(ITaskHandler) Allow the initialization of SessionPollingService public void ConfigureSessionService(ITaskHandler taskHandler) Parameters taskHandler ITaskHandler ConfigureTaskOptions(TaskOptions) The configure method is an internal call to prepare the ServiceContainer. Its holds TaskOptions coming from the Client call public void ConfigureTaskOptions(TaskOptions clientOptions) Parameters clientOptions TaskOptions All data coming from Client within TaskOptions GetDependenciesResult(string) Get Result from compute reply public byte[] GetDependenciesResult(string taskId) Parameters taskId string The task Id to get the result Returns byte[] return the customer payload OnCreateService(ServiceContext) The middleware triggers the invocation of this handler just after a Service Instance is started. The application developer must put any service initialization into this handler. Default implementation does nothing. public virtual void OnCreateService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnDestroyService(ServiceContext) The middleware triggers the invocation of this handler just before a Service Instance is destroyed. This handler should do any cleanup for any resources that were used in the onCreateService() method. public virtual void OnDestroyService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnSessionEnter(SessionContext) The internal function onSessionEnter to openSession for clientService under GridWorker public virtual void OnSessionEnter(SessionContext sessionContext) Parameters sessionContext SessionContext OnSessionLeave(SessionContext) The middleware triggers the invocation of this handler to unbind the Service Instance from its owning Session. This handler should do any cleanup for any resources that were used in the onSessionEnter() method. public virtual void OnSessionLeave(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID. SubmitTask(byte[], int, TaskOptions) User method to submit task from the service public string SubmitTask(byte[] payload, int maxRetries = 5, TaskOptions taskOptions = null) Parameters payload byte[] The user payload to execute. Generally used for subtasking. maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns string SubmitTask(string, object[], int, TaskOptions) User method to submit task from the service public string SubmitTask(string methodName, object[] arguments, int maxRetries = 5, TaskOptions taskOptions = null) Parameters methodName string The name of the method you want to call It is case sensitive arguments object[] The arguments of the method to call maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns string SubmitTaskWithDependencie(byte[], IList<string>, bool, int, TaskOptions) The method to submit One task with dependencies tasks. This task will wait for to start until all dependencies are completed successfully public string SubmitTaskWithDependencie(byte[] payload, IList<string> dependencies, bool resultForParent = false, int maxRetries = 5, TaskOptions taskOptions = null) Parameters payload byte[] The payload to submit dependencies IList<string> A list of task Id in dependence of this created task resultForParent bool maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns string return the taskId of the created task SubmitTaskWithDependencies(string, object[], IList<string>, bool, int, TaskOptions) The method to submit One task with dependencies tasks. This task will wait for to start until all dependencies are completed successfully public string SubmitTaskWithDependencies(string methodName, object[] arguments, IList<string> dependencies, bool resultForParent = false, int maxRetries = 5, TaskOptions taskOptions = null) Parameters methodName string arguments object[] The arguments to submit dependencies IList<string> A list of task Id in dependence of this created task resultForParent bool maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns string return the taskId of the created task SubmitTasks(IEnumerable<byte[]>, int, TaskOptions) User method to submit task from the service public IEnumerable<string> SubmitTasks(IEnumerable<byte[]> payloads, int maxRetries = 5, TaskOptions taskOptions = null) Parameters payloads IEnumerable<byte[]> The user payload list to execute. Generally used for subTasking. maxRetries int The number of retry before fail to submit task. Default = 5 retries taskOptions TaskOptions TaskOptions argument to override default taskOptions in Session. If non null it will override the default taskOptions in SessionService for client or given by taskHandler for worker Returns IEnumerable<string> SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, bool, int, TaskOptions) The method to submit several tasks with dependencies tasks. This task will wait until all dependencies are completed successfully before starting public IEnumerable<string> SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>> payloadWithDependencies, bool resultForParent = false, int maxRetries = 5, TaskOptions taskOptions = null) Parameters payloadWithDependencies IEnumerable<Tuple<byte[], IList<string>>> A list of Tuple(taskId, Payload) in dependence of those created tasks resultForParent bool Transmit the result to parent task if true maxRetries int The number of retry before fail to submit task taskOptions TaskOptions TaskOptions overrides if non null override default in Sessions Returns IEnumerable<string> return a list of taskIds of the created tasks"
  },
  "api/ArmoniK.DevelopmentKit.Worker.Unified.html": {
    "href": "api/ArmoniK.DevelopmentKit.Worker.Unified.html",
    "title": "Namespace ArmoniK.DevelopmentKit.Worker.Unified",
    "summary": "Namespace ArmoniK.DevelopmentKit.Worker.Unified Classes BaseServiceExt This is the ServiceContainerBase extensions used to extend SubmitSubTasks BaseService<T> The Class ServiceContainerBase (Old name was IServiceContainer) is an abstract class that have to be implemented by each class wanted to be loaded as new Application See an example in the project ArmoniK.Samples in the sub project https://github.com/aneoconsulting/ArmoniK.Samples/tree/main/Samples/SymphonyLike Samples.ArmoniK.Sample.SymphonyPackages GridWorker ServiceContext SessionContext Container for the information associated with a particular Session. Such information may be required during the servicing of a task from a Session. SessionPollingService The class SessionService will be create each time the function CreateSession or OpenSession will be called by client or by the worker. SessionServiceExt The SessionService Extension to single task creation TaskContext Provides the context for the task that is bound to the given service invocation TaskSubmitterWorkerService This is an abstract class that have to be implemented by each class who needs context or tasks submission on worker side See an example in the project ArmoniK.Samples in the sub project https://github.com/aneoconsulting/ArmoniK.Samples/tree/main/Samples/UnifiedAPI ArmoniK.Samples.Worker/Services/ServiceApps.cs TaskWorkerService This is an abstract class that have to be implemented by each class who needs context or tasks submission on worker side See an example in the project ArmoniK.Samples in the sub project https://github.com/aneoconsulting/ArmoniK.Samples/tree/main/Samples/UnifiedAPI ArmoniK.Samples.Worker/Services/ServiceApps.cs Interfaces ILoggerConfiguration implementation of this interface in TaskWorkerService or your own implementation allows to have a logger configured automatically by the GridWorker ISessionConfiguration implementation of this interface in TaskWorkerService or your own implementation allows to have the ArmoniK.Api.gRPC.V1.TaskOptions configured automatically by the GridWorker ISessionServiceConfiguration implementation of this interface in TaskWorkerService or your own implementation allows to have the SessionPollingService configured automatically by the GridWorker ITaskContextConfiguration implementation of this interface in TaskWorkerService or your own implementation allows to have the TaskContext configured automatically by the GridWorker ITaskOptionsConfiguration implementation of this interface in TaskWorkerService or your own implementation allows to have the ArmoniK.Api.gRPC.V1.TaskOptions configured automatically by the GridWorker"
  },
  "api/ArmoniK.EndToEndTests.Client.Program.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Program.html",
    "title": "Class Program",
    "summary": "Class Program Namespace ArmoniK.EndToEndTests.Client Assembly ArmoniK.EndToEndTests.Client.dll public class Program Inheritance object Program Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetMethods(Type) public static MethodInfo[] GetMethods(Type type) Parameters type Type Returns MethodInfo[]"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.AggregationPriority.AggregationPriorityTest.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.AggregationPriority.AggregationPriorityTest.html",
    "title": "Class AggregationPriorityTest",
    "summary": "Class AggregationPriorityTest Namespace ArmoniK.EndToEndTests.Client.Tests.AggregationPriority Assembly ArmoniK.EndToEndTests.Client.dll AggregationPriorityTest is a class that tests the AggregationPriority application. public class AggregationPriorityTest Inheritance object AggregationPriorityTest Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Check_That_Result_has_expected_value(int) This method checks that the result of a matrix computation has the expected value. [TestCase(20)] [Ignore(\"Too big\")] public void Check_That_Result_has_expected_value(int squareMatrixSize) Parameters squareMatrixSize int The size of the square matrix. Check_That_serialazation_is_ok() Check_That_serialazation_is_ok is a method that tests the serialization of TaskResult. [Test] public void Check_That_serialazation_is_ok() Cleanup() Cleanup is a method that cleans up after the test. [TearDown] public void Cleanup() Setup() Setup is a method that sets up the test. [SetUp] public void Setup()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.AggregationPriority.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.AggregationPriority.html",
    "title": "Namespace ArmoniK.EndToEndTests.Client.Tests.AggregationPriority",
    "summary": "Namespace ArmoniK.EndToEndTests.Client.Tests.AggregationPriority Classes AggregationPriorityTest AggregationPriorityTest is a class that tests the AggregationPriority application."
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckMultipleTasks.CheckMultipleTasksClient.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckMultipleTasks.CheckMultipleTasksClient.html",
    "title": "Class CheckMultipleTasksClient",
    "summary": "Class CheckMultipleTasksClient Namespace ArmoniK.EndToEndTests.Client.Tests.CheckMultipleTasks Assembly ArmoniK.EndToEndTests.Client.dll public class CheckMultipleTasksClient : ClientBaseTest<CheckMultipleTasksClient> Inheritance object ClientBaseTest<CheckMultipleTasksClient> CheckMultipleTasksClient Inherited Members ClientBaseTest<CheckMultipleTasksClient>.Configuration ClientBaseTest<CheckMultipleTasksClient>.Log ClientBaseTest<CheckMultipleTasksClient>.LoggerFactory ClientBaseTest<CheckMultipleTasksClient>.InitializeTaskOptions() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors CheckMultipleTasksClient(IConfiguration, ILoggerFactory) public CheckMultipleTasksClient(IConfiguration configuration, ILoggerFactory loggerFactory) Parameters configuration IConfiguration loggerFactory ILoggerFactory Methods EntryPoint() public override void EntryPoint()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckMultipleTasks.MultipleTasksClientTest.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckMultipleTasks.MultipleTasksClientTest.html",
    "title": "Class MultipleTasksClientTest",
    "summary": "Class MultipleTasksClientTest Namespace ArmoniK.EndToEndTests.Client.Tests.CheckMultipleTasks Assembly ArmoniK.EndToEndTests.Client.dll public class MultipleTasksClientTest Inheritance object MultipleTasksClientTest Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Cleanup() [TearDown] public void Cleanup() MultipleTasksClient(int) [TestCase(1)] public void MultipleTasksClient(int nbTasks) Parameters nbTasks int Setup() [SetUp] public void Setup()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckMultipleTasks.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckMultipleTasks.html",
    "title": "Namespace ArmoniK.EndToEndTests.Client.Tests.CheckMultipleTasks",
    "summary": "Namespace ArmoniK.EndToEndTests.Client.Tests.CheckMultipleTasks Classes CheckMultipleTasksClient MultipleTasksClientTest"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckRandomException.CheckRandomExceptionSymClient.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckRandomException.CheckRandomExceptionSymClient.html",
    "title": "Class CheckRandomExceptionSymClient",
    "summary": "Class CheckRandomExceptionSymClient Namespace ArmoniK.EndToEndTests.Client.Tests.CheckRandomException Assembly ArmoniK.EndToEndTests.Client.dll [UsedImplicitly] public class CheckRandomExceptionSymClient : ClientBaseTest<CheckRandomExceptionSymClient> Inheritance object ClientBaseTest<CheckRandomExceptionSymClient> CheckRandomExceptionSymClient Inherited Members ClientBaseTest<CheckRandomExceptionSymClient>.Configuration ClientBaseTest<CheckRandomExceptionSymClient>.Log ClientBaseTest<CheckRandomExceptionSymClient>.LoggerFactory ClientBaseTest<CheckRandomExceptionSymClient>.InitializeTaskOptions() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors CheckRandomExceptionSymClient(IConfiguration, ILoggerFactory) public CheckRandomExceptionSymClient(IConfiguration configuration, ILoggerFactory loggerFactory) Parameters configuration IConfiguration loggerFactory ILoggerFactory Methods EntryPoint() public override void EntryPoint()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckRandomException.RandomExceptionSymClientTest.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckRandomException.RandomExceptionSymClientTest.html",
    "title": "Class RandomExceptionSymClientTest",
    "summary": "Class RandomExceptionSymClientTest Namespace ArmoniK.EndToEndTests.Client.Tests.CheckRandomException Assembly ArmoniK.EndToEndTests.Client.dll public class RandomExceptionSymClientTest Inheritance object RandomExceptionSymClientTest Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Check_That_Exceptions_In_A_Session_Does_Not_Affect_The_Other_Session() [Test] public void Check_That_Exceptions_In_A_Session_Does_Not_Affect_The_Other_Session() Cleanup() [TearDown] public void Cleanup() SendTaskAndGetErrorCount(byte[]) public int SendTaskAndGetErrorCount(byte[] clientPayload) Parameters clientPayload byte[] Returns int Setup() [SetUp] public void Setup()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckRandomException.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckRandomException.html",
    "title": "Namespace ArmoniK.EndToEndTests.Client.Tests.CheckRandomException",
    "summary": "Namespace ArmoniK.EndToEndTests.Client.Tests.CheckRandomException Classes CheckRandomExceptionSymClient RandomExceptionSymClientTest"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckSessionUniqCallback.CheckSessionUniqCallbackClient.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckSessionUniqCallback.CheckSessionUniqCallbackClient.html",
    "title": "Class CheckSessionUniqCallbackClient",
    "summary": "Class CheckSessionUniqCallbackClient Namespace ArmoniK.EndToEndTests.Client.Tests.CheckSessionUniqCallback Assembly ArmoniK.EndToEndTests.Client.dll public class CheckSessionUniqCallbackClient : ClientBaseTest<CheckSessionUniqCallbackClient> Inheritance object ClientBaseTest<CheckSessionUniqCallbackClient> CheckSessionUniqCallbackClient Inherited Members ClientBaseTest<CheckSessionUniqCallbackClient>.Configuration ClientBaseTest<CheckSessionUniqCallbackClient>.Log ClientBaseTest<CheckSessionUniqCallbackClient>.LoggerFactory ClientBaseTest<CheckSessionUniqCallbackClient>.InitializeTaskOptions() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors CheckSessionUniqCallbackClient(IConfiguration, ILoggerFactory) public CheckSessionUniqCallbackClient(IConfiguration configuration, ILoggerFactory loggerFactory) Parameters configuration IConfiguration loggerFactory ILoggerFactory Methods EntryPoint() public override void EntryPoint()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckSessionUniqCallback.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckSessionUniqCallback.html",
    "title": "Namespace ArmoniK.EndToEndTests.Client.Tests.CheckSessionUniqCallback",
    "summary": "Namespace ArmoniK.EndToEndTests.Client.Tests.CheckSessionUniqCallback Classes CheckSessionUniqCallbackClient"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTreeUnifiedApi.SubtaskingTreeUnifiedApiClient.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTreeUnifiedApi.SubtaskingTreeUnifiedApiClient.html",
    "title": "Class SubtaskingTreeUnifiedApiClient",
    "summary": "Class SubtaskingTreeUnifiedApiClient Namespace ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTreeUnifiedApi Assembly ArmoniK.EndToEndTests.Client.dll public class SubtaskingTreeUnifiedApiClient : ClientBaseTest<SubtaskingTreeUnifiedApiClient>, IServiceInvocationHandler Inheritance object ClientBaseTest<SubtaskingTreeUnifiedApiClient> SubtaskingTreeUnifiedApiClient Implements IServiceInvocationHandler Inherited Members ClientBaseTest<SubtaskingTreeUnifiedApiClient>.Configuration ClientBaseTest<SubtaskingTreeUnifiedApiClient>.Log ClientBaseTest<SubtaskingTreeUnifiedApiClient>.LoggerFactory ClientBaseTest<SubtaskingTreeUnifiedApiClient>.InitializeTaskOptions() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors SubtaskingTreeUnifiedApiClient(IConfiguration, ILoggerFactory) public SubtaskingTreeUnifiedApiClient(IConfiguration configuration, ILoggerFactory loggerFactory) Parameters configuration IConfiguration loggerFactory ILoggerFactory Methods EntryPoint() public override void EntryPoint() HandleError(ServiceInvocationException, string) The callBack method which has to be implemented to retrieve error or exception public void HandleError(ServiceInvocationException e, string taskId) Parameters e ServiceInvocationException The exception sent to the client from the control plane taskId string The task identifier which has invoked the error callBack HandleResponse(object, string) The callBack method which has to be implemented to retrieve response from the server public void HandleResponse(object response, string taskId) Parameters response object The object received from the server as result the method called by the client taskId string The task identifier which has invoked the response callBack"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTreeUnifiedApi.SubtaskingTreeUnifiedApiClientTest.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTreeUnifiedApi.SubtaskingTreeUnifiedApiClientTest.html",
    "title": "Class SubtaskingTreeUnifiedApiClientTest",
    "summary": "Class SubtaskingTreeUnifiedApiClientTest Namespace ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTreeUnifiedApi Assembly ArmoniK.EndToEndTests.Client.dll public class SubtaskingTreeUnifiedApiClientTest Inheritance object SubtaskingTreeUnifiedApiClientTest Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Check_That_Subtasking_Is_Working_With_Unified_SDK(int, int) [TestCase(1, 2)] [TestCase(32, 2)] [TestCase(128, 4)] public void Check_That_Subtasking_Is_Working_With_Unified_SDK(int maxNumberToSum, int subtaskSplitCount) Parameters maxNumberToSum int subtaskSplitCount int Cleanup() [TearDown] public void Cleanup() Setup() [SetUp] public void Setup()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTreeUnifiedApi.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTreeUnifiedApi.html",
    "title": "Namespace ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTreeUnifiedApi",
    "summary": "Namespace ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTreeUnifiedApi Classes SubtaskingTreeUnifiedApiClient SubtaskingTreeUnifiedApiClientTest"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTree_SymphonySDK.SimpleComputeNSubtaskingClientTest.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTree_SymphonySDK.SimpleComputeNSubtaskingClientTest.html",
    "title": "Class SimpleComputeNSubtaskingClientTest",
    "summary": "Class SimpleComputeNSubtaskingClientTest Namespace ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTree_SymphonySDK Assembly ArmoniK.EndToEndTests.Client.dll public class SimpleComputeNSubtaskingClientTest Inheritance object SimpleComputeNSubtaskingClientTest Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Check_That_Basic_Subtasking_Is_Working_With_Symphony_SDK() [Test] public void Check_That_Basic_Subtasking_Is_Working_With_Symphony_SDK() Cleanup() [TearDown] public void Cleanup() Setup() [SetUp] public void Setup()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTree_SymphonySDK.SubtaskingTreeClient.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTree_SymphonySDK.SubtaskingTreeClient.html",
    "title": "Class SubtaskingTreeClient",
    "summary": "Class SubtaskingTreeClient Namespace ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTree_SymphonySDK Assembly ArmoniK.EndToEndTests.Client.dll public class SubtaskingTreeClient : ClientBaseTest<SubtaskingTreeClient> Inheritance object ClientBaseTest<SubtaskingTreeClient> SubtaskingTreeClient Inherited Members ClientBaseTest<SubtaskingTreeClient>.Configuration ClientBaseTest<SubtaskingTreeClient>.Log ClientBaseTest<SubtaskingTreeClient>.LoggerFactory ClientBaseTest<SubtaskingTreeClient>.InitializeTaskOptions() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors SubtaskingTreeClient(IConfiguration, ILoggerFactory) public SubtaskingTreeClient(IConfiguration configuration, ILoggerFactory loggerFactory) Parameters configuration IConfiguration loggerFactory ILoggerFactory Methods EntryPoint() public override void EntryPoint()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTree_SymphonySDK.SubtaskingTreeClientTest.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTree_SymphonySDK.SubtaskingTreeClientTest.html",
    "title": "Class SubtaskingTreeClientTest",
    "summary": "Class SubtaskingTreeClientTest Namespace ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTree_SymphonySDK Assembly ArmoniK.EndToEndTests.Client.dll public class SubtaskingTreeClientTest Inheritance object SubtaskingTreeClientTest Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Check_That_Subtasking_Is_Working_With_Symphony_SDK(int, int) [TestCase(1, 2)] [TestCase(32, 2)] [TestCase(128, 4)] public void Check_That_Subtasking_Is_Working_With_Symphony_SDK(int maxNumberToSum, int subtaskSplitCount) Parameters maxNumberToSum int subtaskSplitCount int Cleanup() [TearDown] public void Cleanup() Setup() [SetUp] public void Setup()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTree_SymphonySDK.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTree_SymphonySDK.html",
    "title": "Namespace ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTree_SymphonySDK",
    "summary": "Namespace ArmoniK.EndToEndTests.Client.Tests.CheckSubtaskingTree_SymphonySDK Classes SimpleComputeNSubtaskingClientTest SubtaskingTreeClient SubtaskingTreeClientTest"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckTryGetResults.CheckTryGetResultClientTest.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckTryGetResults.CheckTryGetResultClientTest.html",
    "title": "Class CheckTryGetResultClientTest",
    "summary": "Class CheckTryGetResultClientTest Namespace ArmoniK.EndToEndTests.Client.Tests.CheckTryGetResults Assembly ArmoniK.EndToEndTests.Client.dll public class CheckTryGetResultClientTest Inheritance object CheckTryGetResultClientTest Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Check_That_We_Can_Launch_tasks_In_Multiple_Sessions_At_The_Same_Time() [Test] public void Check_That_We_Can_Launch_tasks_In_Multiple_Sessions_At_The_Same_Time() Cleanup() [TearDown] public void Cleanup() SendTaskAndGetPayloadResults(byte[]) public IEnumerable<ClientPayload> SendTaskAndGetPayloadResults(byte[] clientPayload) Parameters clientPayload byte[] Returns IEnumerable<ClientPayload> Setup() [SetUp] public void Setup()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckTryGetResults.CheckTryGetResultsClient.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckTryGetResults.CheckTryGetResultsClient.html",
    "title": "Class CheckTryGetResultsClient",
    "summary": "Class CheckTryGetResultsClient Namespace ArmoniK.EndToEndTests.Client.Tests.CheckTryGetResults Assembly ArmoniK.EndToEndTests.Client.dll [UsedImplicitly] public class CheckTryGetResultsClient : ClientBaseTest<CheckTryGetResultsClient> Inheritance object ClientBaseTest<CheckTryGetResultsClient> CheckTryGetResultsClient Inherited Members ClientBaseTest<CheckTryGetResultsClient>.Configuration ClientBaseTest<CheckTryGetResultsClient>.Log ClientBaseTest<CheckTryGetResultsClient>.LoggerFactory ClientBaseTest<CheckTryGetResultsClient>.InitializeTaskOptions() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors CheckTryGetResultsClient(IConfiguration, ILoggerFactory) public CheckTryGetResultsClient(IConfiguration configuration, ILoggerFactory loggerFactory) Parameters configuration IConfiguration loggerFactory ILoggerFactory Methods EntryPoint() public override void EntryPoint()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckTryGetResults.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckTryGetResults.html",
    "title": "Namespace ArmoniK.EndToEndTests.Client.Tests.CheckTryGetResults",
    "summary": "Namespace ArmoniK.EndToEndTests.Client.Tests.CheckTryGetResults Classes CheckTryGetResultClientTest CheckTryGetResultsClient"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckTypeOfSubmission.CheckAllSubmissionsClient.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckTypeOfSubmission.CheckAllSubmissionsClient.html",
    "title": "Class CheckAllSubmissionsClient",
    "summary": "Class CheckAllSubmissionsClient Namespace ArmoniK.EndToEndTests.Client.Tests.CheckTypeOfSubmission Assembly ArmoniK.EndToEndTests.Client.dll public class CheckAllSubmissionsClient : ClientBaseTest<CheckAllSubmissionsClient> Inheritance object ClientBaseTest<CheckAllSubmissionsClient> CheckAllSubmissionsClient Inherited Members ClientBaseTest<CheckAllSubmissionsClient>.Configuration ClientBaseTest<CheckAllSubmissionsClient>.Log ClientBaseTest<CheckAllSubmissionsClient>.LoggerFactory ClientBaseTest<CheckAllSubmissionsClient>.InitializeTaskOptions() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors CheckAllSubmissionsClient(IConfiguration, ILoggerFactory) public CheckAllSubmissionsClient(IConfiguration configuration, ILoggerFactory loggerFactory) Parameters configuration IConfiguration loggerFactory ILoggerFactory Methods EntryPoint() public override void EntryPoint()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckTypeOfSubmission.CheckAllSubmissionsClientTest.GetResultType.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckTypeOfSubmission.CheckAllSubmissionsClientTest.GetResultType.html",
    "title": "Enum CheckAllSubmissionsClientTest.GetResultType",
    "summary": "Enum CheckAllSubmissionsClientTest.GetResultType Namespace ArmoniK.EndToEndTests.Client.Tests.CheckTypeOfSubmission Assembly ArmoniK.EndToEndTests.Client.dll public enum CheckAllSubmissionsClientTest.GetResultType Fields GetResult = 0 TryGetResult = 1"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckTypeOfSubmission.CheckAllSubmissionsClientTest.SubmissionType.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckTypeOfSubmission.CheckAllSubmissionsClientTest.SubmissionType.html",
    "title": "Enum CheckAllSubmissionsClientTest.SubmissionType",
    "summary": "Enum CheckAllSubmissionsClientTest.SubmissionType Namespace ArmoniK.EndToEndTests.Client.Tests.CheckTypeOfSubmission Assembly ArmoniK.EndToEndTests.Client.dll public enum CheckAllSubmissionsClientTest.SubmissionType Fields Batch = 1 Sequential = 0"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckTypeOfSubmission.CheckAllSubmissionsClientTest.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckTypeOfSubmission.CheckAllSubmissionsClientTest.html",
    "title": "Class CheckAllSubmissionsClientTest",
    "summary": "Class CheckAllSubmissionsClientTest Namespace ArmoniK.EndToEndTests.Client.Tests.CheckTypeOfSubmission Assembly ArmoniK.EndToEndTests.Client.dll public class CheckAllSubmissionsClientTest Inheritance object CheckAllSubmissionsClientTest Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Check_That_All_Kinds_Of_Submissions_Are_Working(int, int, SubmissionType, GetResultType) [TestCase(new object?[] { 10, 2, CheckAllSubmissionsClientTest.SubmissionType.Sequential, CheckAllSubmissionsClientTest.GetResultType.GetResult })] [TestCase(new object?[] { 200, 0, CheckAllSubmissionsClientTest.SubmissionType.Batch, CheckAllSubmissionsClientTest.GetResultType.TryGetResult })] public void Check_That_All_Kinds_Of_Submissions_Are_Working(int nbJob, int nbSubTasks, CheckAllSubmissionsClientTest.SubmissionType submissionType, CheckAllSubmissionsClientTest.GetResultType getResultType) Parameters nbJob int nbSubTasks int submissionType CheckAllSubmissionsClientTest.SubmissionType getResultType CheckAllSubmissionsClientTest.GetResultType Cleanup() [TearDown] public void Cleanup() Setup() [SetUp] public void Setup()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckTypeOfSubmission.MyExtensions.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckTypeOfSubmission.MyExtensions.html",
    "title": "Class MyExtensions",
    "summary": "Class MyExtensions Namespace ArmoniK.EndToEndTests.Client.Tests.CheckTypeOfSubmission Assembly ArmoniK.EndToEndTests.Client.dll public static class MyExtensions Inheritance object MyExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Batch<T>(IEnumerable<T>, int) public static IEnumerable<IEnumerable<T>> Batch<T>(this IEnumerable<T> items, int maxItems) Parameters items IEnumerable<T> maxItems int Returns IEnumerable<IEnumerable<T>> Type Parameters T"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckTypeOfSubmission.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckTypeOfSubmission.html",
    "title": "Namespace ArmoniK.EndToEndTests.Client.Tests.CheckTypeOfSubmission",
    "summary": "Namespace ArmoniK.EndToEndTests.Client.Tests.CheckTypeOfSubmission Classes CheckAllSubmissionsClient CheckAllSubmissionsClientTest MyExtensions Enums CheckAllSubmissionsClientTest.GetResultType CheckAllSubmissionsClientTest.SubmissionType"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckUnifiedApi.IgnoreErrorHandler.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckUnifiedApi.IgnoreErrorHandler.html",
    "title": "Class IgnoreErrorHandler",
    "summary": "Class IgnoreErrorHandler Namespace ArmoniK.EndToEndTests.Client.Tests.CheckUnifiedApi Assembly ArmoniK.EndToEndTests.Client.dll public class IgnoreErrorHandler : IServiceInvocationHandler Inheritance object IgnoreErrorHandler Implements IServiceInvocationHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors IgnoreErrorHandler(ILogger) public IgnoreErrorHandler(ILogger logger) Parameters logger ILogger Methods HandleError(ServiceInvocationException, string) The callBack method which has to be implemented to retrieve error or exception public void HandleError(ServiceInvocationException e, string taskId) Parameters e ServiceInvocationException The exception sent to the client from the control plane taskId string The task identifier which has invoke the error callBack HandleResponse(object, string) The callBack method which has to be implemented to retrieve response from the server public void HandleResponse(object response, string taskId) Parameters response object The object received from the server as the result of the method called by the client taskId string The task identifier triggering the callBack"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckUnifiedApi.SimpleUnifiedApiAdminClientTest.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckUnifiedApi.SimpleUnifiedApiAdminClientTest.html",
    "title": "Class SimpleUnifiedApiAdminClientTest",
    "summary": "Class SimpleUnifiedApiAdminClientTest Namespace ArmoniK.EndToEndTests.Client.Tests.CheckUnifiedApi Assembly ArmoniK.EndToEndTests.Client.dll public class SimpleUnifiedApiAdminClientTest Inheritance object SimpleUnifiedApiAdminClientTest Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Check_TaskIdListing() [Test] public void Check_TaskIdListing() Check_That_CancelSession_Is_Working() [Test] public void Check_That_CancelSession_Is_Working() Cleanup() [TearDown] public void Cleanup() Setup() [SetUp] public void Setup()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckUnifiedApi.SimpleUnifiedApiAdminTestClient.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckUnifiedApi.SimpleUnifiedApiAdminTestClient.html",
    "title": "Class SimpleUnifiedApiAdminTestClient",
    "summary": "Class SimpleUnifiedApiAdminTestClient Namespace ArmoniK.EndToEndTests.Client.Tests.CheckUnifiedApi Assembly ArmoniK.EndToEndTests.Client.dll public class SimpleUnifiedApiAdminTestClient : ClientBaseTest<SimpleUnifiedApiTestClient>, IServiceInvocationHandler Inheritance object ClientBaseTest<SimpleUnifiedApiTestClient> SimpleUnifiedApiAdminTestClient Implements IServiceInvocationHandler Inherited Members ClientBaseTest<SimpleUnifiedApiTestClient>.Configuration ClientBaseTest<SimpleUnifiedApiTestClient>.Log ClientBaseTest<SimpleUnifiedApiTestClient>.LoggerFactory ClientBaseTest<SimpleUnifiedApiTestClient>.InitializeTaskOptions() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors SimpleUnifiedApiAdminTestClient(IConfiguration, ILoggerFactory) public SimpleUnifiedApiAdminTestClient(IConfiguration configuration, ILoggerFactory loggerFactory) Parameters configuration IConfiguration loggerFactory ILoggerFactory Methods EntryPoint() public override void EntryPoint() HandleError(ServiceInvocationException, string) The callBack method which has to be implemented to retrieve error or exception public void HandleError(ServiceInvocationException e, string taskId) Parameters e ServiceInvocationException The exception sent to the client from the control plane taskId string The task identifier which has invoke the error callBack HandleResponse(object, string) The callBack method which has to be implemented to retrieve response from the server public void HandleResponse(object response, string taskId) Parameters response object The object receive from the server as result the method called by the client taskId string The task identifier which has invoke the response callBack"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckUnifiedApi.SimpleUnifiedApiClientTest.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckUnifiedApi.SimpleUnifiedApiClientTest.html",
    "title": "Class SimpleUnifiedApiClientTest",
    "summary": "Class SimpleUnifiedApiClientTest Namespace ArmoniK.EndToEndTests.Client.Tests.CheckUnifiedApi Assembly ArmoniK.EndToEndTests.Client.dll public class SimpleUnifiedApiClientTest Inheritance object SimpleUnifiedApiClientTest Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Check_That_Instance_Methods_Can_Be_Called() [Test] public void Check_That_Instance_Methods_Can_Be_Called() Check_That_Method_Overload_As_Byte_Array_Is_Working() [Test] public void Check_That_Method_Overload_As_Byte_Array_Is_Working() Check_That_Method_Overload_As_Int_Is_Working() [Test] public void Check_That_Method_Overload_As_Int_Is_Working() Check_That_Output_As_Array_Is_Working() [Test] public void Check_That_Output_As_Array_Is_Working() Check_That_Session_ID_Is_Well_Initialized_In_Worker_Side() [Test] public void Check_That_Session_ID_Is_Well_Initialized_In_Worker_Side() Check_That_Statics_Methods_Can_Be_Called() [Test] public void Check_That_Statics_Methods_Can_Be_Called() Check_That_Task_Options_Are_Well_Initialized_In_Worker_Side() [Test] public void Check_That_Task_Options_Are_Well_Initialized_In_Worker_Side() Check_That_We_Get_Exception_If_RetryCount_Is_Exceeded() [Test] public void Check_That_We_Get_Exception_If_RetryCount_Is_Exceeded() Cleanup() [TearDown] public void Cleanup() Setup() [SetUp] public void Setup()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckUnifiedApi.SimpleUnifiedApiTestClient.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckUnifiedApi.SimpleUnifiedApiTestClient.html",
    "title": "Class SimpleUnifiedApiTestClient",
    "summary": "Class SimpleUnifiedApiTestClient Namespace ArmoniK.EndToEndTests.Client.Tests.CheckUnifiedApi Assembly ArmoniK.EndToEndTests.Client.dll public class SimpleUnifiedApiTestClient : ClientBaseTest<SimpleUnifiedApiTestClient>, IServiceInvocationHandler Inheritance object ClientBaseTest<SimpleUnifiedApiTestClient> SimpleUnifiedApiTestClient Implements IServiceInvocationHandler Inherited Members ClientBaseTest<SimpleUnifiedApiTestClient>.Configuration ClientBaseTest<SimpleUnifiedApiTestClient>.Log ClientBaseTest<SimpleUnifiedApiTestClient>.LoggerFactory ClientBaseTest<SimpleUnifiedApiTestClient>.InitializeTaskOptions() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors SimpleUnifiedApiTestClient(IConfiguration, ILoggerFactory) public SimpleUnifiedApiTestClient(IConfiguration configuration, ILoggerFactory loggerFactory) Parameters configuration IConfiguration loggerFactory ILoggerFactory Methods EntryPoint() public override void EntryPoint() HandleError(ServiceInvocationException, string) The callBack method which has to be implemented to retrieve error or exception public void HandleError(ServiceInvocationException e, string taskId) Parameters e ServiceInvocationException The exception sent to the client from the control plane taskId string The task identifier which has invoke the error callBack HandleResponse(object, string) The callBack method which has to be implemented to retrieve response from the server public void HandleResponse(object response, string taskId) Parameters response object The object receive from the server as result the method called by the client taskId string The task identifier which has invoke the response callBack"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.CheckUnifiedApi.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.CheckUnifiedApi.html",
    "title": "Namespace ArmoniK.EndToEndTests.Client.Tests.CheckUnifiedApi",
    "summary": "Namespace ArmoniK.EndToEndTests.Client.Tests.CheckUnifiedApi Classes IgnoreErrorHandler SimpleUnifiedApiAdminClientTest SimpleUnifiedApiAdminTestClient SimpleUnifiedApiClientTest SimpleUnifiedApiTestClient"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.IEnumerable.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.IEnumerable.html",
    "title": "Class IEnumerable",
    "summary": "Class IEnumerable Namespace ArmoniK.EndToEndTests.Client.Tests Assembly ArmoniK.EndToEndTests.Client.dll public static class IEnumerable Inheritance object IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods LoopAsyncResult<TIn, TOut>(IEnumerable<TIn>, Func<TIn, Task<TOut>>) Iterable loop to execution lambda on the IEnumerable public static Task<IEnumerable<TOut>> LoopAsyncResult<TIn, TOut>(this IEnumerable<TIn> list, Func<TIn, Task<TOut>> function) Parameters list IEnumerable<TIn> The IEnumerable list to iterate on function Func<TIn, Task<TOut>> The lambda function to apply on the Enumerable list Returns Task<IEnumerable<TOut>> Type Parameters TIn Input data type TOut Output dataType LoopAsync<T>(IEnumerable<T>, Func<T, Task>) Extensions to loop Async all over IEnumerable without expected result public static Task LoopAsync<T>(this IEnumerable<T> list, Func<T, Task> function) Parameters list IEnumerable<T> function Func<T, Task> Returns Task Type Parameters T"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.LargePayloadSubmit.LargePayloadSubmitClient.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.LargePayloadSubmit.LargePayloadSubmitClient.html",
    "title": "Class LargePayloadSubmitClient",
    "summary": "Class LargePayloadSubmitClient Namespace ArmoniK.EndToEndTests.Client.Tests.LargePayloadSubmit Assembly ArmoniK.EndToEndTests.Client.dll The client submission class public class LargePayloadSubmitClient : ClientBaseTest<LargePayloadSubmitClient>, IServiceInvocationHandler, IDisposable Inheritance object ClientBaseTest<LargePayloadSubmitClient> LargePayloadSubmitClient Implements IServiceInvocationHandler IDisposable Inherited Members ClientBaseTest<LargePayloadSubmitClient>.Configuration ClientBaseTest<LargePayloadSubmitClient>.Log ClientBaseTest<LargePayloadSubmitClient>.LoggerFactory ClientBaseTest<LargePayloadSubmitClient>.InitializeTaskOptions() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors LargePayloadSubmitClient(IConfiguration, ILoggerFactory) The ctor public LargePayloadSubmitClient(IConfiguration configuration, ILoggerFactory loggerFactory) Parameters configuration IConfiguration loggerFactory ILoggerFactory Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() EntryPoint() Main ethod called by tests engine public override void EntryPoint() HandleError(ServiceInvocationException, string) The callBack method which has to be implemented to retrieve error or exception public void HandleError(ServiceInvocationException e, string taskId) Parameters e ServiceInvocationException The exception sent to the client from the control plane taskId string The task identifier which has invoke the error callBack HandleResponse(object, string) The callBack method which has to be implemented to retrieve response from the server public void HandleResponse(object response, string taskId) Parameters response object The object receive from the server as result the method called by the client taskId string The task identifier which has invoke the response callBack"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.LargePayloadSubmit.LargePayloadSubmitClientTest.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.LargePayloadSubmit.LargePayloadSubmitClientTest.html",
    "title": "Class LargePayloadSubmitClientTest",
    "summary": "Class LargePayloadSubmitClientTest Namespace ArmoniK.EndToEndTests.Client.Tests.LargePayloadSubmit Assembly ArmoniK.EndToEndTests.Client.dll public class LargePayloadSubmitClientTest Inheritance object LargePayloadSubmitClientTest Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Configuration protected IConfiguration Configuration { get; set; } Property Value IConfiguration LoggerFactory protected ILoggerFactory LoggerFactory { get; set; } Property Value ILoggerFactory Methods Check_That_Large_Payload_Submission_Is_Working(int, int) [TestCase(10, 32000)] public void Check_That_Large_Payload_Submission_Is_Working(int nbTasks, int nbElement) Parameters nbTasks int nbElement int Cleanup() [TearDown] public void Cleanup() Setup() [SetUp] public void Setup()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.LargePayloadSubmit.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.LargePayloadSubmit.html",
    "title": "Namespace ArmoniK.EndToEndTests.Client.Tests.LargePayloadSubmit",
    "summary": "Namespace ArmoniK.EndToEndTests.Client.Tests.LargePayloadSubmit Classes LargePayloadSubmitClient The client submission class LargePayloadSubmitClientTest"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.LargeSubmitAsync.LargeSubmitAsyncTest.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.LargeSubmitAsync.LargeSubmitAsyncTest.html",
    "title": "Class LargeSubmitAsyncTest",
    "summary": "Class LargeSubmitAsyncTest Namespace ArmoniK.EndToEndTests.Client.Tests.LargeSubmitAsync Assembly ArmoniK.EndToEndTests.Client.dll public class LargeSubmitAsyncTest Inheritance object LargeSubmitAsyncTest Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Check_That_Buffering_With_SubmitAsync_Is_Working(int, int, int, int, int, int) [TestCase(new object?[] { 1, 1, 100, 2, 2, 50 })] [TestCase(new object?[] { 10, 1, 100, 2, 2, 50 })] [TestCase(new object?[] { 1000, 1, 100, 2, 2, 50 })] public void Check_That_Buffering_With_SubmitAsync_Is_Working(int nbTasks, int nbElementInWorkLoad, int bufferRequestSize, int maxConcurrentBuffers = 2, int maxParallelChannels = 2, int workloadTimeInMs = 1) Parameters nbTasks int nbElementInWorkLoad int bufferRequestSize int maxConcurrentBuffers int maxParallelChannels int workloadTimeInMs int Cleanup() [TearDown] public void Cleanup()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.LargeSubmitAsync.SubmitAsyncFixRequestOrder.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.LargeSubmitAsync.SubmitAsyncFixRequestOrder.html",
    "title": "Class SubmitAsyncFixRequestOrder",
    "summary": "Class SubmitAsyncFixRequestOrder Namespace ArmoniK.EndToEndTests.Client.Tests.LargeSubmitAsync Assembly ArmoniK.EndToEndTests.Client.dll public class SubmitAsyncFixRequestOrder Inheritance object SubmitAsyncFixRequestOrder Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Check_That_Batching_return_Ids_In_Good_Order_With_Unified_SDK(int, int, int, int, int, int) [TestCase(new object?[] { 1, 1, 100, 2, 2, 50 })] [TestCase(new object?[] { 10, 1, 100, 2, 2, 50 })] [TestCase(new object?[] { 100, 1, 100, 2, 2, 50 })] [TestCase(new object?[] { 1000, 1, 100, 4, 4, 50 })] public void Check_That_Batching_return_Ids_In_Good_Order_With_Unified_SDK(int nbTasks, int nbElementInWorkLoad, int bufferRequestSize, int maxConcurrentBuffers = 2, int maxParallelChannels = 2, int workloadTimeInMs = 1) Parameters nbTasks int nbElementInWorkLoad int bufferRequestSize int maxConcurrentBuffers int maxParallelChannels int workloadTimeInMs int Cleanup() [TearDown] public void Cleanup()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.LargeSubmitAsync.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.LargeSubmitAsync.html",
    "title": "Namespace ArmoniK.EndToEndTests.Client.Tests.LargeSubmitAsync",
    "summary": "Namespace ArmoniK.EndToEndTests.Client.Tests.LargeSubmitAsync Classes LargeSubmitAsyncTest SubmitAsyncFixRequestOrder"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.PayloadIntegrityTestClient.HandleErrorType.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.PayloadIntegrityTestClient.HandleErrorType.html",
    "title": "Delegate HandleErrorType",
    "summary": "Delegate HandleErrorType Namespace ArmoniK.EndToEndTests.Client.Tests.PayloadIntegrityTestClient Assembly ArmoniK.EndToEndTests.Client.dll public delegate void HandleErrorType(ServiceInvocationException e, string taskId) Parameters e ServiceInvocationException taskId string"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.PayloadIntegrityTestClient.HandleResponseType.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.PayloadIntegrityTestClient.HandleResponseType.html",
    "title": "Delegate HandleResponseType",
    "summary": "Delegate HandleResponseType Namespace ArmoniK.EndToEndTests.Client.Tests.PayloadIntegrityTestClient Assembly ArmoniK.EndToEndTests.Client.dll public delegate void HandleResponseType(object response, string taskId) Parameters response object taskId string"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.PayloadIntegrityTestClient.PayloadIntegrityTest.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.PayloadIntegrityTestClient.PayloadIntegrityTest.html",
    "title": "Class PayloadIntegrityTest",
    "summary": "Class PayloadIntegrityTest Namespace ArmoniK.EndToEndTests.Client.Tests.PayloadIntegrityTestClient Assembly ArmoniK.EndToEndTests.Client.dll [TestFixture] public class PayloadIntegrityTest Inheritance object PayloadIntegrityTest Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CopyPayload(int, int, int) [TestCase(1, 1, 1)] [TestCase(1, 50, 1)] [TestCase(5, 50, 5)] public void CopyPayload(int maxConcurrentBuffers, int maxTasksPerBuffer, int maxParallelChannels) Parameters maxConcurrentBuffers int maxTasksPerBuffer int maxParallelChannels int Setup() [SetUp] public void Setup()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.PayloadIntegrityTestClient.ResultHandler.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.PayloadIntegrityTestClient.ResultHandler.html",
    "title": "Class ResultHandler",
    "summary": "Class ResultHandler Namespace ArmoniK.EndToEndTests.Client.Tests.PayloadIntegrityTestClient Assembly ArmoniK.EndToEndTests.Client.dll public class ResultHandler : IServiceInvocationHandler Inheritance object ResultHandler Implements IServiceInvocationHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ResultHandler(HandleErrorType, HandleResponseType) public ResultHandler(HandleErrorType onError, HandleResponseType onResponse) Parameters onError HandleErrorType onResponse HandleResponseType Methods HandleError(ServiceInvocationException, string) The callBack method which has to be implemented to retrieve error or exception public void HandleError(ServiceInvocationException e, string taskId) Parameters e ServiceInvocationException The exception sent to the client from the control plane taskId string The task identifier which has invoke the error callBack HandleResponse(object, string) The callBack method which has to be implemented to retrieve response from the server public void HandleResponse(object response, string taskId) Parameters response object The object received from the server as the result of the method called by the client taskId string The task identifier triggering the callBack"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.PayloadIntegrityTestClient.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.PayloadIntegrityTestClient.html",
    "title": "Namespace ArmoniK.EndToEndTests.Client.Tests.PayloadIntegrityTestClient",
    "summary": "Namespace ArmoniK.EndToEndTests.Client.Tests.PayloadIntegrityTestClient Classes PayloadIntegrityTest ResultHandler Delegates HandleErrorType HandleResponseType"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.Priority.Priority.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.Priority.Priority.html",
    "title": "Class Priority",
    "summary": "Class Priority Namespace ArmoniK.EndToEndTests.Client.Tests.Priority Assembly ArmoniK.EndToEndTests.Client.dll public class Priority Inheritance object Priority Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Cleanup() Cleanup is a method that cleans up after the test. [TearDown] public void Cleanup() Setup() [SetUp] public void Setup() TestThatPrioritiesAreAccountedFor() [Test] public void TestThatPrioritiesAreAccountedFor()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.Priority.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.Priority.html",
    "title": "Namespace ArmoniK.EndToEndTests.Client.Tests.Priority",
    "summary": "Namespace ArmoniK.EndToEndTests.Client.Tests.Priority Classes Priority"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.SimpleComputeNSubtasking.SimpleComputeNSubtaskingClient.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.SimpleComputeNSubtasking.SimpleComputeNSubtaskingClient.html",
    "title": "Class SimpleComputeNSubtaskingClient",
    "summary": "Class SimpleComputeNSubtaskingClient Namespace ArmoniK.EndToEndTests.Client.Tests.SimpleComputeNSubtasking Assembly ArmoniK.EndToEndTests.Client.dll public class SimpleComputeNSubtaskingClient : ClientBaseTest<SimpleComputeNSubtaskingClient> Inheritance object ClientBaseTest<SimpleComputeNSubtaskingClient> SimpleComputeNSubtaskingClient Inherited Members ClientBaseTest<SimpleComputeNSubtaskingClient>.Configuration ClientBaseTest<SimpleComputeNSubtaskingClient>.Log ClientBaseTest<SimpleComputeNSubtaskingClient>.LoggerFactory ClientBaseTest<SimpleComputeNSubtaskingClient>.InitializeTaskOptions() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors SimpleComputeNSubtaskingClient(IConfiguration, ILoggerFactory) public SimpleComputeNSubtaskingClient(IConfiguration configuration, ILoggerFactory loggerFactory) Parameters configuration IConfiguration loggerFactory ILoggerFactory Methods EntryPoint() public override void EntryPoint()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.SimpleComputeNSubtasking.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.SimpleComputeNSubtasking.html",
    "title": "Namespace ArmoniK.EndToEndTests.Client.Tests.SimpleComputeNSubtasking",
    "summary": "Namespace ArmoniK.EndToEndTests.Client.Tests.SimpleComputeNSubtasking Classes SimpleComputeNSubtaskingClient"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.TemplateTest.TemplateTestClient.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.TemplateTest.TemplateTestClient.html",
    "title": "Class TemplateTestClient",
    "summary": "Class TemplateTestClient Namespace ArmoniK.EndToEndTests.Client.Tests.TemplateTest Assembly ArmoniK.EndToEndTests.Client.dll public class TemplateTestClient : ClientBaseTest<TemplateTestClient> Inheritance object ClientBaseTest<TemplateTestClient> TemplateTestClient Inherited Members ClientBaseTest<TemplateTestClient>.Configuration ClientBaseTest<TemplateTestClient>.Log ClientBaseTest<TemplateTestClient>.LoggerFactory ClientBaseTest<TemplateTestClient>.InitializeTaskOptions() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors TemplateTestClient(IConfiguration, ILoggerFactory) public TemplateTestClient(IConfiguration configuration, ILoggerFactory loggerFactory) Parameters configuration IConfiguration loggerFactory ILoggerFactory Methods ClientStartup1(SessionService) The first test developed to validate dependencies subTasking public void ClientStartup1(SessionService sessionService) Parameters sessionService SessionService EntryPoint() public override void EntryPoint()"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.TemplateTest.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.TemplateTest.html",
    "title": "Namespace ArmoniK.EndToEndTests.Client.Tests.TemplateTest",
    "summary": "Namespace ArmoniK.EndToEndTests.Client.Tests.TemplateTest Classes TemplateTestClient"
  },
  "api/ArmoniK.EndToEndTests.Client.Tests.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.Tests.html",
    "title": "Namespace ArmoniK.EndToEndTests.Client.Tests",
    "summary": "Namespace ArmoniK.EndToEndTests.Client.Tests Classes IEnumerable"
  },
  "api/ArmoniK.EndToEndTests.Client.html": {
    "href": "api/ArmoniK.EndToEndTests.Client.html",
    "title": "Namespace ArmoniK.EndToEndTests.Client",
    "summary": "Namespace ArmoniK.EndToEndTests.Client Classes Program"
  },
  "api/ArmoniK.EndToEndTests.Common.Assert.html": {
    "href": "api/ArmoniK.EndToEndTests.Common.Assert.html",
    "title": "Class Assert",
    "summary": "Class Assert Namespace ArmoniK.EndToEndTests.Common Assembly ArmoniK.EndToEndTests.Common.dll public static class Assert Inheritance object Assert Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AreEqual<T>(T, T) public static void AreEqual<T>(T expected, T value) Parameters expected T value T Type Parameters T"
  },
  "api/ArmoniK.EndToEndTests.Common.ClientBaseTest-1.html": {
    "href": "api/ArmoniK.EndToEndTests.Common.ClientBaseTest-1.html",
    "title": "Class ClientBaseTest<T>",
    "summary": "Class ClientBaseTest<T> Namespace ArmoniK.EndToEndTests.Common Assembly ArmoniK.EndToEndTests.Common.dll [PublicAPI] public abstract class ClientBaseTest<T> Type Parameters T Inheritance object ClientBaseTest<T> Derived CheckMultipleTasksClient CheckRandomExceptionSymClient CheckSessionUniqCallbackClient SubtaskingTreeUnifiedApiClient SubtaskingTreeClient CheckTryGetResultsClient CheckAllSubmissionsClient SimpleUnifiedApiAdminTestClient SimpleUnifiedApiTestClient LargePayloadSubmitClient SimpleComputeNSubtaskingClient TemplateTestClient CheckOptionsClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ClientBaseTest(IConfiguration, ILoggerFactory) public ClientBaseTest(IConfiguration configuration, ILoggerFactory loggerFactory) Parameters configuration IConfiguration loggerFactory ILoggerFactory Properties Configuration protected IConfiguration Configuration { get; set; } Property Value IConfiguration Log protected static ILogger<T> Log { get; set; } Property Value ILogger<T> LoggerFactory protected ILoggerFactory LoggerFactory { get; set; } Property Value ILoggerFactory Methods EntryPoint() public abstract void EntryPoint() InitializeTaskOptions() protected virtual TaskOptions InitializeTaskOptions() Returns TaskOptions"
  },
  "api/ArmoniK.EndToEndTests.Common.ClientPayload.TaskType.html": {
    "href": "api/ArmoniK.EndToEndTests.Common.ClientPayload.TaskType.html",
    "title": "Enum ClientPayload.TaskType",
    "summary": "Enum ClientPayload.TaskType Namespace ArmoniK.EndToEndTests.Common Assembly ArmoniK.EndToEndTests.Common.dll public enum ClientPayload.TaskType Extension Methods EnumExt.GetName(Enum) Fields Aggregation = 6 AggregationNTask = 11 ComputeCube = 1 ComputeSquare = 0 Expm1 = 10 JobOfNTasks = 4 NJobOf1Tasks = 5 None = 9 Result = 2 Sleep = 3 SubTask = 7 Undefined = 8"
  },
  "api/ArmoniK.EndToEndTests.Common.ClientPayload.html": {
    "href": "api/ArmoniK.EndToEndTests.Common.ClientPayload.html",
    "title": "Class ClientPayload",
    "summary": "Class ClientPayload Namespace ArmoniK.EndToEndTests.Common Assembly ArmoniK.EndToEndTests.Common.dll public class ClientPayload Inheritance object ClientPayload Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsRootTask public bool IsRootTask { get; set; } Property Value bool Message public string Message { get; set; } Property Value string NbSubTasks public int NbSubTasks { get; set; } Property Value int Numbers public List<int> Numbers { get; set; } Property Value List<int> Payload public byte[] Payload { get; set; } Property Value byte[] Result public int Result { get; set; } Property Value int SingleInput public int SingleInput { get; set; } Property Value int Sleep public int Sleep { get; set; } Property Value int Type public ClientPayload.TaskType Type { get; set; } Property Value ClientPayload.TaskType Methods Deserialize(byte[]) public static ClientPayload Deserialize(byte[] payload) Parameters payload byte[] Returns ClientPayload Serialize() public byte[] Serialize() Returns byte[]"
  },
  "api/ArmoniK.EndToEndTests.Common.ClientTestHelpers.html": {
    "href": "api/ArmoniK.EndToEndTests.Common.ClientTestHelpers.html",
    "title": "Class ClientTestHelpers",
    "summary": "Class ClientTestHelpers Namespace ArmoniK.EndToEndTests.Common Assembly ArmoniK.EndToEndTests.Common.dll public class ClientTestHelpers Inheritance object ClientTestHelpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ClientTestHelpers() public ClientTestHelpers() Methods InitializeTaskOptions() public static TaskOptions InitializeTaskOptions() Returns TaskOptions"
  },
  "api/ArmoniK.EndToEndTests.Common.DisabledAttribute.html": {
    "href": "api/ArmoniK.EndToEndTests.Common.DisabledAttribute.html",
    "title": "Class DisabledAttribute",
    "summary": "Class DisabledAttribute Namespace ArmoniK.EndToEndTests.Common Assembly ArmoniK.EndToEndTests.Common.dll public class DisabledAttribute : Attribute Inheritance object Attribute DisabledAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ArmoniK.EndToEndTests.Common.EntryPointAttribute.html": {
    "href": "api/ArmoniK.EndToEndTests.Common.EntryPointAttribute.html",
    "title": "Class EntryPointAttribute",
    "summary": "Class EntryPointAttribute Namespace ArmoniK.EndToEndTests.Common Assembly ArmoniK.EndToEndTests.Common.dll public class EntryPointAttribute : Attribute Inheritance object Attribute EntryPointAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ArmoniK.EndToEndTests.Common.TaskOptionsExt.html": {
    "href": "api/ArmoniK.EndToEndTests.Common.TaskOptionsExt.html",
    "title": "Class TaskOptionsExt",
    "summary": "Class TaskOptionsExt Namespace ArmoniK.EndToEndTests.Common Assembly ArmoniK.EndToEndTests.Common.dll [PublicAPI] public static class TaskOptionsExt Inheritance object TaskOptionsExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetApplicationName(TaskOptions, string) public static TaskOptions SetApplicationName(this TaskOptions taskOptions, string applicationName) Parameters taskOptions TaskOptions applicationName string Returns TaskOptions SetEngineType(TaskOptions, string) public static TaskOptions SetEngineType(this TaskOptions taskOptions, string engineType) Parameters taskOptions TaskOptions engineType string Returns TaskOptions SetNamespaceService(TaskOptions, string) public static TaskOptions SetNamespaceService(this TaskOptions taskOptions, string namespaceService) Parameters taskOptions TaskOptions namespaceService string Returns TaskOptions SetSessionPriority(TaskOptions, int) public static TaskOptions SetSessionPriority(this TaskOptions taskOptions, int priority) Parameters taskOptions TaskOptions priority int Returns TaskOptions SetVersion(TaskOptions, string) public static TaskOptions SetVersion(this TaskOptions taskOptions, string version) Parameters taskOptions TaskOptions version string Returns TaskOptions"
  },
  "api/ArmoniK.EndToEndTests.Common.TaskPayload.html": {
    "href": "api/ArmoniK.EndToEndTests.Common.TaskPayload.html",
    "title": "Class TaskPayload",
    "summary": "Class TaskPayload Namespace ArmoniK.EndToEndTests.Common Assembly ArmoniK.EndToEndTests.Common.dll public class TaskPayload Inheritance object TaskPayload Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Scalar public int Scalar { get; set; } Property Value int Vector public int[] Vector { get; set; } Property Value int[] WorkloadTimeInMs public int WorkloadTimeInMs { get; set; } Property Value int"
  },
  "api/ArmoniK.EndToEndTests.Common.TaskResult.html": {
    "href": "api/ArmoniK.EndToEndTests.Common.TaskResult.html",
    "title": "Class TaskResult",
    "summary": "Class TaskResult Namespace ArmoniK.EndToEndTests.Common Assembly ArmoniK.EndToEndTests.Common.dll [ProtoContract] public class TaskResult Inheritance object TaskResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CompletedAt [ProtoMember(4)] public string CompletedAt { get; set; } Property Value string Priority [ProtoMember(3)] public int Priority { get; set; } Property Value int Result [ProtoMember(2)] public int Result { get; set; } Property Value int ResultString [ProtoMember(1)] public string ResultString { get; set; } Property Value string Methods Deserialize(byte[]) public static TaskResult Deserialize(byte[] payload) Parameters payload byte[] Returns TaskResult Serialize() public byte[] Serialize() Returns byte[]"
  },
  "api/ArmoniK.EndToEndTests.Common.TestContext.html": {
    "href": "api/ArmoniK.EndToEndTests.Common.TestContext.html",
    "title": "Class TestContext",
    "summary": "Class TestContext Namespace ArmoniK.EndToEndTests.Common Assembly ArmoniK.EndToEndTests.Common.dll public class TestContext Inheritance object TestContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ClassClient public Type? ClassClient { get; set; } Property Value Type ClientClassInstance public object? ClientClassInstance { get; set; } Property Value object MethodTests public MethodInfo[]? MethodTests { get; set; } Property Value MethodInfo[] NameSpaceTest public string? NameSpaceTest { get; set; } Property Value string"
  },
  "api/ArmoniK.EndToEndTests.Common.html": {
    "href": "api/ArmoniK.EndToEndTests.Common.html",
    "title": "Namespace ArmoniK.EndToEndTests.Common",
    "summary": "Namespace ArmoniK.EndToEndTests.Common Classes Assert ClientBaseTest<T> ClientPayload ClientTestHelpers DisabledAttribute EntryPointAttribute TaskOptionsExt TaskPayload TaskResult TestContext Enums ClientPayload.TaskType"
  },
  "api/ArmoniK.EndToEndTests.Tests.CheckOptions.CheckOptionsClient.html": {
    "href": "api/ArmoniK.EndToEndTests.Tests.CheckOptions.CheckOptionsClient.html",
    "title": "Class CheckOptionsClient",
    "summary": "Class CheckOptionsClient Namespace ArmoniK.EndToEndTests.Tests.CheckOptions Assembly ArmoniK.EndToEndTests.Client.dll public class CheckOptionsClient : ClientBaseTest<CheckOptionsClient> Inheritance object ClientBaseTest<CheckOptionsClient> CheckOptionsClient Inherited Members ClientBaseTest<CheckOptionsClient>.Configuration ClientBaseTest<CheckOptionsClient>.Log ClientBaseTest<CheckOptionsClient>.LoggerFactory ClientBaseTest<CheckOptionsClient>.InitializeTaskOptions() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors CheckOptionsClient(IConfiguration, ILoggerFactory) public CheckOptionsClient(IConfiguration configuration, ILoggerFactory loggerFactory) Parameters configuration IConfiguration loggerFactory ILoggerFactory Methods ClientStartup1(SessionService) The first test developed to validate dependencies subTasking public void ClientStartup1(SessionService sessionService) Parameters sessionService SessionService EntryPoint() public override void EntryPoint()"
  },
  "api/ArmoniK.EndToEndTests.Tests.CheckOptions.ServiceContainer.html": {
    "href": "api/ArmoniK.EndToEndTests.Tests.CheckOptions.ServiceContainer.html",
    "title": "Class ServiceContainer",
    "summary": "Class ServiceContainer Namespace ArmoniK.EndToEndTests.Tests.CheckOptions Assembly ArmoniK.EndToEndTests.Worker.dll public class ServiceContainer : ServiceContainerBase Inheritance object ServiceContainerBase ServiceContainer Inherited Members ServiceContainerBase.SessionId ServiceContainerBase.TaskId2OutputId ServiceContainerBase.TaskOptions ServiceContainerBase.TaskId ServiceContainerBase.Configuration ServiceContainerBase.LoggerFactory ServiceContainerBase.Logger ServiceContainerBase.SubmitTasks(IEnumerable<byte[]>, int, TaskOptions) ServiceContainerBase.SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, bool, int, TaskOptions) ServiceContainerBase.SubmitSubtaskWithDependencies(byte[], IList<string>, int, TaskOptions) ServiceContainerBase.SubmitSubtasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, int, TaskOptions) ServiceContainerBase.WaitForTaskCompletion(string) ServiceContainerBase.WaitForTasksCompletion(IEnumerable<string>) ServiceContainerBase.WaitForSubTasksCompletion(string) ServiceContainerBase.GetDependenciesResult(string) ServiceContainerBase.Configure(IConfiguration, TaskOptions) ServiceContainerBase.ConfigureSession(Session, TaskOptions) ServiceContainerBase.ConfigureSessionService(ITaskHandler) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OnCreateService(ServiceContext) The middleware triggers the invocation of this handler just after a Service Instance is started. The application developer must put any service initialization into this handler. Default implementation does nothing. public override void OnCreateService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnDestroyService(ServiceContext) The middleware triggers the invocation of this handler just before a Service Instance is destroyed. This handler should do any cleanup for any resources that were used in the onCreateService() method. public override void OnDestroyService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnInvoke(SessionContext, TaskContext) The middleware triggers the invocation of this handler every time a task input is sent to the service to be processed. The actual service logic should be implemented in this method. This is the only method that is mandatory for the application developer to implement. public override byte[] OnInvoke(SessionContext sessionContext, TaskContext taskContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID. taskContext TaskContext Holds all information on the state of the task such as the task ID and the payload. Returns byte[] OnSessionEnter(SessionContext) This handler is executed once after the callback OnCreateService and before the OnInvoke public override void OnSessionEnter(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution. OnSessionLeave(SessionContext) The middleware triggers the invocation of this handler to unbind the Service Instance from its owning Session. This handler should do any cleanup for any resources that were used in the onSessionEnter() method. public override void OnSessionLeave(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID."
  },
  "api/ArmoniK.EndToEndTests.Tests.CheckOptions.html": {
    "href": "api/ArmoniK.EndToEndTests.Tests.CheckOptions.html",
    "title": "Namespace ArmoniK.EndToEndTests.Tests.CheckOptions",
    "summary": "Namespace ArmoniK.EndToEndTests.Tests.CheckOptions Classes CheckOptionsClient ServiceContainer"
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.AggregationPriority.AggregationPriority.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.AggregationPriority.AggregationPriority.html",
    "title": "Class AggregationPriority",
    "summary": "Class AggregationPriority Namespace ArmoniK.EndToEndTests.Worker.Tests.AggregationPriority Assembly ArmoniK.EndToEndTests.Worker.dll AggregationPriority is a TaskWorkerService class that contains methods to compute basic array cube, reduce, reduce cube, compute madd, compute matrix, compute vector, compute scalar, and aggregate results. [UsedImplicitly] public class AggregationPriority : TaskWorkerService, ITaskContextConfiguration, ISessionServiceConfiguration, ITaskOptionsConfiguration, ISessionConfiguration, ILoggerConfiguration Inheritance object TaskWorkerService AggregationPriority Implements ITaskContextConfiguration ISessionServiceConfiguration ITaskOptionsConfiguration ISessionConfiguration ILoggerConfiguration Inherited Members TaskWorkerService.Logger TaskWorkerService.TaskId2OutputId TaskWorkerService.TaskOptions TaskWorkerService.Configuration TaskWorkerService.LoggerFactory TaskWorkerService.ConfigureLogger(IConfiguration) TaskWorkerService.SessionId TaskWorkerService.OnCreateService(ServiceContext) TaskWorkerService.OnDestroyService(ServiceContext) TaskWorkerService.OnSessionEnter(SessionContext) TaskWorkerService.OnSessionLeave(SessionContext) TaskWorkerService.ConfigureSession(Session, TaskOptions) TaskWorkerService.ConfigureSessionService(ITaskHandler) TaskWorkerService.TaskContext TaskWorkerService.ConfigureTaskOptions(TaskOptions) TaskWorkerService.SubmitTasks(IEnumerable<byte[]>, int, TaskOptions) TaskWorkerService.SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, bool, int, TaskOptions) TaskWorkerService.SubmitTask(byte[], int, TaskOptions) TaskWorkerService.SubmitTask(string, object[], int, TaskOptions) TaskWorkerService.SubmitTaskWithDependencie(byte[], IList<string>, bool, int, TaskOptions) TaskWorkerService.SubmitTaskWithDependencies(string, object[], IList<string>, bool, int, TaskOptions) TaskWorkerService.GetDependenciesResult(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AggregationPriority() Initializes a new instance of the AggregationPriority class. public AggregationPriority() Methods AggregateResults(byte[]) Aggregates the results of a task payload. public byte[] AggregateResults(byte[] payload) Parameters payload byte[] The payload to aggregate. Returns byte[] The aggregated results. ComputeBasicArrayCube(double[]) Computes the basic array cube. public static double[] ComputeBasicArrayCube(double[] inputs) Parameters inputs double[] The inputs. Returns double[] An array of the cube of the inputs. ComputeMadd(byte[], byte[], double) Computes the madd. public static double[] ComputeMadd(byte[] inputs1, byte[] inputs2, double k) Parameters inputs1 byte[] The inputs1. inputs2 byte[] The inputs2. k double The k. Returns double[] An array of the madd of the inputs. ComputeMatrix(int) Computes a matrix of size squareMatrixSize. public byte[] ComputeMatrix(int squareMatrixSize) Parameters squareMatrixSize int The size of the matrix to be computed. Returns byte[] A byte array. ComputeReduce(double[]) Computes the reduce. public static double ComputeReduce(double[] inputs) Parameters inputs double[] The inputs. Returns double The sum of the inputs. ComputeReduceCube(byte[]) Computes the reduce cube. public static double ComputeReduceCube(byte[] inputs) Parameters inputs byte[] The inputs. Returns double The sum of the cube of the inputs. ComputeReduceCube(double[], int) Computes the reduce cube. public static double ComputeReduceCube(double[] inputs, int workloadTimeInMs = 10) Parameters inputs double[] The inputs. workloadTimeInMs int The workload time in ms. Returns double The sum of the cube of the inputs. ComputeScalar(byte[]) Computes the scalar value of a given payload. public byte[] ComputeScalar(byte[] payload) Parameters payload byte[] The payload to compute the scalar value of. Returns byte[] The scalar value of the payload. ComputeVector(byte[]) Computes a vector based on a given payload. public byte[] ComputeVector(byte[] payload) Parameters payload byte[] The payload to be used for the computation. Returns byte[] A byte array containing the result of the computation. NonStaticComputeMadd(byte[], byte[], double) Non statics the compute madd. public double[] NonStaticComputeMadd(byte[] inputs1, byte[] inputs2, double k) Parameters inputs1 byte[] The inputs1. inputs2 byte[] The inputs2. k double The k. Returns double[] An array of the madd of the inputs."
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.AggregationPriority.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.AggregationPriority.html",
    "title": "Namespace ArmoniK.EndToEndTests.Worker.Tests.AggregationPriority",
    "summary": "Namespace ArmoniK.EndToEndTests.Worker.Tests.AggregationPriority Classes AggregationPriority AggregationPriority is a TaskWorkerService class that contains methods to compute basic array cube, reduce, reduce cube, compute madd, compute matrix, compute vector, compute scalar, and aggregate results."
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.CheckMultipleTasks.ServiceContainer.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.CheckMultipleTasks.ServiceContainer.html",
    "title": "Class ServiceContainer",
    "summary": "Class ServiceContainer Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckMultipleTasks Assembly ArmoniK.EndToEndTests.Worker.dll [PublicAPI] public class ServiceContainer : ServiceContainerBase Inheritance object ServiceContainerBase ServiceContainer Inherited Members ServiceContainerBase.SessionId ServiceContainerBase.TaskId2OutputId ServiceContainerBase.TaskOptions ServiceContainerBase.TaskId ServiceContainerBase.Configuration ServiceContainerBase.LoggerFactory ServiceContainerBase.Logger ServiceContainerBase.SubmitTasks(IEnumerable<byte[]>, int, TaskOptions) ServiceContainerBase.SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, bool, int, TaskOptions) ServiceContainerBase.SubmitSubtaskWithDependencies(byte[], IList<string>, int, TaskOptions) ServiceContainerBase.SubmitSubtasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, int, TaskOptions) ServiceContainerBase.WaitForTaskCompletion(string) ServiceContainerBase.WaitForTasksCompletion(IEnumerable<string>) ServiceContainerBase.WaitForSubTasksCompletion(string) ServiceContainerBase.GetDependenciesResult(string) ServiceContainerBase.Configure(IConfiguration, TaskOptions) ServiceContainerBase.ConfigureSession(Session, TaskOptions) ServiceContainerBase.ConfigureSessionService(ITaskHandler) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OnCreateService(ServiceContext) The middleware triggers the invocation of this handler just after a Service Instance is started. The application developer must put any service initialization into this handler. Default implementation does nothing. public override void OnCreateService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnDestroyService(ServiceContext) The middleware triggers the invocation of this handler just before a Service Instance is destroyed. This handler should do any cleanup for any resources that were used in the onCreateService() method. public override void OnDestroyService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnInvoke(SessionContext, TaskContext) The middleware triggers the invocation of this handler every time a task input is sent to the service to be processed. The actual service logic should be implemented in this method. This is the only method that is mandatory for the application developer to implement. public override byte[] OnInvoke(SessionContext sessionContext, TaskContext taskContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID. taskContext TaskContext Holds all information on the state of the task such as the task ID and the payload. Returns byte[] OnSessionEnter(SessionContext) This handler is executed once after the callback OnCreateService and before the OnInvoke public override void OnSessionEnter(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution. OnSessionLeave(SessionContext) The middleware triggers the invocation of this handler to unbind the Service Instance from its owning Session. This handler should do any cleanup for any resources that were used in the onSessionEnter() method. public override void OnSessionLeave(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID."
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.CheckMultipleTasks.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.CheckMultipleTasks.html",
    "title": "Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckMultipleTasks",
    "summary": "Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckMultipleTasks Classes ServiceContainer"
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.CheckRandomException.MyCustomWorkerException.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.CheckRandomException.MyCustomWorkerException.html",
    "title": "Class MyCustomWorkerException",
    "summary": "Class MyCustomWorkerException Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckRandomException Assembly ArmoniK.EndToEndTests.Worker.dll public class MyCustomWorkerException : Exception, ISerializable Inheritance object Exception MyCustomWorkerException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyCustomWorkerException(string) public MyCustomWorkerException(string message) Parameters message string"
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.CheckRandomException.ServiceContainer.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.CheckRandomException.ServiceContainer.html",
    "title": "Class ServiceContainer",
    "summary": "Class ServiceContainer Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckRandomException Assembly ArmoniK.EndToEndTests.Worker.dll [PublicAPI] public class ServiceContainer : ServiceContainerBase Inheritance object ServiceContainerBase ServiceContainer Inherited Members ServiceContainerBase.SessionId ServiceContainerBase.TaskId2OutputId ServiceContainerBase.TaskOptions ServiceContainerBase.TaskId ServiceContainerBase.Configuration ServiceContainerBase.LoggerFactory ServiceContainerBase.Logger ServiceContainerBase.SubmitTasks(IEnumerable<byte[]>, int, TaskOptions) ServiceContainerBase.SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, bool, int, TaskOptions) ServiceContainerBase.SubmitSubtaskWithDependencies(byte[], IList<string>, int, TaskOptions) ServiceContainerBase.SubmitSubtasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, int, TaskOptions) ServiceContainerBase.WaitForTaskCompletion(string) ServiceContainerBase.WaitForTasksCompletion(IEnumerable<string>) ServiceContainerBase.WaitForSubTasksCompletion(string) ServiceContainerBase.GetDependenciesResult(string) ServiceContainerBase.Configure(IConfiguration, TaskOptions) ServiceContainerBase.ConfigureSession(Session, TaskOptions) ServiceContainerBase.ConfigureSessionService(ITaskHandler) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OnCreateService(ServiceContext) The middleware triggers the invocation of this handler just after a Service Instance is started. The application developer must put any service initialization into this handler. Default implementation does nothing. public override void OnCreateService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnDestroyService(ServiceContext) The middleware triggers the invocation of this handler just before a Service Instance is destroyed. This handler should do any cleanup for any resources that were used in the onCreateService() method. public override void OnDestroyService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnInvoke(SessionContext, TaskContext) The middleware triggers the invocation of this handler every time a task input is sent to the service to be processed. The actual service logic should be implemented in this method. This is the only method that is mandatory for the application developer to implement. public override byte[] OnInvoke(SessionContext sessionContext, TaskContext taskContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID. taskContext TaskContext Holds all information on the state of the task such as the task ID and the payload. Returns byte[] OnSessionEnter(SessionContext) This handler is executed once after the callback OnCreateService and before the OnInvoke public override void OnSessionEnter(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution. OnSessionLeave(SessionContext) The middleware triggers the invocation of this handler to unbind the Service Instance from its owning Session. This handler should do any cleanup for any resources that were used in the onSessionEnter() method. public override void OnSessionLeave(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID."
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.CheckRandomException.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.CheckRandomException.html",
    "title": "Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckRandomException",
    "summary": "Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckRandomException Classes MyCustomWorkerException ServiceContainer"
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.CheckSessionUniqCallback.ServiceContainer.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.CheckSessionUniqCallback.ServiceContainer.html",
    "title": "Class ServiceContainer",
    "summary": "Class ServiceContainer Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckSessionUniqCallback Assembly ArmoniK.EndToEndTests.Worker.dll [PublicAPI] public sealed class ServiceContainer : ServiceContainerBase Inheritance object ServiceContainerBase ServiceContainer Inherited Members ServiceContainerBase.SessionId ServiceContainerBase.TaskId2OutputId ServiceContainerBase.TaskOptions ServiceContainerBase.TaskId ServiceContainerBase.Configuration ServiceContainerBase.LoggerFactory ServiceContainerBase.Logger ServiceContainerBase.SubmitTasks(IEnumerable<byte[]>, int, TaskOptions) ServiceContainerBase.SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, bool, int, TaskOptions) ServiceContainerBase.SubmitSubtaskWithDependencies(byte[], IList<string>, int, TaskOptions) ServiceContainerBase.SubmitSubtasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, int, TaskOptions) ServiceContainerBase.WaitForTaskCompletion(string) ServiceContainerBase.WaitForTasksCompletion(IEnumerable<string>) ServiceContainerBase.WaitForSubTasksCompletion(string) ServiceContainerBase.GetDependenciesResult(string) ServiceContainerBase.Configure(IConfiguration, TaskOptions) ServiceContainerBase.ConfigureSession(Session, TaskOptions) ServiceContainerBase.ConfigureSessionService(ITaskHandler) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ServiceContainer() public ServiceContainer() Methods OnCreateService(ServiceContext) The middleware triggers the invocation of this handler just after a Service Instance is started. The application developer must put any service initialization into this handler. Default implementation does nothing. public override void OnCreateService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnDestroyService(ServiceContext) The middleware triggers the invocation of this handler just before a Service Instance is destroyed. This handler should do any cleanup for any resources that were used in the onCreateService() method. public override void OnDestroyService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnInvoke(SessionContext, TaskContext) The middleware triggers the invocation of this handler every time a task input is sent to the service to be processed. The actual service logic should be implemented in this method. This is the only method that is mandatory for the application developer to implement. public override byte[] OnInvoke(SessionContext sessionContext, TaskContext taskContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID. taskContext TaskContext Holds all information on the state of the task such as the task ID and the payload. Returns byte[] OnSessionEnter(SessionContext) This handler is executed once after the callback OnCreateService and before the OnInvoke public override void OnSessionEnter(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution. OnSessionLeave(SessionContext) The middleware triggers the invocation of this handler to unbind the Service Instance from its owning Session. This handler should do any cleanup for any resources that were used in the onSessionEnter() method. public override void OnSessionLeave(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID."
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.CheckSessionUniqCallback.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.CheckSessionUniqCallback.html",
    "title": "Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckSessionUniqCallback",
    "summary": "Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckSessionUniqCallback Classes ServiceContainer"
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.CheckSubtaskingTreeUnifiedApi.SubtaskingTreeUnifiedApiWorker.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.CheckSubtaskingTreeUnifiedApi.SubtaskingTreeUnifiedApiWorker.html",
    "title": "Class SubtaskingTreeUnifiedApiWorker",
    "summary": "Class SubtaskingTreeUnifiedApiWorker Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckSubtaskingTreeUnifiedApi Assembly ArmoniK.EndToEndTests.Worker.dll public class SubtaskingTreeUnifiedApiWorker : TaskWorkerService, ITaskContextConfiguration, ISessionServiceConfiguration, ITaskOptionsConfiguration, ISessionConfiguration, ILoggerConfiguration Inheritance object TaskWorkerService SubtaskingTreeUnifiedApiWorker Implements ITaskContextConfiguration ISessionServiceConfiguration ITaskOptionsConfiguration ISessionConfiguration ILoggerConfiguration Inherited Members TaskWorkerService.Logger TaskWorkerService.TaskId2OutputId TaskWorkerService.TaskOptions TaskWorkerService.Configuration TaskWorkerService.LoggerFactory TaskWorkerService.ConfigureLogger(IConfiguration) TaskWorkerService.SessionId TaskWorkerService.OnCreateService(ServiceContext) TaskWorkerService.OnDestroyService(ServiceContext) TaskWorkerService.OnSessionEnter(SessionContext) TaskWorkerService.OnSessionLeave(SessionContext) TaskWorkerService.ConfigureSession(Session, TaskOptions) TaskWorkerService.ConfigureSessionService(ITaskHandler) TaskWorkerService.TaskContext TaskWorkerService.ConfigureTaskOptions(TaskOptions) TaskWorkerService.SubmitTasks(IEnumerable<byte[]>, int, TaskOptions) TaskWorkerService.SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, bool, int, TaskOptions) TaskWorkerService.SubmitTask(byte[], int, TaskOptions) TaskWorkerService.SubmitTask(string, object[], int, TaskOptions) TaskWorkerService.SubmitTaskWithDependencie(byte[], IList<string>, bool, int, TaskOptions) TaskWorkerService.SubmitTaskWithDependencies(string, object[], IList<string>, bool, int, TaskOptions) TaskWorkerService.GetDependenciesResult(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AggregateValues(byte[]) public byte[] AggregateValues(byte[] serializedClientPayload) Parameters serializedClientPayload byte[] Returns byte[] CheckPayload(ClientPayload) public void CheckPayload(ClientPayload payload) Parameters payload ClientPayload ComputeSubTaskingTreeSum(byte[]) public byte[] ComputeSubTaskingTreeSum(byte[] clientPayload) Parameters clientPayload byte[] Returns byte[]"
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.CheckSubtaskingTreeUnifiedApi.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.CheckSubtaskingTreeUnifiedApi.html",
    "title": "Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckSubtaskingTreeUnifiedApi",
    "summary": "Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckSubtaskingTreeUnifiedApi Classes SubtaskingTreeUnifiedApiWorker"
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.CheckSubtaskingTree_SymphonySDK.ServiceContainer.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.CheckSubtaskingTree_SymphonySDK.ServiceContainer.html",
    "title": "Class ServiceContainer",
    "summary": "Class ServiceContainer Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckSubtaskingTree_SymphonySDK Assembly ArmoniK.EndToEndTests.Worker.dll [PublicAPI] public class ServiceContainer : ServiceContainerBase Inheritance object ServiceContainerBase ServiceContainer Inherited Members ServiceContainerBase.SessionId ServiceContainerBase.TaskId2OutputId ServiceContainerBase.TaskOptions ServiceContainerBase.TaskId ServiceContainerBase.Configuration ServiceContainerBase.LoggerFactory ServiceContainerBase.Logger ServiceContainerBase.SubmitTasks(IEnumerable<byte[]>, int, TaskOptions) ServiceContainerBase.SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, bool, int, TaskOptions) ServiceContainerBase.SubmitSubtaskWithDependencies(byte[], IList<string>, int, TaskOptions) ServiceContainerBase.SubmitSubtasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, int, TaskOptions) ServiceContainerBase.WaitForTaskCompletion(string) ServiceContainerBase.WaitForTasksCompletion(IEnumerable<string>) ServiceContainerBase.WaitForSubTasksCompletion(string) ServiceContainerBase.GetDependenciesResult(string) ServiceContainerBase.Configure(IConfiguration, TaskOptions) ServiceContainerBase.ConfigureSession(Session, TaskOptions) ServiceContainerBase.ConfigureSessionService(ITaskHandler) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckPayload(ClientPayload) public void CheckPayload(ClientPayload payload) Parameters payload ClientPayload OnCreateService(ServiceContext) The middleware triggers the invocation of this handler just after a Service Instance is started. The application developer must put any service initialization into this handler. Default implementation does nothing. public override void OnCreateService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnDestroyService(ServiceContext) The middleware triggers the invocation of this handler just before a Service Instance is destroyed. This handler should do any cleanup for any resources that were used in the onCreateService() method. public override void OnDestroyService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnInvoke(SessionContext, TaskContext) The middleware triggers the invocation of this handler every time a task input is sent to the service to be processed. The actual service logic should be implemented in this method. This is the only method that is mandatory for the application developer to implement. public override byte[] OnInvoke(SessionContext sessionContext, TaskContext taskContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID. taskContext TaskContext Holds all information on the state of the task such as the task ID and the payload. Returns byte[] OnSessionEnter(SessionContext) This handler is executed once after the callback OnCreateService and before the OnInvoke public override void OnSessionEnter(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution. OnSessionLeave(SessionContext) The middleware triggers the invocation of this handler to unbind the Service Instance from its owning Session. This handler should do any cleanup for any resources that were used in the onSessionEnter() method. public override void OnSessionLeave(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID."
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.CheckSubtaskingTree_SymphonySDK.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.CheckSubtaskingTree_SymphonySDK.html",
    "title": "Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckSubtaskingTree_SymphonySDK",
    "summary": "Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckSubtaskingTree_SymphonySDK Classes ServiceContainer"
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.CheckTryGetResults.ServiceContainer.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.CheckTryGetResults.ServiceContainer.html",
    "title": "Class ServiceContainer",
    "summary": "Class ServiceContainer Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckTryGetResults Assembly ArmoniK.EndToEndTests.Worker.dll [PublicAPI] public class ServiceContainer : ServiceContainerBase Inheritance object ServiceContainerBase ServiceContainer Inherited Members ServiceContainerBase.SessionId ServiceContainerBase.TaskId2OutputId ServiceContainerBase.TaskOptions ServiceContainerBase.TaskId ServiceContainerBase.Configuration ServiceContainerBase.LoggerFactory ServiceContainerBase.Logger ServiceContainerBase.SubmitTasks(IEnumerable<byte[]>, int, TaskOptions) ServiceContainerBase.SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, bool, int, TaskOptions) ServiceContainerBase.SubmitSubtaskWithDependencies(byte[], IList<string>, int, TaskOptions) ServiceContainerBase.SubmitSubtasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, int, TaskOptions) ServiceContainerBase.WaitForTaskCompletion(string) ServiceContainerBase.WaitForTasksCompletion(IEnumerable<string>) ServiceContainerBase.WaitForSubTasksCompletion(string) ServiceContainerBase.GetDependenciesResult(string) ServiceContainerBase.Configure(IConfiguration, TaskOptions) ServiceContainerBase.ConfigureSession(Session, TaskOptions) ServiceContainerBase.ConfigureSessionService(ITaskHandler) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OnCreateService(ServiceContext) The middleware triggers the invocation of this handler just after a Service Instance is started. The application developer must put any service initialization into this handler. Default implementation does nothing. public override void OnCreateService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnDestroyService(ServiceContext) The middleware triggers the invocation of this handler just before a Service Instance is destroyed. This handler should do any cleanup for any resources that were used in the onCreateService() method. public override void OnDestroyService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnInvoke(SessionContext, TaskContext) The middleware triggers the invocation of this handler every time a task input is sent to the service to be processed. The actual service logic should be implemented in this method. This is the only method that is mandatory for the application developer to implement. public override byte[] OnInvoke(SessionContext sessionContext, TaskContext taskContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID. taskContext TaskContext Holds all information on the state of the task such as the task ID and the payload. Returns byte[] OnSessionEnter(SessionContext) This handler is executed once after the callback OnCreateService and before the OnInvoke public override void OnSessionEnter(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution. OnSessionLeave(SessionContext) The middleware triggers the invocation of this handler to unbind the Service Instance from its owning Session. This handler should do any cleanup for any resources that were used in the onSessionEnter() method. public override void OnSessionLeave(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID."
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.CheckTryGetResults.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.CheckTryGetResults.html",
    "title": "Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckTryGetResults",
    "summary": "Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckTryGetResults Classes ServiceContainer"
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.CheckTypeOfSubmission.ServiceContainer.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.CheckTypeOfSubmission.ServiceContainer.html",
    "title": "Class ServiceContainer",
    "summary": "Class ServiceContainer Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckTypeOfSubmission Assembly ArmoniK.EndToEndTests.Worker.dll [PublicAPI] public class ServiceContainer : ServiceContainerBase Inheritance object ServiceContainerBase ServiceContainer Inherited Members ServiceContainerBase.SessionId ServiceContainerBase.TaskId2OutputId ServiceContainerBase.TaskOptions ServiceContainerBase.TaskId ServiceContainerBase.Configuration ServiceContainerBase.LoggerFactory ServiceContainerBase.Logger ServiceContainerBase.SubmitTasks(IEnumerable<byte[]>, int, TaskOptions) ServiceContainerBase.SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, bool, int, TaskOptions) ServiceContainerBase.SubmitSubtaskWithDependencies(byte[], IList<string>, int, TaskOptions) ServiceContainerBase.SubmitSubtasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, int, TaskOptions) ServiceContainerBase.WaitForTaskCompletion(string) ServiceContainerBase.WaitForTasksCompletion(IEnumerable<string>) ServiceContainerBase.WaitForSubTasksCompletion(string) ServiceContainerBase.GetDependenciesResult(string) ServiceContainerBase.Configure(IConfiguration, TaskOptions) ServiceContainerBase.ConfigureSession(Session, TaskOptions) ServiceContainerBase.ConfigureSessionService(ITaskHandler) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OnCreateService(ServiceContext) The middleware triggers the invocation of this handler just after a Service Instance is started. The application developer must put any service initialization into this handler. Default implementation does nothing. public override void OnCreateService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnDestroyService(ServiceContext) The middleware triggers the invocation of this handler just before a Service Instance is destroyed. This handler should do any cleanup for any resources that were used in the onCreateService() method. public override void OnDestroyService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnInvoke(SessionContext, TaskContext) The middleware triggers the invocation of this handler every time a task input is sent to the service to be processed. The actual service logic should be implemented in this method. This is the only method that is mandatory for the application developer to implement. public override byte[] OnInvoke(SessionContext sessionContext, TaskContext taskContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID. taskContext TaskContext Holds all information on the state of the task such as the task ID and the payload. Returns byte[] OnSessionEnter(SessionContext) This handler is executed once after the callback OnCreateService and before the OnInvoke public override void OnSessionEnter(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution. OnSessionLeave(SessionContext) The middleware triggers the invocation of this handler to unbind the Service Instance from its owning Session. This handler should do any cleanup for any resources that were used in the onSessionEnter() method. public override void OnSessionLeave(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID."
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.CheckTypeOfSubmission.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.CheckTypeOfSubmission.html",
    "title": "Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckTypeOfSubmission",
    "summary": "Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckTypeOfSubmission Classes ServiceContainer"
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.CheckUnifiedApi.CheckUnifiedApiWorker.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.CheckUnifiedApi.CheckUnifiedApiWorker.html",
    "title": "Class CheckUnifiedApiWorker",
    "summary": "Class CheckUnifiedApiWorker Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckUnifiedApi Assembly ArmoniK.EndToEndTests.Worker.dll public class CheckUnifiedApiWorker : TaskWorkerService, ITaskContextConfiguration, ISessionServiceConfiguration, ITaskOptionsConfiguration, ISessionConfiguration, ILoggerConfiguration Inheritance object TaskWorkerService CheckUnifiedApiWorker Implements ITaskContextConfiguration ISessionServiceConfiguration ITaskOptionsConfiguration ISessionConfiguration ILoggerConfiguration Inherited Members TaskWorkerService.Logger TaskWorkerService.TaskId2OutputId TaskWorkerService.TaskOptions TaskWorkerService.Configuration TaskWorkerService.LoggerFactory TaskWorkerService.ConfigureLogger(IConfiguration) TaskWorkerService.SessionId TaskWorkerService.OnCreateService(ServiceContext) TaskWorkerService.OnDestroyService(ServiceContext) TaskWorkerService.OnSessionEnter(SessionContext) TaskWorkerService.OnSessionLeave(SessionContext) TaskWorkerService.ConfigureSession(Session, TaskOptions) TaskWorkerService.ConfigureSessionService(ITaskHandler) TaskWorkerService.TaskContext TaskWorkerService.ConfigureTaskOptions(TaskOptions) TaskWorkerService.SubmitTasks(IEnumerable<byte[]>, int, TaskOptions) TaskWorkerService.SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, bool, int, TaskOptions) TaskWorkerService.SubmitTask(byte[], int, TaskOptions) TaskWorkerService.SubmitTask(string, object[], int, TaskOptions) TaskWorkerService.SubmitTaskWithDependencie(byte[], IList<string>, bool, int, TaskOptions) TaskWorkerService.SubmitTaskWithDependencies(string, object[], IList<string>, bool, int, TaskOptions) TaskWorkerService.GetDependenciesResult(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ComputeBasicArrayCube(double[]) public double[] ComputeBasicArrayCube(double[] inputs) Parameters inputs double[] Returns double[] ComputeMadd(byte[], byte[], double) public static double[] ComputeMadd(byte[] inputs1, byte[] inputs2, double k) Parameters inputs1 byte[] inputs2 byte[] k double Returns double[] ComputeReduceCube(byte[]) public static double ComputeReduceCube(byte[] inputs) Parameters inputs byte[] Returns double ComputeReduceCube(double[]) public static double ComputeReduceCube(double[] inputs) Parameters inputs double[] Returns double GetSessionIdFromWorker() public string GetSessionIdFromWorker() Returns string GetTaskOptionsFromWorker() public string GetTaskOptionsFromWorker() Returns string NonStaticComputeMadd(byte[], byte[], double) public double[] NonStaticComputeMadd(byte[] inputs1, byte[] inputs2, double k) Parameters inputs1 byte[] inputs2 byte[] k double Returns double[] RandomTaskError(double) public double[] RandomTaskError(double percentageOfFailure = 25) Parameters percentageOfFailure double Returns double[]"
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.CheckUnifiedApi.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.CheckUnifiedApi.html",
    "title": "Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckUnifiedApi",
    "summary": "Namespace ArmoniK.EndToEndTests.Worker.Tests.CheckUnifiedApi Classes CheckUnifiedApiWorker"
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.LargePayloadSubmit.LargePayloadSubmitWorker.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.LargePayloadSubmit.LargePayloadSubmitWorker.html",
    "title": "Class LargePayloadSubmitWorker",
    "summary": "Class LargePayloadSubmitWorker Namespace ArmoniK.EndToEndTests.Worker.Tests.LargePayloadSubmit Assembly ArmoniK.EndToEndTests.Worker.dll The service to register in the worker public class LargePayloadSubmitWorker : BaseService<LargePayloadSubmitWorker> Inheritance object BaseService<LargePayloadSubmitWorker> LargePayloadSubmitWorker Inherited Members BaseService<LargePayloadSubmitWorker>.Logger BaseService<LargePayloadSubmitWorker>.SessionId BaseService<LargePayloadSubmitWorker>.TaskId2OutputId BaseService<LargePayloadSubmitWorker>.TaskOptions BaseService<LargePayloadSubmitWorker>.TaskId BaseService<LargePayloadSubmitWorker>.Configuration BaseService<LargePayloadSubmitWorker>.LoggerFactory BaseService<LargePayloadSubmitWorker>.OnCreateService(ServiceContext) BaseService<LargePayloadSubmitWorker>.OnSessionEnter(SessionContext) BaseService<LargePayloadSubmitWorker>.OnInvoke(SessionContext, TaskContext) BaseService<LargePayloadSubmitWorker>.OnSessionLeave(SessionContext) BaseService<LargePayloadSubmitWorker>.OnDestroyService(ServiceContext) BaseService<LargePayloadSubmitWorker>.SubmitTasks(IEnumerable<byte[]>, int, TaskOptions) BaseService<LargePayloadSubmitWorker>.SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, bool, int, TaskOptions) BaseService<LargePayloadSubmitWorker>.WaitForTaskCompletion(string) BaseService<LargePayloadSubmitWorker>.WaitForTasksCompletion(IEnumerable<string>) BaseService<LargePayloadSubmitWorker>.WaitForSubTasksCompletion(string) BaseService<LargePayloadSubmitWorker>.GetDependenciesResult(string) BaseService<LargePayloadSubmitWorker>.Configure(IConfiguration, TaskOptions) BaseService<LargePayloadSubmitWorker>.ConfigureSession(Session, TaskOptions) BaseService<LargePayloadSubmitWorker>.ConfigureSessionService(ITaskHandler) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ComputeSum(double[], int) Client method to compute data in the worker public static double ComputeSum(double[] inputs, int workloadTime) Parameters inputs double[] The first arguments from Client call workloadTime int The second arguments from client call Returns double The result to return"
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.LargePayloadSubmit.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.LargePayloadSubmit.html",
    "title": "Namespace ArmoniK.EndToEndTests.Worker.Tests.LargePayloadSubmit",
    "summary": "Namespace ArmoniK.EndToEndTests.Worker.Tests.LargePayloadSubmit Classes LargePayloadSubmitWorker The service to register in the worker"
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.PayloadIntegrityTestWorker.Services.ServiceApps.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.PayloadIntegrityTestWorker.Services.ServiceApps.html",
    "title": "Class ServiceApps",
    "summary": "Class ServiceApps Namespace ArmoniK.EndToEndTests.Worker.Tests.PayloadIntegrityTestWorker.Services Assembly ArmoniK.EndToEndTests.Worker.dll public class ServiceApps : TaskWorkerService, ITaskContextConfiguration, ISessionServiceConfiguration, ITaskOptionsConfiguration, ISessionConfiguration, ILoggerConfiguration Inheritance object TaskWorkerService ServiceApps Implements ITaskContextConfiguration ISessionServiceConfiguration ITaskOptionsConfiguration ISessionConfiguration ILoggerConfiguration Inherited Members TaskWorkerService.Logger TaskWorkerService.TaskId2OutputId TaskWorkerService.TaskOptions TaskWorkerService.Configuration TaskWorkerService.LoggerFactory TaskWorkerService.ConfigureLogger(IConfiguration) TaskWorkerService.SessionId TaskWorkerService.OnCreateService(ServiceContext) TaskWorkerService.OnDestroyService(ServiceContext) TaskWorkerService.OnSessionEnter(SessionContext) TaskWorkerService.OnSessionLeave(SessionContext) TaskWorkerService.ConfigureSession(Session, TaskOptions) TaskWorkerService.ConfigureSessionService(ITaskHandler) TaskWorkerService.TaskContext TaskWorkerService.ConfigureTaskOptions(TaskOptions) TaskWorkerService.SubmitTasks(IEnumerable<byte[]>, int, TaskOptions) TaskWorkerService.SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, bool, int, TaskOptions) TaskWorkerService.SubmitTask(byte[], int, TaskOptions) TaskWorkerService.SubmitTask(string, object[], int, TaskOptions) TaskWorkerService.SubmitTaskWithDependencie(byte[], IList<string>, bool, int, TaskOptions) TaskWorkerService.SubmitTaskWithDependencies(string, object[], IList<string>, bool, int, TaskOptions) TaskWorkerService.GetDependenciesResult(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CopyPayload(string) public static string CopyPayload(string inputs) Parameters inputs string Returns string"
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.PayloadIntegrityTestWorker.Services.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.PayloadIntegrityTestWorker.Services.html",
    "title": "Namespace ArmoniK.EndToEndTests.Worker.Tests.PayloadIntegrityTestWorker.Services",
    "summary": "Namespace ArmoniK.EndToEndTests.Worker.Tests.PayloadIntegrityTestWorker.Services Classes ServiceApps"
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.Priority.Priority.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.Priority.Priority.html",
    "title": "Class Priority",
    "summary": "Class Priority Namespace ArmoniK.EndToEndTests.Worker.Tests.Priority Assembly ArmoniK.EndToEndTests.Worker.dll [UsedImplicitly] public class Priority : TaskWorkerService, ITaskContextConfiguration, ISessionServiceConfiguration, ITaskOptionsConfiguration, ISessionConfiguration, ILoggerConfiguration Inheritance object TaskWorkerService Priority Implements ITaskContextConfiguration ISessionServiceConfiguration ITaskOptionsConfiguration ISessionConfiguration ILoggerConfiguration Inherited Members TaskWorkerService.Logger TaskWorkerService.TaskId2OutputId TaskWorkerService.TaskOptions TaskWorkerService.Configuration TaskWorkerService.LoggerFactory TaskWorkerService.ConfigureLogger(IConfiguration) TaskWorkerService.SessionId TaskWorkerService.OnCreateService(ServiceContext) TaskWorkerService.OnDestroyService(ServiceContext) TaskWorkerService.OnSessionEnter(SessionContext) TaskWorkerService.OnSessionLeave(SessionContext) TaskWorkerService.ConfigureSession(Session, TaskOptions) TaskWorkerService.ConfigureSessionService(ITaskHandler) TaskWorkerService.TaskContext TaskWorkerService.ConfigureTaskOptions(TaskOptions) TaskWorkerService.SubmitTasks(IEnumerable<byte[]>, int, TaskOptions) TaskWorkerService.SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, bool, int, TaskOptions) TaskWorkerService.SubmitTask(byte[], int, TaskOptions) TaskWorkerService.SubmitTask(string, object[], int, TaskOptions) TaskWorkerService.SubmitTaskWithDependencie(byte[], IList<string>, bool, int, TaskOptions) TaskWorkerService.SubmitTaskWithDependencies(string, object[], IList<string>, bool, int, TaskOptions) TaskWorkerService.GetDependenciesResult(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetPriority(byte[]) public byte[] GetPriority(byte[] payload) Parameters payload byte[] Returns byte[]"
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.Priority.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.Priority.html",
    "title": "Namespace ArmoniK.EndToEndTests.Worker.Tests.Priority",
    "summary": "Namespace ArmoniK.EndToEndTests.Worker.Tests.Priority Classes Priority"
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.SimpleComputeNSubtasking.ServiceContainer.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.SimpleComputeNSubtasking.ServiceContainer.html",
    "title": "Class ServiceContainer",
    "summary": "Class ServiceContainer Namespace ArmoniK.EndToEndTests.Worker.Tests.SimpleComputeNSubtasking Assembly ArmoniK.EndToEndTests.Worker.dll [PublicAPI] public class ServiceContainer : ServiceContainerBase Inheritance object ServiceContainerBase ServiceContainer Inherited Members ServiceContainerBase.SessionId ServiceContainerBase.TaskId2OutputId ServiceContainerBase.TaskOptions ServiceContainerBase.TaskId ServiceContainerBase.Configuration ServiceContainerBase.LoggerFactory ServiceContainerBase.Logger ServiceContainerBase.SubmitTasks(IEnumerable<byte[]>, int, TaskOptions) ServiceContainerBase.SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, bool, int, TaskOptions) ServiceContainerBase.SubmitSubtaskWithDependencies(byte[], IList<string>, int, TaskOptions) ServiceContainerBase.SubmitSubtasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, int, TaskOptions) ServiceContainerBase.WaitForTaskCompletion(string) ServiceContainerBase.WaitForTasksCompletion(IEnumerable<string>) ServiceContainerBase.WaitForSubTasksCompletion(string) ServiceContainerBase.GetDependenciesResult(string) ServiceContainerBase.Configure(IConfiguration, TaskOptions) ServiceContainerBase.ConfigureSession(Session, TaskOptions) ServiceContainerBase.ConfigureSessionService(ITaskHandler) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ComputeSquare(TaskContext, ClientPayload) public byte[] ComputeSquare(TaskContext taskContext, ClientPayload clientPayload) Parameters taskContext TaskContext clientPayload ClientPayload Returns byte[] OnCreateService(ServiceContext) The middleware triggers the invocation of this handler just after a Service Instance is started. The application developer must put any service initialization into this handler. Default implementation does nothing. public override void OnCreateService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnDestroyService(ServiceContext) The middleware triggers the invocation of this handler just before a Service Instance is destroyed. This handler should do any cleanup for any resources that were used in the onCreateService() method. public override void OnDestroyService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnInvoke(SessionContext, TaskContext) The middleware triggers the invocation of this handler every time a task input is sent to the service to be processed. The actual service logic should be implemented in this method. This is the only method that is mandatory for the application developer to implement. public override byte[] OnInvoke(SessionContext sessionContext, TaskContext taskContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID. taskContext TaskContext Holds all information on the state of the task such as the task ID and the payload. Returns byte[] OnSessionEnter(SessionContext) This handler is executed once after the callback OnCreateService and before the OnInvoke public override void OnSessionEnter(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution. OnSessionLeave(SessionContext) The middleware triggers the invocation of this handler to unbind the Service Instance from its owning Session. This handler should do any cleanup for any resources that were used in the onSessionEnter() method. public override void OnSessionLeave(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID."
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.SimpleComputeNSubtasking.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.SimpleComputeNSubtasking.html",
    "title": "Namespace ArmoniK.EndToEndTests.Worker.Tests.SimpleComputeNSubtasking",
    "summary": "Namespace ArmoniK.EndToEndTests.Worker.Tests.SimpleComputeNSubtasking Classes ServiceContainer"
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.TemplateTest.ServiceContainer.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.TemplateTest.ServiceContainer.html",
    "title": "Class ServiceContainer",
    "summary": "Class ServiceContainer Namespace ArmoniK.EndToEndTests.Worker.Tests.TemplateTest Assembly ArmoniK.EndToEndTests.Worker.dll [PublicAPI] public class ServiceContainer : ServiceContainerBase Inheritance object ServiceContainerBase ServiceContainer Inherited Members ServiceContainerBase.SessionId ServiceContainerBase.TaskId2OutputId ServiceContainerBase.TaskOptions ServiceContainerBase.TaskId ServiceContainerBase.Configuration ServiceContainerBase.LoggerFactory ServiceContainerBase.Logger ServiceContainerBase.SubmitTasks(IEnumerable<byte[]>, int, TaskOptions) ServiceContainerBase.SubmitTasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, bool, int, TaskOptions) ServiceContainerBase.SubmitSubtaskWithDependencies(byte[], IList<string>, int, TaskOptions) ServiceContainerBase.SubmitSubtasksWithDependencies(IEnumerable<Tuple<byte[], IList<string>>>, int, TaskOptions) ServiceContainerBase.WaitForTaskCompletion(string) ServiceContainerBase.WaitForTasksCompletion(IEnumerable<string>) ServiceContainerBase.WaitForSubTasksCompletion(string) ServiceContainerBase.GetDependenciesResult(string) ServiceContainerBase.Configure(IConfiguration, TaskOptions) ServiceContainerBase.ConfigureSession(Session, TaskOptions) ServiceContainerBase.ConfigureSessionService(ITaskHandler) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OnCreateService(ServiceContext) The middleware triggers the invocation of this handler just after a Service Instance is started. The application developer must put any service initialization into this handler. Default implementation does nothing. public override void OnCreateService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnDestroyService(ServiceContext) The middleware triggers the invocation of this handler just before a Service Instance is destroyed. This handler should do any cleanup for any resources that were used in the onCreateService() method. public override void OnDestroyService(ServiceContext serviceContext) Parameters serviceContext ServiceContext Holds all information on the state of the service at the start of the execution. OnInvoke(SessionContext, TaskContext) The middleware triggers the invocation of this handler every time a task input is sent to the service to be processed. The actual service logic should be implemented in this method. This is the only method that is mandatory for the application developer to implement. public override byte[] OnInvoke(SessionContext sessionContext, TaskContext taskContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID. taskContext TaskContext Holds all information on the state of the task such as the task ID and the payload. Returns byte[] OnSessionEnter(SessionContext) This handler is executed once after the callback OnCreateService and before the OnInvoke public override void OnSessionEnter(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution. OnSessionLeave(SessionContext) The middleware triggers the invocation of this handler to unbind the Service Instance from its owning Session. This handler should do any cleanup for any resources that were used in the onSessionEnter() method. public override void OnSessionLeave(SessionContext sessionContext) Parameters sessionContext SessionContext Holds all information on the state of the session at the start of the execution such as session ID."
  },
  "api/ArmoniK.EndToEndTests.Worker.Tests.TemplateTest.html": {
    "href": "api/ArmoniK.EndToEndTests.Worker.Tests.TemplateTest.html",
    "title": "Namespace ArmoniK.EndToEndTests.Worker.Tests.TemplateTest",
    "summary": "Namespace ArmoniK.EndToEndTests.Worker.Tests.TemplateTest Classes ServiceContainer"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API documentation",
    "summary": "API documentation"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "summary": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "ArmoniK.Extensions.Csharp API documentation",
    "summary": "ArmoniK.Extensions.Csharp API documentation Autogenerated documentation of the Extensions.Csharp for ArmoniK Articles Buffering submission"
  }
}